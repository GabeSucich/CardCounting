[{"/Users/gabrielsucich/Desktop/CardCounting/src/index.js":"1","/Users/gabrielsucich/Desktop/CardCounting/src/reportWebVitals.js":"2","/Users/gabrielsucich/Desktop/CardCounting/src/App.js":"3","/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayingCard/index.js":"4","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Card/index.js":"5","/Users/gabrielsucich/Desktop/CardCounting/src/Components/Hand/index.js":"6","/Users/gabrielsucich/Desktop/CardCounting/src/Components/Deck/index.js":"7","/Users/gabrielsucich/Desktop/CardCounting/src/Game/index.js":"8","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Game/index.js":"9","/Users/gabrielsucich/Desktop/CardCounting/src/TableArrangment/index.js":"10","/Users/gabrielsucich/Desktop/CardCounting/src/utils/PlayerHand/index.js":"11","/Users/gabrielsucich/Desktop/CardCounting/src/utils/DealerHand/index.js":"12","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Shoe/index.js":"13","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Player/index.js":"14","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Dealer/index.js":"15","/Users/gabrielsucich/Desktop/CardCounting/src/utils/DecisionMaker/index.js":"16","/Users/gabrielsucich/Desktop/CardCounting/src/TableArrangment/Single/index.js":"17","/Users/gabrielsucich/Desktop/CardCounting/src/TableArrangment/Double/index.js":"18","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Shoe/Helpers.js":"19","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Hand/index.js":"20","/Users/gabrielsucich/Desktop/CardCounting/src/Components/Dealer/index.js":"21","/Users/gabrielsucich/Desktop/CardCounting/src/Components/Player/index.js":"22","/Users/gabrielsucich/Desktop/CardCounting/src/GlobalStates/GameState/index.js":"23","/Users/gabrielsucich/Desktop/CardCounting/src/GlobalStates/GameState/action.js":"24","/Users/gabrielsucich/Desktop/CardCounting/src/Components/Player/ActivePlayer/index.js":"25","/Users/gabrielsucich/Desktop/CardCounting/src/Components/Player/PassivePlayer/index.js":"26","/Users/gabrielsucich/Desktop/CardCounting/src/GlobalStates/QuestionState/index.js":"27","/Users/gabrielsucich/Desktop/CardCounting/src/TableArrangment/Triple/index.js":"28","/Users/gabrielsucich/Desktop/CardCounting/src/GlobalStates/QuestionState/action.js":"29","/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayerQuestions/index.js":"30","/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayerQuestions/TrueCount/index.js":"31","/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayerQuestions/RunningCount/index.js":"32","/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayerQuestions/StrategyDecision/index.js":"33","/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayerQuestions/DecksRemaining/index.js":"34","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/index.js":"35","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/PlayerCount/index.js":"36","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/DeckCount/index.js":"37","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/Rules/index.js":"38","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/StrategyConsiderations/index.js":"39","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/Difficulty/index.js":"40","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/Frequency/index.js":"41","/Users/gabrielsucich/Desktop/CardCounting/src/Components/InfoPopup/index.js":"42","/Users/gabrielsucich/Desktop/CardCounting/src/Components/SectionDivider/index.js":"43","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/Goal/index.js":"44"},{"size":458,"mtime":1611180310092,"results":"45","hashOfConfig":"46"},{"size":362,"mtime":1611104735842,"results":"47","hashOfConfig":"46"},{"size":673,"mtime":1611546980180,"results":"48","hashOfConfig":"46"},{"size":528,"mtime":1611364533556,"results":"49","hashOfConfig":"46"},{"size":378,"mtime":1611200184441,"results":"50","hashOfConfig":"46"},{"size":622,"mtime":1611468755544,"results":"51","hashOfConfig":"46"},{"size":672,"mtime":1611186418524,"results":"52","hashOfConfig":"46"},{"size":730,"mtime":1611548811830,"results":"53","hashOfConfig":"46"},{"size":8819,"mtime":1611550023932,"results":"54","hashOfConfig":"46"},{"size":690,"mtime":1611457777825,"results":"55","hashOfConfig":"46"},{"size":2278,"mtime":1611549034040,"results":"56","hashOfConfig":"46"},{"size":1354,"mtime":1611346584570,"results":"57","hashOfConfig":"46"},{"size":1228,"mtime":1611200499393,"results":"58","hashOfConfig":"46"},{"size":1720,"mtime":1611549059292,"results":"59","hashOfConfig":"46"},{"size":801,"mtime":1611353963104,"results":"60","hashOfConfig":"46"},{"size":3749,"mtime":1611509330966,"results":"61","hashOfConfig":"46"},{"size":656,"mtime":1611510529129,"results":"62","hashOfConfig":"46"},{"size":827,"mtime":1611510522910,"results":"63","hashOfConfig":"46"},{"size":779,"mtime":1611116163384,"results":"64","hashOfConfig":"46"},{"size":1179,"mtime":1611354761192,"results":"65","hashOfConfig":"46"},{"size":792,"mtime":1611474102091,"results":"66","hashOfConfig":"46"},{"size":443,"mtime":1611457997436,"results":"67","hashOfConfig":"46"},{"size":2754,"mtime":1611550612732,"results":"68","hashOfConfig":"46"},{"size":580,"mtime":1611548291909,"results":"69","hashOfConfig":"46"},{"size":3067,"mtime":1611510064114,"results":"70","hashOfConfig":"46"},{"size":2721,"mtime":1611527573469,"results":"71","hashOfConfig":"46"},{"size":1125,"mtime":1611548319695,"results":"72","hashOfConfig":"46"},{"size":827,"mtime":1611510536891,"results":"73","hashOfConfig":"46"},{"size":199,"mtime":1611548278368,"results":"74","hashOfConfig":"46"},{"size":3034,"mtime":1611473674201,"results":"75","hashOfConfig":"46"},{"size":1725,"mtime":1611472998821,"results":"76","hashOfConfig":"46"},{"size":1479,"mtime":1611472499077,"results":"77","hashOfConfig":"46"},{"size":2556,"mtime":1611550787546,"results":"78","hashOfConfig":"46"},{"size":1906,"mtime":1611510278389,"results":"79","hashOfConfig":"46"},{"size":8111,"mtime":1611550412025,"results":"80","hashOfConfig":"46"},{"size":781,"mtime":1611524620994,"results":"81","hashOfConfig":"46"},{"size":794,"mtime":1611524581124,"results":"82","hashOfConfig":"46"},{"size":1031,"mtime":1611549200583,"results":"83","hashOfConfig":"46"},{"size":894,"mtime":1611547404195,"results":"84","hashOfConfig":"46"},{"size":1669,"mtime":1611544248436,"results":"85","hashOfConfig":"46"},{"size":1796,"mtime":1611544284284,"results":"86","hashOfConfig":"46"},{"size":411,"mtime":1611537810083,"results":"87","hashOfConfig":"46"},{"size":571,"mtime":1611535640153,"results":"88","hashOfConfig":"46"},{"size":854,"mtime":1611547438601,"results":"89","hashOfConfig":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},"pr7uj7",{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"92"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"92"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"92"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"92"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"92"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"92"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"92"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"92"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"92"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"92"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"92"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"92"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"92"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"92"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"92"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"92"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"92"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"92"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163","usedDeprecatedRules":"92"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"92"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"92"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"92"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"92"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"92"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"183","messages":"184","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"92"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"92"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"92"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"92"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"92"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"92"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"92"},"/Users/gabrielsucich/Desktop/CardCounting/src/index.js",[],["211","212"],"/Users/gabrielsucich/Desktop/CardCounting/src/reportWebVitals.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/App.js",["213","214","215"],"import React, { useState } from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nimport 'semantic-ui-css/semantic.min.css'\n\nimport \"./ApplicationStyle.css\"\n\nimport { Button, Grid } from \"semantic-ui-react\"\n\nimport { GameProvider } from \"./GlobalStates/GameState\"\nimport { QuestionProvider } from \"./GlobalStates/QuestionState\"\nimport Game from \"./Game\"\n\nfunction App() {\n\n\n  return (\n    <Router>\n      <GameProvider>\n        <QuestionProvider>\n          <div className=\"background overflow\">\n\n\n            <Game numDecks={4} numPlayers={2} />\n          </div>\n        </QuestionProvider>\n      </GameProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayingCard/index.js",["216"],"import React from 'react'\nimport {Image, Transition} from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\n\nexport default function Card({card, ...props}) {\n\n    const getFilename = card => {\n        return \"/images/\" + card.name + card.suit[0] + \".png\"\n    }\n\n    const getSRC = card => {\n        if (!card.isUp()) {\n            return \"/images/back.png\"\n        }\n\n        return getFilename(card)\n    }\n\n\n\n    return (\n        \n        <Image src = {getSRC(card)} className = {\"playing-card \" + props.className}/>\n        \n    )\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Card/index.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/Components/Hand/index.js",["217","218"],"import React from \"react\"\n\nimport { Container, Segment, Image } from \"semantic-ui-react\"\n\nimport PlayingCard from \"../PlayingCard\"\n\nimport \"./style.css\"\n\nexport default function Hand({ hand, active, ...props }) {\n    \n    return (\n        <Segment basic disabled = {hand.isDone() ? true : false} className = \"hand\">\n            <Image.Group>\n                {hand.cards.map((card, index) => {\n                return (\n                    <PlayingCard card={card} key={index} className={index == 0 ? \"\" : \"card-in-hand no-padding\"} />\n                )\n            })}\n            </Image.Group>\n        </Segment>\n    )\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/Components/Deck/index.js",["219","220","221"],"import React, {useEffect, useState} from \"react\"\nimport Hand from \"../Hand\"\n\nimport PlayingCard from \"../PlayingCard\"\nimport Card from \"../../utils/Card\"\nimport { Container } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nexport default function Deck({...props}) {\n\n    const dummyCards = [new Card(\"A\", \"A\", \"D\", false), new Card(\"A\", \"A\", \"D\", false), new Card(\"A\", \"A\", \"D\", false), new Card(\"A\", \"A\", \"D\", false)]\n\n    \n\n    return (\n        <Container>\n            {dummyCards.map((card, index) => {\n                return <PlayingCard card = {card} key = {index} className = {index === 0 ? \"\" : \"deck-card\"}/>\n            })}\n        </Container>\n        \n    )\n\n\n}",["222","223"],"/Users/gabrielsucich/Desktop/CardCounting/src/Game/index.js",["224","225","226","227","228"],"import React, { useState, useEffect } from \"react\"\n\n\nimport TableArrangement from \"../TableArrangment\"\n\nimport TrainingGame from \"../utils/Game\"\n\nimport {useGameContext} from \"../GlobalStates/GameState\"\nimport {SET_HISTORY, EVOLVE_HISTORY, SET_GAME} from \"../GlobalStates/GameState/action\"\n\nimport GameSetup from \"../GameSetup\"\n\nexport default function Game({ numPlayers, numDecks,  ...props }) {\n\n    const [gameState, gameDispatch] = useGameContext()\n\n\n    const nextMove = () => {\n\n        gameDispatch({type: EVOLVE_HISTORY})\n    }\n\n\n    if (gameState.game) {\n        return (\n            \n            <TableArrangement afterEvent = {nextMove}/>  \n               \n        )\n    }\n    else {\n        return <GameSetup/>\n    }\n}","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Game/index.js",["229","230","231","232","233"],"const DealerHand = require(\"../DealerHand\")\nconst PlayerHand = require(\"../PlayerHand\")\nconst Shoe = require(\"../Shoe\")\n\nconst Player = require(\"../Player\")\nconst Dealer = require(\"../Dealer\")\nconst DecisionMaker = require(\"../DecisionMaker\")\n\nconst { promisify } = require(\"util\")\n\nconst _ = require(\"lodash\")\nconst { PlaceholderHeader } = require(\"semantic-ui-react\")\n\nconst defaultRules = {\n    canSurrender: false,\n    canDAS: true,\n    considerIndices: false\n}\n\nclass TrainingGame {\n\n    // The activePlayerTrigger function takes in two arguments \n\n    constructor(numPlayers, numDecks, ruleOptions = defaultRules, considerIndices = false) {\n        this.numPlayers = numPlayers;\n        this.numDecks = numDecks\n        this.canSurrender = ruleOptions.canSurrender || false;\n        this.canDAS = ruleOptions.canDAS || true;\n        this.considerIndices = considerIndices\n        \n        this.shoe = new Shoe(this.numDecks)\n        this.playerDecisionMaker = new DecisionMaker(this.canSurrender, this.canDAS, this.considerIndices)\n\n        this.activePlayerIndex = this.randomActiveIndex()\n        // this.activePlayerIndex = 5 // Can comment out for testing\n        \n        this.gameHistory = []\n\n        this.players = this.createPlayerOrder()\n        this.dealer = new Dealer()\n        \n        this.playGame()\n\n\n    }\n\n    // Returns general information about the game\n\n    seePlayerHands() {\n        console.log(\"Player Hands:\")\n        console.log(this.players.map(playerObj => playerObj.player.getHands().map(hand => hand.cards)))\n    }\n\n    seeDealerHand() {\n        console.log(\"Dealer Hand:\")\n        console.log(this.dealer.hand.cards)\n    }\n\n    getActivePlayerIndex() {\n        return this.activePlayerIndex\n    }\n\n    getPlayers() {\n        return this.players\n    }\n\n    getDealer() {\n        return this.dealer;\n    }\n\n    // Functions which give information on the shoe\n    getTrueCount() {\n        return this.shoe.getTrueCount()\n    }\n\n    getRunningCount() {\n        return this.shoe.getRunningCount()\n    }\n\n    getDecksRemainings() {\n        return this.shoe.estimateRemainingDecks()\n    }\n\n    getTotalDecks() {\n        return this.numDecks\n    }\n\n    nextCard() {\n\n        const card = this.shoe.dealCard()\n        return card\n    }\n\n    getCardsRemining() {\n        return this.shoe.numCardsRemaining()\n    }\n\n    // Creates a random order of players to deal to\n\n    randomActiveIndex() {\n        return Math.floor(Math.random() * this.numPlayers)\n    }\n\n\n    createPlayerOrder() {\n        const players = []\n\n        for (var i = 0; i < this.numPlayers; i++) {\n            players.push({ id: i, player: new Player(this.playerDecisionMaker) })\n        }\n        return players\n    }\n\n    // Functions which handle the dealing of cards at the beginning of each round\n\n    playGame() {\n        while (this.getCardsRemining() > (this.numPlayers + 1)*5) {\n            this.playRound()\n        }\n    }\n\n    playRound() {\n        this.dealStartingCards()\n        for (const {player, id} of this.players) {\n            this.attendToPlayer(player, id)\n        }\n        this.attendToDealer()\n        this.clearAllHands()\n    }\n\n    updateHistory(action, playerId) {\n        const history = {action: action, playerId: playerId}\n        history[\"dealerHand\"] = _.cloneDeep(this.dealer.getHand())\n        history[\"trueCount\"] = this.getTrueCount()\n        history[\"decksRemaining\"] = this.getDecksRemainings()\n        history[\"runningCount\"] = this.getRunningCount()\n        \n        for (const {player, id} of this.players) {\n            history[id] = _.cloneDeep(player.getHands());\n        }\n        this.gameHistory.push(history)\n    }\n\n    getHistory() {\n        return this.gameHistory\n    }\n\n    printHistory() {\n        this.gameHistory.map(event => {\n            console.log(event)\n            event[\"0\"].map(hand => console.log(hand.cards))\n            event[\"1\"].map(hand => console.log(hand.cards))\n            event[\"2\"].map(hand => console.log(hand.cards))\n            console.log(\"------------------------------------------\")\n        })\n    }\n\n    dealStartingCards() {\n        for (const {player, id} of this.players) {\n            this.dealToPlayer(player, id)\n        }\n        this.dealToDealer()\n        for (const {player, id} of this.players) {\n            this.dealToPlayer(player, id)\n        }\n        this.dealToDealer()\n    }\n\n    dealToPlayer(player, id) {\n        player.dealCard(this.nextCard())\n        this.updateHistory(\"deal\", id)\n    }\n\n    hitPlayer(player, hand, id) {\n        player.hitHand(hand, this.nextCard())\n        this.updateHistory(\"hit\", id)\n    }\n\n    playerBust(hand, id) {\n        hand.setBust()\n        hand.setDone()\n        this.updateHistory(\"bust\", id)\n    }\n    playerStay(hand, id) {\n        hand.setDone()\n        this.updateHistory(\"stay\", id)\n    }\n\n    doubleDownPlayer(player, hand, id) {\n        player.hitHand(hand, this.nextCard())\n        hand.setDone()\n        this.updateHistory(\"double\", id)\n    }\n\n    surrenderPlayer(hand, id) {\n        hand.setDone()\n        this.updateHistory(\"surrender\", id)\n\n    }\n\n    handlePlayerBlackjack(hand, id) {\n        hand.setDone()\n        this.updateHistory(\"blacjack\", id)\n    }\n\n    hitDealer() {\n        this.dealer.hit(this.nextCard())\n        this.updateHistory(\"hit\", \"d\")\n    }\n\n    stayDealer() {\n        this.dealer.stay()\n        this.updateHistory(\"stay\", \"d\")\n    }\n\n    dealToDealer() {\n        this.dealer.dealCard(this.nextCard())\n        this.updateHistory(\"deal\", \"d\")\n    }\n\n    allPlayersBust() {\n        this.dealer.setDone()\n        this.updateHistory(\"stay\", \"d\")\n    }\n\n    flipDealerCards() {\n        this.dealer.flipCards()\n        this.updateHistory(\"flip\", \"d\")\n    }\n\n    splitPlayerHand(player, hand, id) {\n        player.splitHand(hand)\n        this.updateHistory(\"split\", id)\n        this.attendToPlayer(player, id)\n    }\n\n    clearHand(player, id) {\n        player.clearHand()\n        this.updateHistory(\"clear\", id)\n    }\n\n    clearDealerHand() {\n        this.dealer.clearHand()\n        this.updateHistory(\"clear\", \"d\")\n    }\n\n    clearAllHands() {\n        \n        this.clearDealerHand()\n        for (const {player, id} of this.players) {\n            this.clearHand(player, id)\n        }\n\n    }\n\n\n    // Functions which handle with playing rounds\n    attendToPlayer(player, id) {\n\n        var playerAndHandToSplit = null\n\n        for (const hand of player.getHands()) {\n\n            if (hand.isDone()) {\n                continue;\n            }\n            var finished = false\n            \n            while (!finished) {\n\n                const decision = player.makeProperDecision(hand, this.dealer.getHand(), this.getTrueCount())\n                \n                if (hand.isBlackjack()) {\n                    this.handlePlayerBlackjack(hand, id)\n                    finished = true\n                }\n                if (decision === \"S\") {\n                    this.playerStay(hand, id)\n                    finished = true;\n                } else if (decision === \"bust\") {\n                    this.playerBust(hand, id)\n                    finished = true;\n                } else if (decision === \"H\") {\n                    this.hitPlayer(player, hand, id)\n                } else if (decision === \"D\") {\n                    this.doubleDownPlayer(player, hand, id)\n                    finished = true;\n                } else if (decision === \"SP\") {\n                    playerAndHandToSplit = [player, hand, id]\n                    finished = true;\n                } else if (decision === \"SURR\") {\n                    this.surrenderPlayer(hand, id)\n                    finished = true;\n                }\n            }\n        }\n        if (playerAndHandToSplit) {\n            this.splitPlayerHand(...playerAndHandToSplit)\n        }\n    }\n\n\n    attendToDealer() {\n        this.flipDealerCards()\n\n        var dealerMustPlay = false\n\n        for (const hand of this.getAllPlayerHands()) {\n            if (!hand.isBust()) {\n                dealerMustPlay = true;\n            }\n        }\n\n        if (!dealerMustPlay) {\n            this.allPlayersBust()\n            return\n        }\n\n        var finished = false;\n        while (!finished) {\n            var nextAction = this.dealer.nextAction()\n            if (nextAction === \"H\") {\n                this.hitDealer()\n            } else if (nextAction === \"S\") {\n                finished = true;\n            } else {\n                throw new Error(\"The dealer action was something other than H or S\")\n            }\n        }\n    }\n\n    getAllPlayerHands() {\n        const allHands = []\n        for (const {player} of this.players) {\n            for (const hand of player.getHands()) {\n                allHands.push(hand)\n            }\n        }\n        return allHands\n    }\n\n\n\n}\n\nmodule.exports = TrainingGame\n","/Users/gabrielsucich/Desktop/CardCounting/src/TableArrangment/index.js",["234"],"import React from \"react\"\n\nimport Single from \"./Single\"\nimport Double from \"./Double\"\nimport Triple from \"./Triple\"\n\nimport {useGameContext} from \"../GlobalStates/GameState\"\n\n\nexport default function TableArrangement({afterEvent, ...props}) {\n\n    const [gameState, _] = useGameContext()\n\n    const players = gameState.game.getPlayers()\n\n\n    if (players.length === 1) {\n        return <Single afterEvent = {afterEvent} game = {gameState.game}/>\n    } else if (players.length === 2) {\n        return <Double afterEvent = {afterEvent}  game = {gameState.game}/>\n    } else if (players.length === 3) {\n        return <Triple afterEvent = {afterEvent}  game = {gameState.game}/>\n    }\n    \n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/utils/PlayerHand/index.js",["235","236","237","238"],"const Card = require(\"../Card\")\nconst Hand = require(\"../Hand\")\n\nclass PlayerHand extends Hand {\n\n    constructor(...cards) {\n        super()\n        this.aceInHand = false;\n        this.cards = [...cards]\n        this.handleAces()\n        this.done = false;\n        this.split = false;\n    }\n\n    isDone() {\n        return this.done;\n    }\n\n    setDone() {\n        this.done = true;\n    }\n\n    isSplit() {\n        return this.split\n    }\n\n    setSplit() {\n        this.split = true\n    }\n\n    seeHand() {\n        return this.cards.map(card => card.name + card.suit)\n    }\n\n    isBlackjack() {\n        return this.cards.length === 2 && this.handRepresentation() === \"A10\"\n    }\n\n    canDoubleDown() {\n        return this.cards.length === 2;\n    }\n\n    canBeSplit() {\n        return this.cards.length === 2 && this.cards[0].name === this.cards[1].name\n    }\n\n    hasHighAce() {\n\n        for (const card of this.cards) {\n            if (card.value == \"11\") {\n                return true;\n            }\n        }\n        return false\n    }\n\n\n    handRepresentation() {\n\n        var handTotal = this.getHandValue();\n\n        if (eval(handTotal) > 21) {\n            return \"bust\"\n        }\n\n        if (this.cards.length === 1) {\n            return this.cards[0].value\n        }\n\n        if (this.canBeSplit()) {\n            if (this.cards[0].isAce()) {\n                return \"AA\"\n            } else {\n                return this.cards[0].value + this.cards[1].value\n            }\n\n        } else if (this.hasHighAce()) {\n            var total = 0\n            for (const card of this.cards) {\n                if (card.value !== \"11\") {\n                    total += eval(card.value)\n                }\n            }\n            return \"A\" + String(total)\n        } else {\n            return this.getHandValue()\n        }\n    }\n\n    adjustRepresentationForDAS() {\n        if (!this.canBeSplit()) {\n            throw new Error(\"Trying to adjust for DAS when hand is not splittable\")\n        } else {\n            var currentRepresentation = this.handRepresentation();\n            if (currentRepresentation === \"AA\") {\n                return \"12\"\n            }\n            else {\n                return this.getHandValue()\n            }\n        }\n    }\n\n}\n\nmodule.exports = PlayerHand\n\n\n\n","/Users/gabrielsucich/Desktop/CardCounting/src/utils/DealerHand/index.js",["239","240"],"const Hand = require(\"../Hand\")\nconst Card = require(\"../Card\")\n\nclass DealerHand extends Hand  {\n    constructor(downCard) {\n        super()\n        this.downCard = downCard;\n        this.cards = [downCard]\n        this.done = false;\n    }\n\n    dealUpcard(upCard) {\n        this.upCard = upCard\n        this.cards.push(this.upCard)\n    }\n\n    getUpcard() {\n        return this.upCard.value\n    }\n\n    flipCards() {\n        this.downCard.flipUp()\n        this.handleAces()\n    }\n\n    isSoft17() {\n        var total = this.getHandValue()\n        if (eval(total) !== 17) {\n            return false\n        }\n    \n        for (const card of this.cards) {\n            if (card.value === \"11\") {\n                return true\n            }\n        \n        return false\n        }\n    }\n    \n}\n\nmodule.exports = DealerHand\n\n// const a = new Card(\"A\", \"A\", \"\")\n// const b = new Card(\"7\", \"7\", \"\")\n// const c = new Card(\"2\", \"2\", \"\")\n// const d = new Card(\"J\", \"10\", \"\")\n// const e = new Card(\"9\", \"9\", \"\")\n// const f = new Card(\"6\", \"6\", \"\")\n// const g = new Card(\"5\", \"5\", \"\")\n// const h = new Card(\"3\", \"3\", \"\")\n// const i = new Card(\"4\", \"4\", \"\")\n// const j = new Card(\"A\", \"A\", \"\")\n\n// const dh = new DealerHand(a)\n// dh.dealUpcard(j)\n// dh.addCard(h)\n// dh.addCard(c)\n// dh.addCard(b)\n// dh.flipCards()\n// console.log(dh.cards)\n// console.log(dh.isSoft17())\n","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Shoe/index.js",["241"],"\nconst cardInfo = require(\"../../cards/cards.json\")\nconst Helper = require(\"./Helpers\")\n\nclass Shoe {\n\n    constructor(numDecks) {\n        this.totalDecks = numDecks;\n        this.undealtCards = Helper.createShoe(cardInfo, numDecks);\n        this.dealtCards = [];\n        this.runningCount = 0;\n    }\n\n\n\n    numCardsRemaining() {\n        return this.undealtCards.length\n    }\n\n    numCardsDealt() {\n        return this.dealtCards.length\n    }\n\n    totalCards() {\n        return this.numCardsDealt() + this.numCardsRemaining()\n    }\n\n    dealCard() {\n        var nextCard = this.undealtCards.pop()[0];\n        if (nextCard.isAce() || nextCard.value === \"10\") {\n            this.runningCount = this.runningCount - 1\n        } else if (eval(nextCard.value) < 7) {\n            this.runningCount = this.runningCount + 1\n        }\n        this.dealtCards.push(nextCard)\n        return nextCard;\n    }\n\n\n    getRunningCount() {\n        return this.runningCount\n    }\n\n    getTrueCount() {\n        return Math.ceil(this.runningCount/this.estimateRemainingDecks())\n    }\n\n    estimateRemainingDecks() {\n\n        return Math.ceil( (this.numCardsRemaining()/this.totalCards())*2*this.totalDecks )/2\n    }\n\n\n\n\n\n\n}\n\n\nmodule.exports = Shoe\n\n\n","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Player/index.js",["242","243","244"],"const PlayerHand = require(\"../PlayerHand\")\nconst Card = require(\"../Card\")\nconst DecisionMaker = require(\"../DecisionMaker\");\nconst { PlaceholderHeader } = require(\"semantic-ui-react\");\n\nclass Player {\n\n    constructor(DecisionMaker) {\n        this.DecisionMaker = DecisionMaker\n        this.hands = [];\n    }\n\n    isDone() {\n        for (const hand of this.hands) {\n            if (!hand.isDone()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    getHands() {\n        return this.hands\n    }\n\n    hitHand(hand, card) {\n        hand.addCard(card)\n    }\n\n    dealCard(card) {\n        if (!this.hands[0]) {\n            this.hands.push(new PlayerHand(card))\n        } else {\n            this.hands[0].addCard(card)\n        } \n    }\n\n    splitHand(hand) {\n        const [card1, card2] = hand.cards\n        var index = this.hands.indexOf(hand)\n        var newHand1 = new PlayerHand(card1)\n        newHand1.setSplit()\n        var newHand2 = new PlayerHand(card2)\n        newHand1.setSplit()\n        this.hands.splice(index, 1, newHand1, newHand2)\n    }\n\n    makeProperDecision(hand, dealerHand, trueCount) {\n        // console.log(dealerHand)\n        return this.DecisionMaker.properMove(hand, this.hands.length, dealerHand, trueCount)\n    }\n\n    clearHand() {\n        this.hands = []\n    }\n\n}\n\nmodule.exports = Player\n\n// function test() {\n//     const a = new Card(\"2\", \"2\", \"\")\n//     const b = new Card(\"2\", \"2\", \"\")\n//     const c = new Card(\"2\", \"2\", \"\")\n//     const p = new Player(new DecisionMaker(true, false, false))\n\n//     p.dealCard(a)\n//     p.dealCard(b)\n\n//     p.splitHand(p.getHands()[0])\n//     console.log(p.getHands().map(hand => hand.cards))\n    \n\n// }\n\n// test()","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Dealer/index.js",["245"],"const DealerHand = require(\"../DealerHand\")\n\nclass Dealer {\n\n    constructor() {\n        this.hand = null;\n    }\n\n    getHand() {\n        return this.hand;\n    }\n\n    setDone() {\n        this.hand.setDone()\n    }\n\n    dealCard(card) {\n        if (!this.hand) {\n            card.flipDown()\n            this.hand = new DealerHand(card)\n        } else {\n            this.hand.dealUpcard(card)\n        }\n    }\n    \n    nextAction() {\n        if (eval(this.hand.getHandValue()) >= 17 && !this.hand.isSoft17()) {\n            return \"S\"\n        }\n        return \"H\"\n    }\n\n    hit(card) {\n        this.hand.addCard(card)\n    }\n\n    stay() {\n        this.hand.setDone()\n    }\n\n    flipCards() {\n        this.hand.flipCards()\n    }\n\n    clearHand() {\n        this.hand = null;\n    }\n\n}\n\nmodule.exports = Dealer","/Users/gabrielsucich/Desktop/CardCounting/src/utils/DecisionMaker/index.js",["246","247","248","249","250","251","252","253"],"const hardTotals = require(\"../strategyJSON/hardTotals.json\")\nconst softTotals = require(\"../strategyJSON/softTotals.json\")\nconst splits = require(\"../strategyJSON/splits.json\")\nconst surrenders = require(\"../strategyJSON/surrender.json\")\nconst key = require(\"../strategyJSON/key.json\")\n\nconst Card = require(\"../Card\")\nconst PlayerHand = require(\"../PlayerHand\")\nconst DealerHand = require(\"../DealerHand\")\nconst Shoe = require(\"../Shoe\")\n\nclass DecisionMaker {\n\n    constructor(canSurrender, canDAS, considerIndices) {\n\n        this.canSurrender = canSurrender;\n        this.canDAS = canDAS;\n        this.considerIndices = considerIndices;\n\n    }\n\n    properMove(playerHand, playerHandCount, dealerHand, trueCount) {\n        if (this.canSurrender) {\n            return this.evaluateSurrender(playerHand, playerHandCount, dealerHand)\n        } else {\n            return this.evaluateBasicStrategy(playerHand, playerHandCount, dealerHand)\n        }\n    }\n\n    evaluateBasicStrategy(playerHand, playerHandCount, dealerHand) {\n\n        var playerRepresentation = playerHand.handRepresentation()\n        var dealerUpcard = dealerHand.getUpcard()\n    \n        if (playerHand.cards.length === 1) {\n            return \"H\"\n        }\n        if (playerRepresentation === \"bust\") {\n            return \"bust\"\n        }\n        if (playerRepresentation in hardTotals) {\n            var decision = hardTotals[playerRepresentation][dealerUpcard]\n            if (decision === \"D\") {\n                if (playerHand.cardCount() === 2) {\n                    return \"D\"\n                }\n                return \"H\"\n            }\n            return decision\n        } else if (playerRepresentation in softTotals) {\n            var decision = softTotals[playerRepresentation][dealerUpcard]\n            if (decision === \"D\") {\n                if (playerHand.cardCount() === 2) {\n                    return \"D\"\n                }\n                return \"H\"\n            } else if (decision === \"DS\") {\n                if (playerHand.cardCount() === 2) {\n                    return \"D\"\n                }\n                return \"S\"\n            }\n            return decision\n        } else if (playerHand.canBeSplit()) {\n            var decision = splits[playerRepresentation][dealerUpcard] \n            if (decision === \"DSP\" || (decision === \"DAS\" && !this.canDAS)) {\n                var adjustedRepresntation = playerHand.adjustRepresentationForDAS()\n                return hardTotals[adjustedRepresntation][dealerUpcard]\n            } else if (decision === \"DAS\") {\n                return \"D\"\n            } else if (decision === \"SP\" && playerHandCount === 3) {\n                var adjustedRepresntation = playerHand.adjustRepresentationForDAS()\n                if (adjustedRepresntation in hardTotals) {\n                    return hardTotals[adjustedRepresntation][dealerUpcard]\n                } else if (adjustedRepresntation in softTotals) {\n                    return softTotals[adjustedRepresntation][dealerUpcard]\n                }\n                \n            } else {\n                return decision\n            }\n        } else {\n            throw new Error(`There is no basic strategy associated with the representation ${this.playerRepresentation}`)\n        }\n    }\n\n    evaluateSurrender(playerHand, playerHandCount, dealerHand) {\n\n        var playerRepresentation = playerHand.handRepresentation()\n        var dealerUpcard = dealerHand.getUpcard()\n\n        if (playerRepresentation in surrenders) {\n            if (surrenders[playerRepresentation].includes(dealerUpcard)) {\n                return \"SURR\"\n            }\n        }\n        return this.evaluateBasicStrategy(playerHand, playerHandCount, dealerHand)\n    }\n    \n}\n\nmodule.exports = DecisionMaker\n\n\n","/Users/gabrielsucich/Desktop/CardCounting/src/TableArrangment/Single/index.js",["254"],"import React from \"react\"\n\nimport { Container, Grid } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nimport Dealer from \"../../Components/Dealer\"\nimport Player from \"../../Components/Player\"\n\n\n\nexport default function Single({ game, afterEvent, ...props }) {\n    \n    const activePlayerId = game.getActivePlayerIndex()\n\n    return (\n        \n           <Container fluid className=\"full-size\">\n               <Dealer afterEvent={afterEvent} className=\"dealer\"/>\n               <Player afterEvent={afterEvent} playerId={game.getPlayers()[0].id} className=\"player1single\" activePlayerId = {activePlayerId} />\n           </Container>\n                \n    )\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/TableArrangment/Double/index.js",["255"],"import React from \"react\"\n\nimport { Container, Grid } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nimport Dealer from \"../../Components/Dealer\"\nimport Player from \"../../Components/Player\"\n\n\n\nexport default function Double({ game, afterEvent, ...props }) {\n\n    const players = game.getPlayers()\n    const activePlayerId = game.getActivePlayerIndex()\n\n    return (\n\n        <Container fluid className=\"full-size\">\n            <Dealer afterEvent={afterEvent} className=\"dealer\" />\n\n            {players.map(player => {\n                var id = player.id\n                var number = id + 1\n                return (\n                    <Player afterEvent={afterEvent} className={\"player\" + number + \"double\"} playerId = {id} activePlayerId = {activePlayerId}/>\n                )\n\n            })}\n        </Container>\n\n    )\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/utils/Shoe/Helpers.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/utils/Hand/index.js",["256","257"],"\nclass Hand {\n\n    sumCards(cards) {\n        var total = 0;\n        for (const card of cards) {\n            total += eval(card.value);\n        }\n        return String(total)\n    }\n\n    cardCount() {\n        return this.cards.length\n    }\n\n    isDone() {\n        return this.done\n    }\n\n    isBust() {\n        return this.bust\n    }\n\n    setBust() {\n        this.bust = true\n    }\n\n    setDone() {\n        this.done = true\n    }\n\n    handleAces() {\n        const aces = []\n        const nonAces = []\n\n        for (const card of this.cards) {\n            if (card.isAce()) {\n                aces.push(card)\n            } else {\n                nonAces.push(card)\n            }\n        }\n\n        const nonAceSum = this.sumCards(nonAces)\n\n        for (var i = 0; i < aces.length; i++) {\n            var card = aces[i]\n            if (eval(nonAceSum) <= 11 - aces.length && i === 0) {\n                card.value = \"11\"\n            } else {\n                card.value = \"1\"\n            }\n        }\n    }\n\n    getHandValue() {\n        return this.sumCards(this.cards)\n    }\n\n    addCard(card) {\n        this.cards.push(card);\n        this.handleAces()\n    }\n}\n\nmodule.exports = Hand\n\n\n","/Users/gabrielsucich/Desktop/CardCounting/src/Components/Dealer/index.js",["258","259","260"],"import { useEffect, useState } from \"react\"\nimport { Grid, Container } from \"semantic-ui-react\"\n\nimport { useGameContext } from \"../../GlobalStates/GameState\"\nimport Hand from \"../Hand\"\n\nexport default function Dealer({ afterEvent, ...props }) {\n\n    const [gameState, _] = useGameContext()\n    const [hand, setHand] = useState()\n\n\n    useEffect(() => {\n\n\n        if (gameState.current_play.playerId === \"d\") {\n            setHand(gameState.current_play.dealerHand)\n            setTimeout(() => {\n                afterEvent()\n            }, gameState.difficulty.deal);\n        }\n\n    }, [gameState.current_play])\n\n    return (\n        <Container fluid className={props.className}>\n            {hand ?\n                <Hand hand={hand} /> :\n                null}\n\n        </Container>\n    )\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/Components/Player/index.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/GlobalStates/GameState/index.js",["261","262","263","264","265","266","267","268","269","270","271","272","273","274"],"import React, { useContext, createContext, useReducer } from \"react\"\n\nimport { SET_HISTORY, EVOLVE_HISTORY, CLEAR_HISTORY, START_PLAYER_TURN, END_PLAYER_TERM, UPDATE_PLAYER_STATS, SET_RULES, CLEAR_RULES, SET_DIFFICULTY, CLEAR_DIFFICULTY, SET_GAME, GAME_RESET } from \"./action\"\n\nconst GameContext = createContext()\nconst { Provider } = GameContext\n\nconst initial = {\n    remaining_history: [],\n    current_play: null,\n    player_turn: false,\n    player_stats: [],\n    rules: {},\n    difficulty: {\n        player_action: 1000,\n        deal: 1000,\n        clear: 500,\n        surrender: 1000,\n    }\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case SET_GAME:\n            var game = action.game\n            var history = action.game.getHistory()\n            var remaining_history = [...history.slice(1)]\n            var current_play = {...history[0]}\n            return {...state, game: game, remaining_history: remaining_history, current_play: current_play}\n            break\n        case SET_HISTORY:\n            return { ...state, remaining_history: [...action.history] }\n            break\n\n        case EVOLVE_HISTORY:\n            if (state.remaining_history.length === 0) {\n                return null\n            } else {\n                var current_play = {...state.remaining_history[0]}\n                var remaining_history = [...state.remaining_history.slice(1)]\n                return {...state, current_play : current_play, remaining_history : remaining_history}\n            }\n            break\n        case CLEAR_HISTORY:\n            return {...state, current_play: null, remaining_history: []}\n            break;\n        case START_PLAYER_TURN:\n            return {...state, player_turn : true}\n            break;\n        case END_PLAYER_TERM:\n            return {...state, player_turn: false}\n            break;\n        case UPDATE_PLAYER_STATS:\n            return {...state, player_stats: [...state.player_stats, action.stat]}\n            break;\n        case SET_RULES:\n            return {...state, rules: action.rules}\n            break;\n        case CLEAR_RULES:\n            return {...state, rules: {}}\n            break\n        case SET_DIFFICULTY:\n            return {...state, difficulty: {...state.difficulty, ...action.difficulty}}\n            break\n        case CLEAR_DIFFICULTY:\n            return {...state, difficulty: {}}\n            break\n        case GAME_RESET:\n            return initial\n    }\n}\n\nconst GameProvider = ({value=[], ...props}) => {\n\n    const [state, dispatch] = useReducer(reducer, initial)\n\n    return (\n        <Provider value = {[state, dispatch]} {...props}/>\n    )\n}\n\nconst useGameContext = () => {\n    return useContext(GameContext)\n}\n\nexport {useGameContext, GameProvider}","/Users/gabrielsucich/Desktop/CardCounting/src/GlobalStates/GameState/action.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/Components/Player/ActivePlayer/index.js",["275","276","277","278","279"],"import { update } from \"lodash\"\nimport React, { useState, useEffect } from \"react\"\n\nimport { Grid, Container, Segment } from \"semantic-ui-react\"\n\nimport { useGameContext } from \"../../../GlobalStates/GameState\"\nimport { useQuestionContext } from \"../../../GlobalStates/QuestionState\"\nimport { SET_PLAYER_ACTIVE } from \"../../../GlobalStates/QuestionState/action\"\n\nimport Hand from \"../../Hand\"\nimport PlayerQuestions from \"../../PlayerQuestions\"\n\nimport \"./style.css\"\n\nexport default function Player({ afterEvent, playerId, ...props }) {\n\n    const [gameState, _] = useGameContext()\n    const [hands, setHands] = useState([])\n    const [nextHands, setNextHands] = useState([])\n\n    const [questionState, questionDispatch] = useQuestionContext()\n\n    const [activeHand, setActiveHand] = useState()\n\n    const updateHands = () => {\n        setHands([...nextHands])\n        setNextHands([])\n    }\n\n    useEffect(() => {\n\n        setActiveHand(null)\n        if (gameState.current_play.playerId === playerId) {\n            var action = gameState.current_play.action\n            if (hands.length > 0 && action) {\n                for (const hand of hands) {\n                    if (!hand.isDone()) {\n                        setActiveHand(hand)\n                    }\n                }\n            }\n        }\n\n        console.log(gameState.current_play)\n\n        if (gameState.current_play.playerId === playerId) {\n            var action = gameState.current_play.action;\n            var newHands = gameState.current_play[String(playerId)]\n            setNextHands(newHands)\n\n            \n            if (action === \"blackjack\") {\n                setHands(newHands)\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n            } else if (action === \"deal\") {\n                setHands(newHands)\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.deal)\n            } else if (action === \"clear\") {\n                setHands(newHands)\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.clear)\n            } else if (action === \"bust\") {\n                setHands(newHands)\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.clear)\n            }\n            else {\n\n                questionDispatch({ type: SET_PLAYER_ACTIVE })\n            }\n        }\n    }, [gameState.current_play])\n\n    return (\n        <Container className={props.className + \" card-container\"}>\n            {questionState.playerIsActive &&\n                <Segment basic compact className=\"questions\" textAlign=\"center\">\n                    <PlayerQuestions afterEvent={afterEvent} updateHands={updateHands} />\n                </Segment>\n            }\n            {hands.map((hand, index) => {\n                return (\n                    <Hand hand={hand} key={index} active={hand === activeHand} />\n\n                )\n            })}\n        </Container>\n    )\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/Components/Player/PassivePlayer/index.js",["280","281","282","283","284"],"\nimport React, { useState, useEffect } from \"react\"\n\nimport { Container, Grid, Segment } from \"semantic-ui-react\"\n\nimport { useGameContext } from \"../../../GlobalStates/GameState\"\n\nimport Hand from \"../../Hand\"\n\nexport default function PassivePlayer({ afterEvent, playerId, ...props }) {\n\n    const [gameState, _] = useGameContext()\n    const [hands, setHands] = useState([])\n    const [actionMessage, setActionMessage] = useState(\"\")\n\n\n    useEffect(() => {\n\n        if (gameState.current_play.playerId === playerId) {\n            var action = gameState.current_play.action;\n            var newHands = gameState.current_play[String(playerId)]\n            setHands(newHands)\n\n            if (action === \"hit\") {\n                setActionMessage(\"Hit!\")\n                setTimeout(() => {\n                    setActionMessage(\"\")\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n\n            } else if (action === \"stay\") {\n                setActionMessage(\"Stay\")\n                setTimeout(() => {\n                    setActionMessage(\"\")\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n\n            } else if (action === \"double\") {\n                setActionMessage(\"Double down!\")\n                setTimeout(() => {\n                    setActionMessage(\"\")\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n\n            } else if (action === \"split\") {\n\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n\n            } else if (action === \"blackjack\") {\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n            } else if (action === \"deal\") {\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.deal)\n\n            } else if (action === \"surrender\") {\n                setActionMessage(\"Surrender!\")\n                setTimeout(() => {\n                    setActionMessage(\"\")\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n\n            } else {\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.clear)\n            }\n\n        }\n    }, [gameState.current_play])\n\n\n    return (\n        <Container className={props.className + \" card-container\"}>\n            \n                {hands.map((hand, index) => {\n                return (\n                    \n                        <Hand hand={hand} key={index} />\n                   \n                )\n            })}\n           </Container>\n\n    \n    )\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/GlobalStates/QuestionState/index.js",["285","286","287","288","289"],"import React, {useReducer, useContext, createContext} from \"react\"\n\nimport {SET_PLAYER_ACTIVE, REMOVE_PLAYER_ACTIVE, SET_FREQUENCIES, QUESTION_RESET} from \"./action\"\n\nconst QuestionContext = createContext()\nconst {Provider} = QuestionContext\n\nconst initial = {\n    playerIsActive : false,\n    askTrueCount : 0,\n    askRunningCount : 0,\n    askDecksRemaining : 0,\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case SET_PLAYER_ACTIVE:\n            return {...state, playerIsActive: true}\n            break\n        case REMOVE_PLAYER_ACTIVE:\n            return {...state, playerIsActive: false}\n            break\n        case SET_FREQUENCIES:\n            return {...state, ...action.frequencies}\n            break\n        case QUESTION_RESET:\n            return initial\n            break;\n    }\n}\n\nconst QuestionProvider = ({value = [], ...props}) => {\n    const [state, dispatch] = useReducer(reducer, initial)\n\n    return <Provider value = {[state, dispatch]} {...props}/>\n}\n\nconst useQuestionContext = () => {\n    return useContext(QuestionContext)\n}\n\nexport {useQuestionContext, QuestionProvider}","/Users/gabrielsucich/Desktop/CardCounting/src/TableArrangment/Triple/index.js",["290"],"import React from \"react\"\n\nimport { Container, Grid } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nimport Dealer from \"../../Components/Dealer\"\nimport Player from \"../../Components/Player\"\n\n\n\nexport default function Triple({ game, afterEvent, ...props }) {\n\n    const players = game.getPlayers()\n    const activePlayerId = game.getActivePlayerIndex()\n\n    return (\n\n        <Container fluid className=\"full-size\">\n            <Dealer afterEvent={afterEvent} className=\"dealer\" />\n\n            {players.map(player => {\n                var id = player.id\n                var number = id + 1\n                return (\n                    <Player afterEvent={afterEvent} className={\"player\" + number + \"triple\"} playerId = {id} activePlayerId = {activePlayerId}/>\n                )\n\n            })}\n        </Container>\n\n    )\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/GlobalStates/QuestionState/action.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayerQuestions/index.js",["291","292","293","294","295","296","297"],"import React, { useState, useEffect } from \"react\"\nimport { Container, Button, Input, Message } from \"semantic-ui-react\"\n\nimport { useGameContext } from \"../../GlobalStates/GameState\"\nimport { useQuestionContext } from \"../../GlobalStates/QuestionState\"\n\nimport RunningCount from \"./RunningCount\"\nimport TrueCount from \"./TrueCount\"\nimport StrategyDecision from \"./StrategyDecision\"\nimport DecksRemaining from \"./DecksRemaining\"\n\nexport default function PlayerQuestions({ afterEvent, updateHands, ...props }) {\n\n    const [gameState, g_] = useGameContext()\n    const [questionState, q_] = useQuestionContext()\n\n    const [questionsToAsk, setQuestionsToAsk] = useState({})\n    const [ready, setReady] = useState(false)\n\n    const chooseQuestions = () => {\n        if (Math.random() < questionState.askRunningCount) {\n            setQuestionsToAsk({ ...questionsToAsk, runningCount: true })\n        }\n        if (Math.random() < questionState.askDecksRemaining) {\n            setQuestionsToAsk({ ...questionsToAsk, decksRemaining: true })\n        }\n        if (Math.random() < questionState.askTrueCount) {\n            setQuestionsToAsk({ ...questionsToAsk, trueCount: true })\n        }\n\n    }\n\n    const checkDecksRemaining = answer => {\n        var lowerBound = Math.max(gameState.current_play.decksRemaining - .5, .5)\n        var upperBound = Math.min(gameState.current_play.decksRemaining + .5, gameState.game.getTotalDecks())\n        if (lowerBound <= answer && answer <= upperBound) {\n            return true;\n        }\n        return false;\n    }\n\n    const checkDecision = answer => {\n        if (answer === gameState.current_play.action) {\n            return true\n        }\n        return false\n    }\n\n    useEffect(() => {\n\n        chooseQuestions()\n        setReady(true)\n        return (() => {\n            setQuestionsToAsk({})\n            setReady(false)\n        })\n\n    }, [])\n\n    if (!questionState.playerIsActive || !ready) {\n        return null\n    } else if (questionsToAsk.runningCount) {\n        return <RunningCount\n            runningCount={gameState.current_play.runningCount}\n            questionsToAsk={questionsToAsk}\n            setQuestionsToAsk={setQuestionsToAsk}\n        />\n    } else if (questionsToAsk.decksRemaining) {\n        return <DecksRemaining\n            numDecks={gameState.game.getTotalDecks()}\n            checkDecksRemaining={checkDecksRemaining}\n            questionsToAsk={questionsToAsk}\n            setQuestionsToAsk={setQuestionsToAsk}\n        />\n    } else if (questionsToAsk.trueCount) {\n        return <TrueCount \n                runningCount = {gameState.current_play.runningCount}\n                numDecks = {gameState.current_play.decksRemaining}\n                totalDecks = {gameState.game.getTotalDecks()}\n                questionsToAsk = {questionsToAsk}\n                setQuestionsToAsk = {setQuestionsToAsk}\n            />\n    }\n    else {\n        return <StrategyDecision checkDecision={checkDecision} afterEvent={afterEvent} updateHands = {updateHands} />\n    }\n\n\n}\n\n\n\n","/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayerQuestions/TrueCount/index.js",["298"],"import React, {useState} from \"react\"\nimport {Container, Input, Message, Button, Icon} from \"semantic-ui-react\"\n\nexport default function TrueCount({ runningCount, numDecks, totalDecks, questionsToAsk, setQuestionsToAsk, ...props }) {\n\n    const lowerBound = Math.sign(runningCount) * Math.floor(Math.abs(runningCount) / (Math.min(numDecks + .5, totalDecks)))\n    const upperBound = Math.sign(runningCount) * Math.ceil(Math.abs(runningCount) / (Math.max(numDecks - .5, .5)))\n\n    const [answer, setAnswer] = useState(\"\")\n    const [correct, setCorrect] = useState(false)\n    const [incorrect, setIncorrect] = useState(false)\n\n    const isReasonable = value => {\n        return value >= lowerBound && value <= upperBound\n    }\n\n    const checkAnswer = () => {\n\n        const entry = eval(answer)\n\n        if (isReasonable(entry)) {\n            setCorrect(true)\n        } else {\n            setIncorrect(true)\n        }\n        setTimeout(() => {\n            setCorrect(false)\n            setIncorrect(false)\n            setQuestionsToAsk({...questionsToAsk, trueCount : false})\n        }, 2000)\n    }\n\n\n    return (\n        <Container fluid>\n\n            <Input\n                type=\"text\"\n                value={answer}\n                onChange={e => setAnswer(e.target.value)}\n                label={answer ? <Button icon color=\"green\" onClick={checkAnswer}><Icon name=\"check\" ></Icon></Button> : false}\n                labelPosition=\"right\"\n            />\n            {correct && <Message success>{`Yep, ${answer} is a good estimate of the true count!`}</Message>}\n            {incorrect && <Message negative>{`Not quite... ${answer} is not really a good estimate of the true count.`}</Message>}\n        </Container>\n    )\n}","/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayerQuestions/RunningCount/index.js",["299"],"import React, {useState} from \"react\"\nimport {Container, Input, Message, Button, Icon} from \"semantic-ui-react\"\n\nexport default function RunningCount({ runningCount, questionsToAsk, setQuestionsToAsk, ...props }) {\n\n    const [answer, setAnswer] = useState(\"\")\n    const [correct, setCorrect] = useState(false)\n    const [incorrect, setIncorrect] = useState(false)\n\n    const onSubmit = () => {\n        const entry = eval(answer)\n        if (entry) {\n            if (runningCount === entry) {\n                setCorrect(true)\n                setTimeout(() => {\n                    setQuestionsToAsk({ ...questionsToAsk, runningCount: false })\n                }, 1000)\n            } else {\n                setIncorrect(true)\n                setTimeout(() => {\n                    setQuestionsToAsk({ ...questionsToAsk, runningCount: false })\n                }, 2000)\n            }\n        }\n\n    }\n\n    return (\n        <Container fluid>\n            <Input\n                type=\"text\"\n                value={answer}\n                onChange={e => setAnswer(e.target.value)}\n                label={<Button icon color=\"green\" onClick={onSubmit}><Icon name=\"check\" ></Icon></Button>}\n                labelPosition=\"right\"\n            />\n            {correct && <Message success>{`Right! The running count is ${runningCount}`}</Message>}\n            {incorrect && <Message negative>{`Not quite... The running count is actually ${runningCount}`}</Message>}\n        </Container>\n    )\n}","/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayerQuestions/StrategyDecision/index.js",["300","301"],"/Users/gabrielsucich/Desktop/CardCounting/src/Components/PlayerQuestions/DecksRemaining/index.js",["302"],"import React, {useEffect, useState} from \"react\"\n\nimport {Container, Button, Message} from \"semantic-ui-react\"\n\nexport default function DecksRemaining({ numDecks, checkDecksRemaining, questionsToAsk, setQuestionsToAsk, ...props }) {\n\n    const getPossibleValues = () => {\n        const values = []\n        for (var i = .5; i <= numDecks; i += .5) {\n            values.push(i)\n        }\n        return values;\n    }\n\n    const [selected, setSelected] = useState()\n\n    const onClick = (decksRemaining, index) => {\n\n        if (!selected) {\n            if (checkDecksRemaining(decksRemaining)) {\n                setSelected([decksRemaining, index])\n                setTimeout(() => {\n                    setSelected(null);\n                    setQuestionsToAsk({ ...questionsToAsk, decksRemaining: false })\n                }, 1000)\n            } else {\n                setSelected([decksRemaining, index])\n                setTimeout(() => {\n                    setSelected(null);\n                }, 1000)\n            }\n        }\n    }\n\n    return (\n        <Container fluid>\n        {getPossibleValues().map((value, index) => {\n            return (\n                <Button\n                    key = {index}\n                    positive={selected && selected[1] === index && checkDecksRemaining(value)}\n                    negative={selected && selected[1] === index && !checkDecksRemaining(value)}\n                    onClick={() => onClick(value, index)}\n                >\n                    {value}\n                </Button>\n            )\n        })}\n        {selected && checkDecksRemaining(selected[0]) && <Message positive>{`${selected[0]} is a good estimate for the number of decks remaining!`}</Message>}\n        {selected && !checkDecksRemaining(selected[0]) && <Message negative>{`${selected[0]} is not a great estimate for the number of decks remaining`}</Message>}\n\n    </Container>\n    )\n    \n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/index.js",["303","304"],"import React, { useState } from 'react'\n\nimport { useGameContext} from \"../GlobalStates/GameState\"\nimport { GAME_RESET, SET_DIFFICULTY, SET_GAME, SET_RULES  } from \"../GlobalStates/GameState/action\"\n\nimport { useQuestionContext } from \"../GlobalStates/QuestionState\"\nimport {  QUESTION_RESET, SET_FREQUENCIES} from \"../GlobalStates/QuestionState/action\"\n\nimport PlayerCount from \"./PlayerCount\"\nimport DeckCount from \"./DeckCount\"\nimport Rules from \"./Rules\"\nimport Goal from \"./Goal\"\nimport StrategyConsiderations from \"./StrategyConsiderations\"\nimport Difficulty from \"./Difficulty\"\nimport Frequency from \"./Frequency\"\n\n\nimport InfoPopup from \"../Components/InfoPopup\"\nimport SectionDivider from \"../Components/SectionDivider\"\n\nimport Game from \"../utils/Game\"\n\nimport { Grid, Segment, Header, Image, Divider, Button } from 'semantic-ui-react'\n\nimport \"./style.css\"\n\n\nexport default function GameSetup({ ...props }) {\n\n    const [questionState, questionDispatch] = useQuestionContext()\n    const [gameState, gameDispatch] = useGameContext()\n\n    const [numPlayers, setNumPlayers] = useState(1)\n    const [numDecks, setNumDecks] = useState(4)\n    const [rules, setRules] = useState({ canDAS: true, canSurrender: false })\n    const [useIndices, setIndices] = useState(false)\n    const [countingCards, setCountingCards] = useState(false)\n\n    const [difficulty, setDifficulty] = useState({\n        player_action: 1000,\n        deal: 1000,\n        clear: 500,\n    })\n\n    const [frequency, setFrequency] = useState({\n        askTrueCount: .3,\n        askRunningCount: .3,\n        askDecksRemaining: .3\n    })\n\n    const startGame = () => {\n\n        questionDispatch({type: QUESTION_RESET})\n        gameDispatch({type: GAME_RESET})\n\n        var considerIndices;\n\n        if (countingCards) {\n           questionDispatch({type: SET_FREQUENCIES, frequencies: frequency}) \n           gameDispatch({type: SET_DIFFICULTY, difficulty: difficulty})\n           considerIndices = useIndices\n        } else {\n            considerIndices = false\n        }\n\n        gameDispatch({type: SET_RULES, rules: rules})\n\n        const game = new Game(numPlayers, numDecks, rules, considerIndices)\n\n        gameDispatch({type: SET_GAME, game: game})\n\n        \n    \n    }\n\n    return (\n        <Grid centered className=\"overflow\">\n\n\n            <Grid.Column width={16} textAlign=\"center title\">\n                <Segment basic >\n                    <Header size=\"huge\" className=\"sunrise white\" >\n                        <Image size=\"large\" src=\"/images/logo.png\" /> Game Settings <Image size=\"large\" src=\"/images/logo.png\" />\n                    </Header>\n                </Segment>\n            </Grid.Column>\n\n\n\n\n            <Grid.Column computer = {5} tablet = {5} mobile = {16} className=\"overflow\">\n                <Divider horizontal className=\"white\">Players and Decks</Divider>\n                <Grid centered>\n                    <Grid.Column computer = {16} tablet = {16} mobile = {8} textAlign=\"center\">\n                        <Header as=\"h3\" className=\"sunrise white\">\n                            Choose the number of players at the table\n                            </Header>\n                        <PlayerCount numPlayers={numPlayers} setNumPlayers={setNumPlayers} />\n                    </Grid.Column>\n                    <Grid.Column computer = {16} tablet = {16} mobile = {8}  textAlign=\"center\">\n                        <Header as=\"h3\" className=\"sunrise white\">\n                            Choose number of decks in the shoe\n                            </Header>\n                        <DeckCount numDecks={numDecks} setNumDecks={setNumDecks} />\n                    </Grid.Column>\n                </Grid>\n\n                <SectionDivider separations={2} />\n\n                <Divider horizontal className=\"white\"> Game Rules</Divider>\n                <Grid centered textAlign=\"center\">\n                    <Grid.Column width={16} textAlign=\"center\">\n                        <Header as=\"h3\" className=\"sunrise white\">\n                            Choose the game rules <InfoPopup content={\"Different blackjack tables have different rules. The rules of the game will affect your best move during the game.\"} />\n                        </Header>\n                        <Rules rules={rules} setRules={setRules} />\n                    </Grid.Column>\n\n                </Grid>\n\n\n\n            </Grid.Column>\n            <Grid.Column computer = {5} tablet = {5} mobile = {16} className=\"overflow\" textAlign=\"center\">\n                <Divider horizontal className=\"white\">Goal</Divider>\n                <Grid centered>\n                    <Grid.Column width={16} textAlign=\"center\" >\n                        <Header as=\"h3\" className=\"sunrise white\">\n                            What's your goal?\n                            </Header>\n                        <Goal countingCards={countingCards} setCountingCards={setCountingCards} />\n                    </Grid.Column>\n                </Grid>\n                {countingCards && <SectionDivider separations={1} />}\n                {countingCards &&\n                    <Divider horizontal className=\"white\">Strategy</Divider>}\n                {countingCards &&\n                    <Grid centered>\n                        <Grid.Column width={16} textAlign=\"center\" >\n                            <Header as=\"h3\" className=\"sunrise white\">\n                                Choose your strategy considerations <InfoPopup content={\"Index values provide a guideline for deviating from basic strategy based on the true count. You can choose to play your game based solely on basic strategy, or also with consideration to index values.\"} />\n                            </Header>\n                            <StrategyConsiderations useIndeces={useIndices} setIndeces={setIndices} />\n                        </Grid.Column>\n                    </Grid>\n                }\n\n                <SectionDivider separations = {1}/>\n                <Button size = \"massive\" inverted className = \"white\" onClick={startGame}>Play Game</Button>\n\n            </Grid.Column>\n            {countingCards ?\n                <Grid.Column computer = {5} tablet = {5} mobile = {16}  textAlign=\"center\" className=\"overflow\">\n\n                    <Divider horizontal className=\"white\">Difficulty Settings</Divider>\n\n                    <Grid className = \"overflow right-column\">\n                        <Grid.Column width={16}>\n\n\n                            <Header as=\"h3\" className=\"sunrise white\">\n                                <InfoPopup content={\"The quicker you can update the count when you are counting cards, the better. Here, you can set control the speed of the game by setting the amount of time between different actions in the game. As you improve your game, you can decrease these times and practice counting faster!\"} />\n                        How much time between...\n                            </Header>\n                            <Difficulty difficulty={difficulty} setDifficulty={setDifficulty} />\n                       \n\n                        \n                            <Header as=\"h3\" className=\"sunrise white\">\n                                <InfoPopup content={\"Throughout the game, you will be prompted for quantities related to card counting (i.e. the running count, an estimate for the number of decks remaining, and the true count). These prompts will help you track the count, and the more often they are asked, the easier the game is. The lower the numbers below are, the more of a challenge the game will be.\"} />\n                        On what percent of hands should you be prompted for...\n                            </Header>\n                            <Frequency frequencies={frequency} setFrequency={setFrequency} />\n                        </Grid.Column>\n                    </Grid>\n\n\n\n\n                </Grid.Column> :\n                <Grid.Column computer = {5} tablet = {5} mobile = {16} >\n\n                </Grid.Column>\n            }\n\n\n\n\n\n\n        </Grid>\n\n\n\n        // \n        // <Frequency frequencies={frequency} setFrequency={setFrequency} />\n\n\n    )\n\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/PlayerCount/index.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/DeckCount/index.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/Rules/index.js",["305","306","307"],"import React from \"react\"\n\nimport { Checkbox, Message, Divider, Container, Segment } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nexport default function Rules({ rules, setRules, ...props }) {\n\n    const canDAS = rules.canDAS;\n    const canSurrender = rules.canSurrender\n\n    const handleChange = property => {\n\n    }\n\n    return (\n\n        <Segment textAlign=\"center\">\n            <Checkbox\n                slider\n                checked={canDAS}\n                onClick={() => setRules({ ...rules, canDAS: !canDAS })}\n                label={canDAS ? \"Players can double down after splitting a hand\" : \"Players cannot double down after splitting a hand\"}\n            />\n            <Divider hidden />\n            <Checkbox\n                slider\n                checked={canSurrender}\n                onClick={() => setRules({ ...rules, canSurrender: !canSurrender })}\n                label={canSurrender ? \"Players are allowed to surrender\" : \"Players are not allowed to surrender\"}\n            />\n        </Segment>\n\n    )\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/StrategyConsiderations/index.js",["308"],"import React from \"react\"\n\nimport { Button, Form, Radio, Segment } from \"semantic-ui-react\"\n\nimport {Link} from \"react-router-dom\"\n\nexport default function StrategyConsiderations({ useIndeces, setIndeces, ...props }) {\n\n\n    return (\n        <Segment textAlign = \"center\">\n            <Form>\n            <Form.Field>\n                <Radio\n                    label='Basic Strategy Only'\n                    checked={!useIndeces}\n                    onChange={() => setIndeces(false)}\n                />\n            </Form.Field>\n            <Form.Field>\n                <Radio\n                    label='Basic Strategy and Index Values'\n                    checked={useIndeces}\n                    onChange={() => setIndeces(true)}\n                />\n            </Form.Field>\n        </Form>\n        <Link to = \"/test\">Learn more about index values</Link>\n        </Segment>\n        \n\n    )\n}","/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/Difficulty/index.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/Frequency/index.js",["309","310"],"import React from \"react\"\n\nimport { Grid, Button, Header } from \"semantic-ui-react\"\n\nexport default function Frequency({ frequencies, setFrequency, ...props }) {\n\n\n    const setTrueCount = frequency => {\n        setFrequency({ ...frequencies, askTrueCount: frequency })\n    }\n\n    const setRunningCount = frequency => {\n        setFrequency({ ...frequencies, askRunningCount: frequency })\n    }\n\n    const setDecksRemaining = frequency => {\n        setFrequency({ ...frequencies, askDecksRemaining: frequency })\n    }\n\n    return (\n        <Grid centered>\n\n            <FrequencyChanger frequency={frequencies.askTrueCount} setFrequency={setTrueCount} header=\"the true count?\" />\n            <FrequencyChanger frequency={frequencies.askRunningCount} setFrequency={setRunningCount} header=\"the running count?\" />\n            <FrequencyChanger frequency={frequencies.askDecksRemaining} setFrequency={setDecksRemaining} header=\"the numbers of remaining decks?\" />\n        </Grid>\n\n    )\n\n\n}\n\nfunction FrequencyChanger({ frequency, setFrequency, header, ...props }) {\n\n    const handleDecrease = () => {\n        if (frequency > 0) {\n            setFrequency(eval((frequency - .1).toFixed(2)))\n        }\n    }\n    const handleIncrease = () => {\n        if (frequency < 1) {\n            setFrequency(eval((frequency + .1).toFixed(2)))\n        }\n    }\n\n\n\n    return (\n\n        <Grid.Column width={16} textAlign = \"center\">\n            <Header as=\"h5\" className = \"white button-header\">{header} </Header>\n            <Button.Group>\n                <Button icon=\"minus\" color=\"red\" onClick={handleDecrease} />\n                <Button>{frequency * 100 + \"%\"}</Button>\n                <Button icon=\"plus\" color=\"green\" onClick={handleIncrease} />\n            </Button.Group>\n        </Grid.Column>\n\n    )\n\n}","/Users/gabrielsucich/Desktop/CardCounting/src/Components/InfoPopup/index.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/Components/SectionDivider/index.js",[],"/Users/gabrielsucich/Desktop/CardCounting/src/GameSetup/Goal/index.js",["311"],"import React from \"react\"\n\nimport { Form, Radio, Segment } from \"semantic-ui-react\"\n\nimport {Link} from \"react-router-dom\"\n\nexport default function StrategyConsiderations({ countingCards, setCountingCards, ...props }) {\n\n\n    return (\n        <Segment textAlign = \"center\">\n            <Form>\n            <Form.Field>\n                <Radio\n                    label='Basic Strategy'\n                    checked={!countingCards}\n                    onChange={() => setCountingCards(false)}\n                />\n            </Form.Field>\n            <Form.Field>\n                <Radio\n                    label='Basic Strategy and Card Counting'\n                    checked={countingCards}\n                    onChange={() => setCountingCards(true)}\n                />\n            </Form.Field>\n        </Form>\n        \n        </Segment>\n        \n\n    )\n}",{"ruleId":"312","replacedBy":"313"},{"ruleId":"314","replacedBy":"315"},{"ruleId":"316","severity":1,"message":"317","line":1,"column":17,"nodeType":"318","messageId":"319","endLine":1,"endColumn":25},{"ruleId":"316","severity":1,"message":"320","line":8,"column":10,"nodeType":"318","messageId":"319","endLine":8,"endColumn":16},{"ruleId":"316","severity":1,"message":"321","line":8,"column":18,"nodeType":"318","messageId":"319","endLine":8,"endColumn":22},{"ruleId":"316","severity":1,"message":"322","line":2,"column":16,"nodeType":"318","messageId":"319","endLine":2,"endColumn":26},{"ruleId":"316","severity":1,"message":"323","line":3,"column":10,"nodeType":"318","messageId":"319","endLine":3,"endColumn":19},{"ruleId":"324","severity":1,"message":"325","line":16,"column":75,"nodeType":"326","messageId":"327","endLine":16,"endColumn":77},{"ruleId":"316","severity":1,"message":"328","line":1,"column":16,"nodeType":"318","messageId":"319","endLine":1,"endColumn":25},{"ruleId":"316","severity":1,"message":"317","line":1,"column":27,"nodeType":"318","messageId":"319","endLine":1,"endColumn":35},{"ruleId":"316","severity":1,"message":"329","line":2,"column":8,"nodeType":"318","messageId":"319","endLine":2,"endColumn":12},{"ruleId":"312","replacedBy":"330"},{"ruleId":"314","replacedBy":"331"},{"ruleId":"316","severity":1,"message":"317","line":1,"column":17,"nodeType":"318","messageId":"319","endLine":1,"endColumn":25},{"ruleId":"316","severity":1,"message":"328","line":1,"column":27,"nodeType":"318","messageId":"319","endLine":1,"endColumn":36},{"ruleId":"316","severity":1,"message":"332","line":6,"column":8,"nodeType":"318","messageId":"319","endLine":6,"endColumn":20},{"ruleId":"316","severity":1,"message":"333","line":9,"column":9,"nodeType":"318","messageId":"319","endLine":9,"endColumn":20},{"ruleId":"316","severity":1,"message":"334","line":9,"column":38,"nodeType":"318","messageId":"319","endLine":9,"endColumn":46},{"ruleId":"316","severity":1,"message":"335","line":1,"column":7,"nodeType":"318","messageId":"319","endLine":1,"endColumn":17},{"ruleId":"316","severity":1,"message":"336","line":2,"column":7,"nodeType":"318","messageId":"319","endLine":2,"endColumn":17},{"ruleId":"316","severity":1,"message":"337","line":9,"column":9,"nodeType":"318","messageId":"319","endLine":9,"endColumn":18},{"ruleId":"316","severity":1,"message":"338","line":12,"column":9,"nodeType":"318","messageId":"319","endLine":12,"endColumn":26},{"ruleId":"339","severity":1,"message":"340","line":150,"column":36,"nodeType":"341","messageId":"342","endLine":150,"endColumn":38},{"ruleId":"316","severity":1,"message":"343","line":12,"column":23,"nodeType":"318","messageId":"319","endLine":12,"endColumn":24},{"ruleId":"316","severity":1,"message":"344","line":1,"column":7,"nodeType":"318","messageId":"319","endLine":1,"endColumn":11},{"ruleId":"324","severity":1,"message":"325","line":50,"column":28,"nodeType":"326","messageId":"327","endLine":50,"endColumn":30},{"ruleId":"345","severity":1,"message":"346","line":62,"column":13,"nodeType":"347","messageId":"327","endLine":62,"endColumn":17},{"ruleId":"345","severity":1,"message":"346","line":81,"column":30,"nodeType":"347","messageId":"327","endLine":81,"endColumn":34},{"ruleId":"316","severity":1,"message":"344","line":2,"column":7,"nodeType":"318","messageId":"319","endLine":2,"endColumn":11},{"ruleId":"345","severity":1,"message":"346","line":28,"column":13,"nodeType":"347","messageId":"327","endLine":28,"endColumn":17},{"ruleId":"345","severity":1,"message":"346","line":32,"column":20,"nodeType":"347","messageId":"327","endLine":32,"endColumn":24},{"ruleId":"316","severity":1,"message":"344","line":2,"column":7,"nodeType":"318","messageId":"319","endLine":2,"endColumn":11},{"ruleId":"316","severity":1,"message":"348","line":3,"column":7,"nodeType":"318","messageId":"319","endLine":3,"endColumn":20},{"ruleId":"316","severity":1,"message":"338","line":4,"column":9,"nodeType":"318","messageId":"319","endLine":4,"endColumn":26},{"ruleId":"345","severity":1,"message":"346","line":27,"column":13,"nodeType":"347","messageId":"327","endLine":27,"endColumn":17},{"ruleId":"316","severity":1,"message":"349","line":5,"column":7,"nodeType":"318","messageId":"319","endLine":5,"endColumn":10},{"ruleId":"316","severity":1,"message":"344","line":7,"column":7,"nodeType":"318","messageId":"319","endLine":7,"endColumn":11},{"ruleId":"316","severity":1,"message":"336","line":8,"column":7,"nodeType":"318","messageId":"319","endLine":8,"endColumn":17},{"ruleId":"316","severity":1,"message":"335","line":9,"column":7,"nodeType":"318","messageId":"319","endLine":9,"endColumn":17},{"ruleId":"316","severity":1,"message":"350","line":10,"column":7,"nodeType":"318","messageId":"319","endLine":10,"endColumn":11},{"ruleId":"351","severity":1,"message":"352","line":51,"column":17,"nodeType":"318","messageId":"353","endLine":51,"endColumn":25},{"ruleId":"351","severity":1,"message":"352","line":65,"column":17,"nodeType":"318","messageId":"353","endLine":65,"endColumn":25},{"ruleId":"351","severity":1,"message":"354","line":72,"column":21,"nodeType":"318","messageId":"353","endLine":72,"endColumn":42},{"ruleId":"316","severity":1,"message":"321","line":3,"column":21,"nodeType":"318","messageId":"319","endLine":3,"endColumn":25},{"ruleId":"316","severity":1,"message":"321","line":3,"column":21,"nodeType":"318","messageId":"319","endLine":3,"endColumn":25},{"ruleId":"345","severity":1,"message":"346","line":7,"column":22,"nodeType":"347","messageId":"327","endLine":7,"endColumn":26},{"ruleId":"345","severity":1,"message":"346","line":48,"column":17,"nodeType":"347","messageId":"327","endLine":48,"endColumn":21},{"ruleId":"316","severity":1,"message":"321","line":2,"column":10,"nodeType":"318","messageId":"319","endLine":2,"endColumn":14},{"ruleId":"316","severity":1,"message":"343","line":9,"column":23,"nodeType":"318","messageId":"319","endLine":9,"endColumn":24},{"ruleId":"355","severity":1,"message":"356","line":23,"column":8,"nodeType":"357","endLine":23,"endColumn":32,"suggestions":"358"},{"ruleId":"359","severity":1,"message":"360","line":23,"column":5,"nodeType":"361","messageId":"362","endLine":70,"endColumn":6},{"ruleId":"363","severity":1,"message":"364","line":30,"column":13,"nodeType":"365","messageId":"366","endLine":30,"endColumn":18},{"ruleId":"363","severity":1,"message":"364","line":33,"column":13,"nodeType":"365","messageId":"366","endLine":33,"endColumn":18},{"ruleId":"351","severity":1,"message":"367","line":39,"column":21,"nodeType":"318","messageId":"353","endLine":39,"endColumn":33},{"ruleId":"351","severity":1,"message":"368","line":40,"column":21,"nodeType":"318","messageId":"353","endLine":40,"endColumn":38},{"ruleId":"363","severity":1,"message":"364","line":43,"column":13,"nodeType":"365","messageId":"366","endLine":43,"endColumn":18},{"ruleId":"363","severity":1,"message":"364","line":46,"column":13,"nodeType":"365","messageId":"366","endLine":46,"endColumn":19},{"ruleId":"363","severity":1,"message":"364","line":49,"column":13,"nodeType":"365","messageId":"366","endLine":49,"endColumn":19},{"ruleId":"363","severity":1,"message":"364","line":52,"column":13,"nodeType":"365","messageId":"366","endLine":52,"endColumn":19},{"ruleId":"363","severity":1,"message":"364","line":55,"column":13,"nodeType":"365","messageId":"366","endLine":55,"endColumn":19},{"ruleId":"363","severity":1,"message":"364","line":58,"column":13,"nodeType":"365","messageId":"366","endLine":58,"endColumn":19},{"ruleId":"363","severity":1,"message":"364","line":61,"column":13,"nodeType":"365","messageId":"366","endLine":61,"endColumn":18},{"ruleId":"363","severity":1,"message":"364","line":64,"column":13,"nodeType":"365","messageId":"366","endLine":64,"endColumn":18},{"ruleId":"363","severity":1,"message":"364","line":67,"column":13,"nodeType":"365","messageId":"366","endLine":67,"endColumn":18},{"ruleId":"316","severity":1,"message":"369","line":1,"column":10,"nodeType":"318","messageId":"319","endLine":1,"endColumn":16},{"ruleId":"316","severity":1,"message":"321","line":4,"column":10,"nodeType":"318","messageId":"319","endLine":4,"endColumn":14},{"ruleId":"316","severity":1,"message":"343","line":17,"column":23,"nodeType":"318","messageId":"319","endLine":17,"endColumn":24},{"ruleId":"351","severity":1,"message":"370","line":47,"column":17,"nodeType":"318","messageId":"353","endLine":47,"endColumn":23},{"ruleId":"355","severity":1,"message":"371","line":78,"column":8,"nodeType":"357","endLine":78,"endColumn":32,"suggestions":"372"},{"ruleId":"316","severity":1,"message":"321","line":4,"column":21,"nodeType":"318","messageId":"319","endLine":4,"endColumn":25},{"ruleId":"316","severity":1,"message":"373","line":4,"column":27,"nodeType":"318","messageId":"319","endLine":4,"endColumn":34},{"ruleId":"316","severity":1,"message":"343","line":12,"column":23,"nodeType":"318","messageId":"319","endLine":12,"endColumn":24},{"ruleId":"316","severity":1,"message":"374","line":14,"column":12,"nodeType":"318","messageId":"319","endLine":14,"endColumn":25},{"ruleId":"355","severity":1,"message":"375","line":74,"column":8,"nodeType":"357","endLine":74,"endColumn":32,"suggestions":"376"},{"ruleId":"359","severity":1,"message":"360","line":16,"column":5,"nodeType":"361","messageId":"362","endLine":29,"endColumn":6},{"ruleId":"363","severity":1,"message":"364","line":19,"column":13,"nodeType":"365","messageId":"366","endLine":19,"endColumn":18},{"ruleId":"363","severity":1,"message":"364","line":22,"column":13,"nodeType":"365","messageId":"366","endLine":22,"endColumn":18},{"ruleId":"363","severity":1,"message":"364","line":25,"column":13,"nodeType":"365","messageId":"366","endLine":25,"endColumn":18},{"ruleId":"363","severity":1,"message":"364","line":28,"column":13,"nodeType":"365","messageId":"366","endLine":28,"endColumn":19},{"ruleId":"316","severity":1,"message":"321","line":3,"column":21,"nodeType":"318","messageId":"319","endLine":3,"endColumn":25},{"ruleId":"316","severity":1,"message":"323","line":2,"column":10,"nodeType":"318","messageId":"319","endLine":2,"endColumn":19},{"ruleId":"316","severity":1,"message":"320","line":2,"column":21,"nodeType":"318","messageId":"319","endLine":2,"endColumn":27},{"ruleId":"316","severity":1,"message":"377","line":2,"column":29,"nodeType":"318","messageId":"319","endLine":2,"endColumn":34},{"ruleId":"316","severity":1,"message":"378","line":2,"column":36,"nodeType":"318","messageId":"319","endLine":2,"endColumn":43},{"ruleId":"316","severity":1,"message":"379","line":14,"column":23,"nodeType":"318","messageId":"319","endLine":14,"endColumn":25},{"ruleId":"316","severity":1,"message":"380","line":15,"column":27,"nodeType":"318","messageId":"319","endLine":15,"endColumn":29},{"ruleId":"355","severity":1,"message":"381","line":58,"column":8,"nodeType":"357","endLine":58,"endColumn":10,"suggestions":"382"},{"ruleId":"345","severity":1,"message":"346","line":19,"column":23,"nodeType":"347","messageId":"327","endLine":19,"endColumn":27},{"ruleId":"345","severity":1,"message":"346","line":11,"column":23,"nodeType":"347","messageId":"327","endLine":11,"endColumn":27},{"ruleId":"316","severity":1,"message":"383","line":13,"column":12,"nodeType":"318","messageId":"319","endLine":13,"endColumn":25},{"ruleId":"316","severity":1,"message":"384","line":14,"column":23,"nodeType":"318","messageId":"319","endLine":14,"endColumn":35},{"ruleId":"316","severity":1,"message":"328","line":1,"column":16,"nodeType":"318","messageId":"319","endLine":1,"endColumn":25},{"ruleId":"316","severity":1,"message":"383","line":30,"column":12,"nodeType":"318","messageId":"319","endLine":30,"endColumn":25},{"ruleId":"316","severity":1,"message":"385","line":31,"column":12,"nodeType":"318","messageId":"319","endLine":31,"endColumn":21},{"ruleId":"316","severity":1,"message":"378","line":3,"column":20,"nodeType":"318","messageId":"319","endLine":3,"endColumn":27},{"ruleId":"316","severity":1,"message":"323","line":3,"column":38,"nodeType":"318","messageId":"319","endLine":3,"endColumn":47},{"ruleId":"316","severity":1,"message":"386","line":12,"column":11,"nodeType":"318","messageId":"319","endLine":12,"endColumn":23},{"ruleId":"316","severity":1,"message":"320","line":3,"column":10,"nodeType":"318","messageId":"319","endLine":3,"endColumn":16},{"ruleId":"345","severity":1,"message":"346","line":37,"column":26,"nodeType":"347","messageId":"327","endLine":37,"endColumn":30},{"ruleId":"345","severity":1,"message":"346","line":42,"column":26,"nodeType":"347","messageId":"327","endLine":42,"endColumn":30},{"ruleId":"316","severity":1,"message":"387","line":5,"column":9,"nodeType":"318","messageId":"319","endLine":5,"endColumn":13},"no-native-reassign",["388"],"no-negated-in-lhs",["389"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","'Grid' is defined but never used.","'Transition' is defined but never used.","'Container' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'Hand' is defined but never used.",["388"],["389"],"'TrainingGame' is defined but never used.","'SET_HISTORY' is defined but never used.","'SET_GAME' is defined but never used.","'DealerHand' is assigned a value but never used.","'PlayerHand' is assigned a value but never used.","'promisify' is assigned a value but never used.","'PlaceholderHeader' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'_' is assigned a value but never used.","'Card' is assigned a value but never used.","no-eval","eval can be harmful.","CallExpression","'DecisionMaker' is assigned a value but never used.","'key' is assigned a value but never used.","'Shoe' is assigned a value but never used.","no-redeclare","'decision' is already defined.","redeclared","'adjustedRepresntation' is already defined.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'afterEvent' and 'gameState.difficulty.deal'. Either include them or remove the dependency array. If 'afterEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["390"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'current_play' is already defined.","'remaining_history' is already defined.","'update' is defined but never used.","'action' is already defined.","React Hook useEffect has missing dependencies: 'afterEvent', 'gameState.difficulty.clear', 'gameState.difficulty.deal', 'gameState.difficulty.player_action', 'hands', 'playerId', and 'questionDispatch'. Either include them or remove the dependency array. If 'afterEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["391"],"'Segment' is defined but never used.","'actionMessage' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'afterEvent', 'gameState.difficulty.clear', 'gameState.difficulty.deal', 'gameState.difficulty.player_action', and 'playerId'. Either include them or remove the dependency array. If 'afterEvent' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["392"],"'Input' is defined but never used.","'Message' is defined but never used.","'g_' is assigned a value but never used.","'q_' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'chooseQuestions'. Either include it or remove the dependency array.",["393"],"'questionState' is assigned a value but never used.","'gameDispatch' is assigned a value but never used.","'gameState' is assigned a value but never used.","'handleChange' is assigned a value but never used.","'Link' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"394","fix":"395"},{"desc":"396","fix":"397"},{"desc":"398","fix":"399"},{"desc":"400","fix":"401"},"Update the dependencies array to be: [afterEvent, gameState.current_play, gameState.difficulty.deal]",{"range":"402","text":"403"},"Update the dependencies array to be: [afterEvent, gameState.current_play, gameState.difficulty.clear, gameState.difficulty.deal, gameState.difficulty.player_action, hands, playerId, questionDispatch]",{"range":"404","text":"405"},"Update the dependencies array to be: [afterEvent, gameState.current_play, gameState.difficulty.clear, gameState.difficulty.deal, gameState.difficulty.player_action, playerId]",{"range":"406","text":"407"},"Update the dependencies array to be: [chooseQuestions]",{"range":"408","text":"409"},[587,611],"[afterEvent, gameState.current_play, gameState.difficulty.deal]",[2489,2513],"[afterEvent, gameState.current_play, gameState.difficulty.clear, gameState.difficulty.deal, gameState.difficulty.player_action, hands, playerId, questionDispatch]",[2358,2382],"[afterEvent, gameState.current_play, gameState.difficulty.clear, gameState.difficulty.deal, gameState.difficulty.player_action, playerId]",[1886,1888],"[chooseQuestions]"]