{"version":3,"sources":["Game/GlobalStates/GameState/action.js","utils/GameUtils/DealerHand/index.js","utils/GameUtils/Hand/index.js","Game/GlobalStates/GameState/index.js","utils/GameUtils/Shoe/index.js","Game/Components/PlayerQuestions/RunningCount/index.js","Game/Components/PlayerQuestions/TrueCount/index.js","Game/GameSetup/Frequency/index.js","utils/GameUtils/Shoe/Helpers.js","utils/GameUtils/Dealer/index.js","StatDisplays/SingleGame/StatDisplay/index.js","AuthenticateUser/UserState/action.js","AuthenticateUser/UserState/index.js","Game/GlobalStates/QuestionState/action.js","Game/GlobalStates/QuestionState/index.js","utils/APIs/UserAPI.js","AuthenticateUser/LoginSignup/Components/Login/index.js","AuthenticateUser/LoginSignup/Components/Signup/index.js","AuthenticateUser/LoginSignup/index.js","Navigation/TopMenu/index.js","Navigation/CollapsedMenu/index.js","Navigation/index.js","Game/Components/PlayingCard/index.js","Game/Components/Hand/index.js","Game/Components/Dealer/index.js","Game/Components/PlayerQuestions/StrategyDecision/index.js","Game/Components/PlayerQuestions/DecksRemaining/index.js","Game/Components/PlayerQuestions/index.js","Game/Components/Player/ActivePlayer/index.js","Game/Components/Player/PassivePlayer/index.js","Game/Components/Player/index.js","Game/TableArrangment/Single/index.js","Game/TableArrangment/Double/index.js","Game/TableArrangment/Triple/index.js","Game/TableArrangment/Quartet/index.js","Game/TableArrangment/index.js","Game/GameSetup/PlayerCount/index.js","Game/GameSetup/DeckCount/index.js","Game/GameSetup/Rules/index.js","Game/GameSetup/Goal/index.js","Game/GameSetup/StrategyConsiderations/index.js","Game/GameSetup/Difficulty/index.js","Game/Components/SectionDivider/index.js","utils/GameUtils/Player/index.js","utils/GameUtils/DecisionMaker/index.js","utils/GameUtils/Game/index.js","Game/GameSetup/index.js","utils/APIs/GameAPI.js","Components/Loader/index.js","StatDisplays/SingleGame/HandDisplay/index.js","StatDisplays/SingleGame/RuleDisplay/index.js","StatDisplays/SingleGame/helper.js","StatDisplays/SingleGame/index.js","Game/GameFinished/index.js","Game/index.js","Introduction/Forward/index.js","Introduction/BasicStrategy/index.js","Introduction/HiLoCounting/index.js","Introduction/BettingDeviations/BetChart.js","Introduction/BettingDeviations/index.js","Introduction/PlayingDeviations/index.js","Introduction/index.js","TrainingGuide/GameParameters/index.js","TrainingGuide/StrategyConsiderations/index.js","TrainingGuide/CardCountingParameters/index.js","TrainingGuide/MasteringCardCounting/index.js","TrainingGuide/index.js","StatDisplays/Overall/index.js","AuthenticateUser/index.js","App.js","index.js","Game/Components/InfoPopup/index.js","utils/GameUtils/Card/index.js","utils/GameUtils/PlayerHand/index.js"],"names":["__webpack_require__","d","__webpack_exports__","SET_HISTORY","EVOLVE_HISTORY","START_PLAYER_TURN","END_PLAYER_TERM","UPDATE_PLAYER_STATS","SET_RULES","SET_DIFFICULTY","SHOW_COUNT","SET_GAME","CLEAR_GAME","GAME_RESET","GAME_PAUSE","FINISH_GAME","DealerHand","downCard","_this","Object","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","cards","done","upCard","push","value","flipUp","handleAces","total","getHandValue","eval","_iterator","_createForOfIteratorHelper","_step","s","n","card","err","e","f","Hand","String","length","bust","aces","nonAces","_iterator2","_step2","isAce","nonAceSum","sumCards","i","GameContext","createContext","Provider","initial","remaining_history","current_play","prev_play","player_turn","player_stats","rules","showCount","difficulty","player_action","deal","clear","surrender","finished","reducer","state","action","type","game","history","getHistory","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_3__","slice","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_2__","concat","stat","countWithIndeces","console","log","player_state","GameProvider","_ref","props","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_1__","_useReducer","useReducer","_useReducer2","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","dispatch","react__WEBPACK_IMPORTED_MODULE_4___default","a","createElement","assign","useGameContext","useContext","Shoe","numDecks","totalDecks","undealtCards","Helper","createShoe","cardInfo","dealtCards","runningCount","numCardsDealt","numCardsRemaining","isUpcard","arguments","undefined","nextCard","pop","Math","round","estimateRemainingDecks","ceil","totalCards","RunningCount","questionsToAsk","setQuestionsToAsk","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_2__","_useGameContext","_useGameContext2","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_1__","gameState","gameDispatch","_useState","useState","_useState2","answer","setAnswer","_useState3","_useState4","correct","setCorrect","_useState5","_useState6","incorrect","setIncorrect","_useState7","_useState8","badInputType","setBadInputType","onSubmit","isNaN","setTimeout","entry","playerError","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_3___default","semantic_ui_react__WEBPACK_IMPORTED_MODULE_4__","fluid","textAlign","semantic_ui_react__WEBPACK_IMPORTED_MODULE_5__","as","className","semantic_ui_react__WEBPACK_IMPORTED_MODULE_6__","onChange","target","label","semantic_ui_react__WEBPACK_IMPORTED_MODULE_7__","disabled","icon","color","onClick","semantic_ui_react__WEBPACK_IMPORTED_MODULE_8__","name","labelPosition","semantic_ui_react__WEBPACK_IMPORTED_MODULE_9__","negative","success","TrueCount","trueCount","lowerBound","upperBound","isReasonable","deviation","checkAnswer","difference","Frequency","frequencies","setFrequency","react__WEBPACK_IMPORTED_MODULE_2___default","semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__","centered","FrequencyChanger","frequency","askRunningCount","header","askTrueCount","askDecksRemaining","_ref2","handleDecrease","toFixed","handleIncrease","Column","width","Group","shoe","names","suits","suit","Card","values","shuffleShoe","shuffled","removeRandomElement","arr","randomIndex","floor","random","splice","Dealer","h17","hand","setDone","dealUpcard","flipDown","isSoft17","addCard","flipCards","StatDisplays","averageAbsoluteCountError","averageCountError","decisionAccuracy","runningCountAccuracy","_Users_gabrielsucich_Desktop_CardCounting_client_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","averageAbsoluteError","averageError","countPercent","decisionPercent","accuracyColor","accuracy","errorColor","error","react__WEBPACK_IMPORTED_MODULE_1___default","semantic_ui_react__WEBPACK_IMPORTED_MODULE_2__","_Game_Components_InfoPopup__WEBPACK_IMPORTED_MODULE_5__","content","SET_USER","SIGNAL_NEW_USER","UserContext","user","isNew","objectSpread","UserProvider","objectWithoutProperties","slicedToArray","react_default","useUserContext","SET_PLAYER_ACTIVE","REMOVE_PLAYER_ACTIVE","SET_FREQUENCIES","QUESTION_RESET","QuestionContext","playerIsActive","QuestionProvider","QuestionState_Provider","useQuestionContext","UserAPI","checkCurrenUser","Axios","method","url","then","response","data","findUsername","username","checkPassword","passwordEntry","encryptedPassword","bcrypt","compareSync","checkPasswordFromDatabase","password","dbUser","signup","hashSync","genSaltSync","loginUser","Login","setUsername","setPassword","attemptLogin","invalidPassword","invalidUsername","loadingCredentials","Segment","loading","Header","Input","event","placeholder","iconPosition","Divider","Button","Message","Signup","esm_extends","_useUserContext","_useUserContext2","userDispatch","usernameTaken","setUsernameTaken","passwordMismatch","setPasswordMismatch","setLoading","_useState9","_useState10","firstPassword","setFirstPassword","_useState11","_useState12","secondPassword","setSecondPassword","hasCapitals","match","hasLowerCase","hasNumber","isLongEnough","alertTakenUsername","alertPasswordMismatch","basic","List","size","Item","Icon","Content","loggedInUser","LoginSignup","setUser","setInvalidUsername","setInvalidPassword","setLoadingCredentials","useEffect","alertInvalidUsername","Grid","computer","tablet","mobile","style","marginTop","validUser","Navigation","activePage","setActivePage","loc","useLocation","pathname","Menu","secondary","pointing","attached","Link","to","active","CollapsedMenu","visible","setVisible","newGame","handleClose","Portal","openOnTriggerClick","onOpen","onClose","trigger","open","vertical","primary","react_router","path","isFirst","isLast","getClass","Image","src","isUp","getFilename","getSRC","isDone","map","index","allCards","key","afterEvent","setHand","playerId","dealerHand","Container","StrategyDecision","checkDecision","updateHands","activeHand","_useQuestionContext","_useQuestionContext2","questionDispatch","selected","setSelected","permanentDecisions","hit","stay","canDAS","canSurrender","getRules","entries","decisions","blackjack-insurance","blackjack-no-insurance","cardCount","canBeSplit","getUpcard","getDecisions","decisionPair","positive","decision","playerDecision","correctDecision","dealerUpcard","playerCards","join","consideringIndices","DecksRemaining","checkDecksRemaining","getPossibleValues","marginBottom","decksRemaining","PlayerQuestions","questionState","ready","setReady","questions","chooseQuestions","getTotalDecks","max","min","Player","hands","setHands","nextHands","setNextHands","setActiveHand","updateActiveHand","newHands","compact","toConsumableArray","PassivePlayer","setActionMessage","activePlayerId","ActivePlayer_Player","Single","getActivePlayerIndex","Player_Player","getPlayers","id","Double","players","player","number","Triple","Quartet","TableArrangement","PlayerCount","numPlayers","setNumPlayers","setNumDecks","Rules","setRules","Checkbox","slider","checked","hidden","StrategyConsiderations","countingCards","setCountingCards","Form","Field","Radio","useIndeces","setIndeces","setCountWithIndeces","react_router_dom","Popup","position","Difficulty","setDifficulty","SpeedChanger","time","setTime","SectionDivider","separations","DecisionMaker","classCallCheck","Player_createForOfIteratorHelper","PlayerHand","_hand$cards","card1","card2","indexOf","newHand1","setSplit","newHand2","properMove","hardTotals","require","softTotals","splits","surrenders","strategyDeviations","surrenderDeviations","considerIndices","playerHand","playerHandCount","evaluateSurrender","evaluateIndices","evaluateBasicStrategy","playerRepresentation","handRepresentation","Error","adjustedRepresntation","adjustRepresentationForDAS","includes","deviations","hasEvaluatedInsurance","higher","lower","_","defaultRules","TrainingGame","ruleOptions","playerDecisionMaker","activePlayerIndex","randomActiveIndex","gameHistory","createPlayerOrder","dealer","playGame","playerObj","getHands","getTrueCount","getRunningCount","dealCard","getCardsRemining","playRound","dealStartingCards","Game_createForOfIteratorHelper","attendToPlayer","attendToDealer","clearAllHands","cloneDeep","getHand","getDecksRemainings","_ref4","_step3","_iterator3","_ref7","dealToPlayer","dealToDealer","_step4","_iterator4","_ref8","updateHistory","hitHand","setBust","evaluateInsurance","takingInsurance","updateFlippedCard","getDowncard","splitHand","clearHand","clearDealerHand","_step5","_iterator5","_ref10","_step6","playerAndHandToSplit","_iterator6","makeProperDecision","isBlackjack","handlePlayerBlackjackInsurance","handlePlayerBlackjack","handlePlayerInsurance","surrenderPlayer","playerStay","playerBust","hitPlayer","doubleDownPlayer","splitPlayerHand","apply","flipDealerCards","_step7","dealerMustPlay","_iterator7","getAllPlayerHands","isBust","nextAction","hitDealer","allPlayersBust","_step8","allHands","_iterator8","_step9","_iterator9","GameSetup","useIndices","setIndices","_useState13","_useState14","_useState15","_useState16","horizontal","DeckCount_PlayerCount","InfoPopup","StrategyConsiderations_StrategyConsiderations","inverted","Game","item","GameAPI","saveGame","stats","playingDeviations","getAllGameStats","Loader","height","react_loading_default","HandDisplay","getNextPlay","getPrevPlay","verticalAlign","DecisionAttribute","floated","RuleDisplay","assemblePlays","playingStats","assembledPlays","helper_createForOfIteratorHelper","split","cardRep","cardFromRep","construct","dealerDowncard","formatDecision","PlayingStats","gameInfo","restartGame","plays","setPlays","activePlayIndex","setActivePlayIndex","nextIndex","StatDisplay","animated","GameFinished","tempStats","setGameInfo","dbInfo","createNewGame","Forward","getUrl","BasicStrategy","HiLoCounting","reversed","columns","paddingTop","BetChart","Table","celled","Row","HeaderCell","Cell","BettingDeviations","PlayingDeviations","Introduction","useRouteMatch","pagePaths","pageNames","PageComponents","foundPage","Introduction_createForOfIteratorHelper","tabular","PageComponent","GameParameters","CardCountingParameters","MasteringCardCounting","activeImageIndex","setActiveIndex","images","margin","paddingBottom","paddingLeft","paddingRight","TrainingGuide","TrainingGuide_createForOfIteratorHelper","OverallStats","AuthenticateUser","userState","currentUser","QuestionState_QuestionProvider","Navigation_Navigation","Game_Game","App","UserState_UserProvider","GameState","ReactDOM","render","src_App","document","getElementById","up","aceInHand","_len","Array","_key","evaluatedInsurance","handTotal","hasHighAce"],"mappings":"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","file":"static/js/main.d1e2b789.chunk.js","sourcesContent":["export const SET_HISTORY = \"SET_HISTORY\"\nexport const EVOLVE_HISTORY = \"EVOLVE_HISTORY\" \n\nexport const START_PLAYER_TURN = \"START_PLAYER_TURN\"\nexport const END_PLAYER_TERM = \"END_PLAYER_TURN\"\nexport const UPDATE_PLAYER_STATS = \"UPDATE_PLAYER_STATS\"\n\nexport const SET_RULES = \"SET_RULES\"\n\nexport const SET_DIFFICULTY = \"SET_DIFFICULTY\"\n\nexport const SHOW_COUNT = \"SET_SHOW_COUNT\"\n\nexport const SET_GAME = \"SET_GAME\"\nexport const CLEAR_GAME = \"CLEAR_GAME\"\n\nexport const GAME_RESET = \"RESET\"\n\nexport const GAME_PAUSE = \"GAME_PAUSE\"\nexport const FINISH_GAME = \"FINISH_GAME\"","import Hand from \"../Hand\"\nimport Card from \"../Card\"\n\nclass DealerHand extends Hand  {\n    constructor(downCard) {\n        super()\n        this.downCard = downCard;\n        this.cards = [downCard]\n        this.done = false;\n    }\n\n    dealUpcard(upCard) {\n        this.upCard = upCard\n        this.cards.push(this.upCard)\n    }\n\n    getUpcard() {\n        return this.upCard.value\n    }\n\n    getDowncard() {\n        return this.downCard\n    }\n\n    flipCards() {\n        this.downCard.flipUp()\n        this.handleAces()\n    }\n\n    isSoft17() {\n        var total = this.getHandValue()\n        if (eval(total) !== 17) {\n            return false\n        }\n    \n        for (const card of this.cards) {\n            if (card.value === \"11\") {\n                return true\n            }\n        \n        return false\n        }\n    }\n    \n}\n\nexport default DealerHand\n\n","\nclass Hand {\n\n    sumCards(cards) {\n        var total = 0;\n        for (const card of cards) {\n            total += eval(card.value);\n        }\n        return String(total)\n    }\n\n    cardCount() {\n        return this.cards.length\n    }\n\n    isDone() {\n        return this.done\n    }\n\n    isBust() {\n        return this.bust\n    }\n\n    setBust() {\n        this.bust = true\n    }\n\n    setDone() {\n        this.done = true\n    }\n\n    handleAces() {\n        const aces = []\n        const nonAces = []\n\n        for (const card of this.cards) {\n            if (card.isAce()) {\n                aces.push(card)\n            } else {\n                nonAces.push(card)\n            }\n        }\n\n        const nonAceSum = this.sumCards(nonAces)\n\n        for (var i = 0; i < aces.length; i++) {\n            var card = aces[i]\n            if (eval(nonAceSum) <= 11 - aces.length && i === 0) {\n                card.value = \"11\"\n            } else {\n                card.value = \"1\"\n            }\n        }\n    }\n\n    getHandValue() {\n        return this.sumCards(this.cards)\n    }\n\n    addCard(card) {\n        this.cards.push(card);\n        this.handleAces()\n    }\n}\n\nexport default Hand\n\n\n","import React, { useContext, createContext, useReducer } from \"react\"\n\nimport { SET_HISTORY, EVOLVE_HISTORY, START_PLAYER_TURN, END_PLAYER_TERM, UPDATE_PLAYER_STATS, SET_RULES, SET_DIFFICULTY, SHOW_COUNT, SET_GAME, GAME_RESET, FINISH_GAME, CLEAR_GAME } from \"./action\"\n\nconst GameContext = createContext()\nconst { Provider } = GameContext\n\nconst initial = {\n    remaining_history: [],\n    current_play: null,\n    prev_play: null,\n    player_turn: false,\n    player_stats: [],\n    rules: {},\n    showCount: true,\n    difficulty: {\n        player_action: 500,\n        deal: 500,\n        clear: 500,\n        surrender: 500,\n    },\n    finished: false\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case SET_GAME:\n            var game = action.game\n            var history = action.game.getHistory()\n            var remaining_history = [...history.slice(1)]\n            var current_play = {...history[0]}\n            return {...state, game: game, remaining_history: remaining_history, current_play: current_play}\n            break\n        case SET_HISTORY:\n            return { ...state, remaining_history: [...action.history] }\n            break\n\n        case EVOLVE_HISTORY:\n            if (state.remaining_history.length === 0) {\n                return null\n            } else {\n                var prev_play = {...state.current_play}\n                var current_play = {...state.remaining_history[0]}\n                var remaining_history = [...state.remaining_history.slice(1)]\n                return {...state, prev_play: prev_play, current_play : current_play, remaining_history : remaining_history}\n            }\n            break\n        case START_PLAYER_TURN:\n            return {...state, player_turn : true}\n            break;\n        case END_PLAYER_TERM:\n            return {...state, player_turn: false}\n            break;\n        case UPDATE_PLAYER_STATS:\n            return {...state, player_stats: [...state.player_stats, action.stat]}\n            break;\n        case SET_RULES:\n            return {...state, rules: action.rules}\n            break;\n        case SHOW_COUNT:\n            return {...state, showCount: action.countWithIndeces}\n            break\n        case SET_DIFFICULTY:\n            return {...state, difficulty: {...state.difficulty, ...action.difficulty}}\n            break\n        case GAME_RESET:\n            var game = action.game\n            var history = game.getHistory()\n            var remaining_history = [...history.slice(1)]\n            var current_play = {...history[0]}\n            console.log(current_play)\n            return {...state, game: game, remaining_history: remaining_history, current_play: current_play, prev_play: null, player_turn: false, player_state: [], finished: false}\n        case FINISH_GAME:\n            return {...state, finished: true}\n            break\n        case CLEAR_GAME:\n            return initial\n    }\n}\n\nconst GameProvider = ({value=[], ...props}) => {\n\n    const [state, dispatch] = useReducer(reducer, initial)\n\n    return (\n        <Provider value = {[state, dispatch]} {...props}/>\n    )\n}\n\nconst useGameContext = () => {\n    return useContext(GameContext)\n}\n\nexport {useGameContext, GameProvider}","import Helper from \"./Helpers\"\nimport cardInfo from \"../../cards/cards.json\"\n\n\nclass Shoe {\n\n    constructor(numDecks) {\n        this.totalDecks = numDecks;\n        this.undealtCards = Helper.createShoe(cardInfo, numDecks);\n        this.dealtCards = [];\n        this.runningCount = 0;\n    }\n\n\n\n    numCardsRemaining() {\n        return this.undealtCards.length\n    }\n\n    numCardsDealt() {\n        return this.dealtCards.length\n    }\n\n    totalCards() {\n        return this.numCardsDealt() + this.numCardsRemaining()\n    }\n\n    dealCard(isUpcard = true) {\n        var nextCard = this.undealtCards.pop()[0];\n        if (isUpcard) {\n            if (nextCard.isAce() || nextCard.value === \"10\") {\n                this.runningCount = this.runningCount - 1\n            } else if (eval(nextCard.value) < 7) {\n                this.runningCount = this.runningCount + 1\n            }\n        }\n        this.dealtCards.push(nextCard)\n        return nextCard;\n    }\n\n    updateFlippedCard(card) {\n        if (card.isAce() || card.value === \"10\") {\n            this.runningCount = this.runningCount - 1\n        } else if (eval(card.value) < 7) {\n            this.runningCount = this.runningCount + 1\n        }\n    }\n\n\n    getRunningCount() {\n        return this.runningCount\n    }\n\n    getTrueCount() {\n        return Math.round(this.runningCount / this.estimateRemainingDecks())\n    }\n\n    estimateRemainingDecks() {\n\n        return Math.ceil((this.numCardsRemaining() / this.totalCards()) * 2 * this.totalDecks) / 2\n    }\n\n}\n\n\nexport default Shoe\n\n\n","import React, { useState } from \"react\"\nimport { Container, Input, Message, Button, Icon, Header } from \"semantic-ui-react\"\n\nimport { useGameContext } from \"../../../GlobalStates/GameState\"\nimport { UPDATE_PLAYER_STATS } from \"../../../GlobalStates/GameState/action\"\n\nexport default function RunningCount({ runningCount, questionsToAsk, setQuestionsToAsk, ...props }) {\n\n    const [gameState, gameDispatch] = useGameContext()\n\n    const [answer, setAnswer] = useState(\"\")\n    const [correct, setCorrect] = useState(false)\n    const [incorrect, setIncorrect] = useState(false)\n    const [badInputType, setBadInputType] = useState(false)\n\n    const onSubmit = () => {\n\n        if (isNaN(answer)) {\n            setAnswer(\"\")\n            setBadInputType(true)\n            setTimeout(() => {\n                setBadInputType(false)\n            }, 1000)\n        }\n        else {\n            const entry = eval(answer)\n            if (entry || entry === 0) {\n                gameDispatch({ type: UPDATE_PLAYER_STATS, stat: { type: \"runningCount\", playerError: entry - runningCount } })\n                if (runningCount === entry) {\n                    setCorrect(true)\n                    setTimeout(() => {\n                        setQuestionsToAsk({ ...questionsToAsk, runningCount: false })\n                    }, 1000)\n                } else {\n                    setIncorrect(true)\n                    setTimeout(() => {\n                        setQuestionsToAsk({ ...questionsToAsk, runningCount: false })\n                    }, 2000)\n                }\n            }\n        }\n\n\n    }\n\n    return (\n        <Container fluid textAlign=\"center\">\n            <Header as=\"h4\" className=\"white\">What is the current running count?</Header>\n            <Input\n                type=\"text\"\n                value={answer}\n                onChange={e => setAnswer(e.target.value)}\n                label={<Button disabled = {answer ? false : true} icon color={answer ? \"green\" : \"grey\"} onClick={onSubmit}><Icon name=\"check\" ></Icon></Button>}\n                labelPosition=\"right\"\n            />\n            {badInputType && <Message negative>{\"You must enter a number for the running count\"}</Message>}\n            {correct && <Message success>{`Right! The running count is ${runningCount}`}</Message>}\n            {incorrect && <Message negative>{`Not quite... The running count is actually ${runningCount}`}</Message>}\n        </Container>\n    )\n}","import React, { useState } from \"react\"\nimport { Container, Input, Message, Button, Icon, Header } from \"semantic-ui-react\"\n\nimport { useGameContext } from \"../../../GlobalStates/GameState\"\nimport { UPDATE_PLAYER_STATS } from \"../../../GlobalStates/GameState/action\"\n\nexport default function TrueCount({ trueCount, totalDecks, questionsToAsk, setQuestionsToAsk, ...props }) {\n\n    const lowerBound = trueCount - 1\n    const upperBound = trueCount + 1\n\n    const [gameState, gameDispatch] = useGameContext()\n\n    const [answer, setAnswer] = useState(\"\")\n    const [correct, setCorrect] = useState(false)\n    const [incorrect, setIncorrect] = useState(false)\n\n    const [badInputType, setBadInputType] = useState(false)\n\n    const isReasonable = value => {\n        return value >= lowerBound && value <= upperBound\n    }\n\n    const deviation = entry => {\n        if (isReasonable(entry)) {\n            return 0\n        } else if (entry > upperBound) {\n            return entry - upperBound\n        } else if (entry < lowerBound) {\n            return entry - lowerBound\n        }\n    }\n\n    const checkAnswer = () => {\n\n        if (isNaN(answer)) {\n            setAnswer(\"\")\n            setBadInputType(true)\n            setTimeout(() => {\n                setBadInputType(false)\n            }, 1000)\n        } else {\n            const entry = eval(answer)\n\n            if (entry || entry === 0) {\n                gameDispatch({ type: UPDATE_PLAYER_STATS, stat: { type: \"trueCount\", difference: deviation(entry) } })\n                if (isReasonable(entry)) {\n                    setCorrect(true)\n                } else {\n                    setIncorrect(true)\n                }\n                setTimeout(() => {\n                    setCorrect(false)\n                    setIncorrect(false)\n                    setQuestionsToAsk({ ...questionsToAsk, trueCount: false })\n                }, 2000)\n            }\n\n\n        }\n\n\n    }\n\n\n    return (\n        <Container fluid textAlign=\"center\">\n            <Header as=\"h4\" className=\"white\">Estimate the current true count</Header>\n            <Input\n                type=\"text\"\n                value={answer}\n                onChange={e => setAnswer(e.target.value)}\n                label={ <Button disabled = {answer ? false : true} icon color={answer ? \"green\" : \"grey\"} onClick={checkAnswer}><Icon name=\"check\" ></Icon></Button>}\n                labelPosition=\"right\"\n            />\n            {badInputType && <Message negative>{\"You must enter a number for the true count.\"}</Message>}\n            {correct && <Message success>{`Yep, ${answer} is a good estimate of the true count!`}</Message>}\n            {incorrect && <Message negative>{`Not quite... ${answer} is not really a good estimate of the true count.`}</Message>}\n        </Container>\n    )\n}","import React from \"react\"\n\nimport { Grid, Button, Header } from \"semantic-ui-react\"\n\nexport default function Frequency({ frequencies, setFrequency, ...props }) {\n\n\n    const setTrueCount = frequency => {\n        setFrequency({ ...frequencies, askTrueCount: frequency })\n    }\n\n    const setRunningCount = frequency => {\n        setFrequency({ ...frequencies, askRunningCount: frequency })\n    }\n\n    const setDecksRemaining = frequency => {\n        setFrequency({ ...frequencies, askDecksRemaining: frequency })\n    }\n\n    return (\n        <Grid centered>\n            <FrequencyChanger frequency={frequencies.askRunningCount} setFrequency={setRunningCount} header=\"the running count?\" />\n            <FrequencyChanger frequency={frequencies.askTrueCount} setFrequency={setTrueCount} header=\"the true count?\" />\n            <FrequencyChanger frequency={frequencies.askDecksRemaining} setFrequency={setDecksRemaining} header=\"the numbers of remaining decks?\" />\n        </Grid>\n\n    )\n\n\n}\n\nfunction FrequencyChanger({ frequency, setFrequency, header, ...props }) {\n\n    const handleDecrease = () => {\n        if (frequency > 0) {\n            setFrequency(eval((frequency - .1).toFixed(2)))\n        }\n    }\n    const handleIncrease = () => {\n        if (frequency < 1) {\n            setFrequency(eval((frequency + .1).toFixed(2)))\n        }\n    }\n\n\n\n    return (\n\n        <Grid.Column width={16} textAlign = \"center\">\n            <Header as=\"h5\" className = \"white button-header\">{header} </Header>\n            <Button.Group>\n                <Button icon=\"minus\" color=\"red\" onClick={handleDecrease} />\n                <Button>{frequency * 100 + \"%\"}</Button>\n                <Button icon=\"plus\" color=\"green\" onClick={handleIncrease} />\n            </Button.Group>\n        </Grid.Column>\n\n    )\n\n}","import Card from \"../Card\"\n\nconst Helper = {\n\n    createShoe(cardInfo, numDecks) {\n        const shoe = []\n        for (var i = 0; i < numDecks; i++) {\n            for (const name of cardInfo.names) {\n                for (const suit of cardInfo.suits) {\n                    shoe.push(new Card(name, cardInfo.values[name], suit))\n                }\n            }\n        }\n        return this.shuffleShoe(shoe)\n    },\n\n    shuffleShoe(shoe) {\n        const shuffled = [];\n        while (shoe.length > 0) {\n            shuffled.push(this.removeRandomElement(shoe));\n        }\n        return shuffled\n    },\n\n    removeRandomElement(arr) {\n        var randomIndex = Math.floor(Math.random()*arr.length);\n        return arr.splice(randomIndex, 1)\n    }\n}\n\nexport default Helper","import DealerHand from \"../DealerHand\"\n\nclass Dealer {\n\n    constructor(h17) {\n        this.hand = null;\n        this.h17 = h17 // If true, must hit on soft 17, otherwise stand on soft s17\n    }\n\n    getHand() {\n        return this.hand;\n    }\n\n    setDone() {\n        this.hand.setDone()\n    }\n\n    dealCard(card) {\n        if (!this.hand) {\n            card.flipDown()\n            this.hand = new DealerHand(card)\n        } else {\n            this.hand.dealUpcard(card)\n        }\n    }\n    \n    nextAction() {\n        if (eval(this.hand.getHandValue()) >= 17 && !this.hand.isSoft17()) {\n            return \"S\"\n        } else if (this.hand.isSoft17()) {\n            if (this.h17) {\n                return \"H\"\n            } else {\n                return \"S\"\n            }\n        }\n        return \"H\"\n    }\n\n    hit(card) {\n        this.hand.addCard(card)\n    }\n\n    stay() {\n        this.hand.setDone()\n    }\n\n    flipCards() {\n        this.hand.flipCards()\n    }\n\n    clearHand() {\n        this.hand = null;\n    }\n\n}\n\nexport default Dealer","import React from \"react\"\n\nimport { Grid, Header, Divider, Container, Button } from \"semantic-ui-react\"\n\nimport InfoPopup from \"../../../Game/Components/InfoPopup\"\nimport \"./style.css\"\n\nexport default function StatDisplays({ averageAbsoluteCountError, averageCountError, decisionAccuracy, runningCountAccuracy, ...props }) {\n\n    if (averageAbsoluteCountError) {\n        var averageAbsoluteError = eval(averageAbsoluteCountError).toFixed(1)\n        if (averageAbsoluteError[averageAbsoluteError.length - 1] === \"0\") {\n            averageAbsoluteError = averageAbsoluteError.slice(0, averageAbsoluteError.length - 2)\n        }\n    }\n    if (averageCountError) {\n        var averageError = eval(averageCountError).toFixed(1)\n        if (averageError[averageError.length - 1] === \"0\") {\n            averageError = averageError.slice(0, averageError.length - 2)\n        }\n    }\n    if (runningCountAccuracy) {\n        var countPercent = (eval(runningCountAccuracy) * 100).toFixed(0)\n    }\n    if (decisionAccuracy) {\n        var decisionPercent = (eval(decisionAccuracy) * 100).toFixed(0)\n    }\n\n    const accuracyColor = accuracy => {\n        if (accuracy < 70) {\n            return \"red\"\n        } else if (accuracy < 90) {\n            return \"orange\"\n        } else {\n            return \"green\"\n        }\n    }\n\n    const errorColor = error => {\n        if (error <= -1.5 || error >= 1.5) {\n            return \"red\"\n        } else if (error < -.5 || error > .5) {\n            return \"orange\"\n        } else {\n            return \"green\"\n        }\n    }\n\n\n    return (\n        <Container fluid textAlign=\"center\" className=\"no-padding\">\n            <Header className=\"white sunrise\" as=\"h1\">Game Stats</Header>\n\n            {decisionAccuracy &&\n                <Header className=\"white stat-label\" as=\"h5\">\n                    <InfoPopup content='The percentage of correct plays that were made as the player was prompted for decisions on each hand. (\"Correctness\" is based on the rules/considerations of each game).' />\n                    Decision Accuracy: &nbsp;&nbsp;&nbsp;\n                </Header>\n            }\n            {decisionAccuracy &&\n\n                <Button className=\"stat-button\" color={accuracyColor(eval(decisionPercent))}>{decisionPercent + \"%\"}</Button>\n            }\n\n            <br />\n\n            {runningCountAccuracy &&\n                <Header className=\"white stat-label\" as=\"h5\">\n                    <InfoPopup content=\"The percentage of time that the player entered the correct running count when prompted.\" />\n                    Running Count Accuracy: &nbsp;&nbsp;&nbsp;\n                </Header>\n            }\n\n            {runningCountAccuracy &&\n                <Button className=\"stat-button\" color={accuracyColor(eval(countPercent))}>{countPercent + \"%\"}</Button>\n            }\n\n            <br />\n\n            {averageAbsoluteCountError &&\n                <Header className=\"white stat-label\" as=\"h5\">\n                    <InfoPopup content=\"The average absolute error between the actual running count and player's track of the running count. Note that this statistic treats all errors as 'positive', and so it generally reflects how well the player kept the count.\" />\n                Average Absolute Running Count Error: &nbsp;&nbsp;&nbsp;\n            </Header>\n            }\n\n            {averageAbsoluteCountError &&\n                <Button className=\"stat-button\" color={errorColor(eval(averageAbsoluteError))}>{averageAbsoluteError}</Button>\n            }\n\n            <br/>\n\n            {averageCountError &&\n                <Header className=\"white stat-label\" as=\"h5\">\n                    <InfoPopup content=\"The average error between the running count and player's track of the running count, where the errors are treated as both positive and negative. This average will be less than the absolute average, but it's value will be a more specific evaluation of whether students are overestimating (positive) or underestimating (negative) the running count.\" />\n            Running Count Bias: &nbsp;&nbsp;&nbsp;\n    </Header>\n            }\n\n            {averageCountError &&\n                <Button className=\"stat-button\" color={errorColor(eval(averageError))}>{averageError}</Button>\n            }\n\n        </Container>\n\n\n\n\n    )\n}\n","export const SET_USER = \"SET_USER\"\nexport const SIGNAL_NEW_USER = \"SIGNAL_NEW_USER\"","import React, {useContext, createContext, useReducer} from \"react\"\n\nimport {SET_USER, SIGNAL_NEW_USER} from \"./action\"\n\nconst UserContext = createContext()\nconst {Provider} = UserContext\n\nconst initial = {\n    user: false,\n    isNew: false\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case SET_USER:\n            return {...state, user: action.user}\n        case SIGNAL_NEW_USER:\n            return {...state, isNew: true}\n    }\n}\n\nconst UserProvider = ({value = [], ...props}) => {\n\n    const [state, dispatch] = useReducer(reducer, initial)\n\n    return (\n        <Provider value = {[state, dispatch]} {...props} />\n    )\n\n}\n\nconst useUserContext = () => {\n    return useContext(UserContext)\n}\n\nexport {useUserContext, UserProvider}","\nexport const SET_PLAYER_ACTIVE = \"SET_PLAYER_ACTIVE\"\nexport const REMOVE_PLAYER_ACTIVE = \"REMOVE_PLAYER_ACTIVE\"\nexport const SET_FREQUENCIES = \"SET_FREQUENCIES\"\nexport const QUESTION_RESET = \"RESET\"","import React, {useReducer, useContext, createContext} from \"react\"\n\nimport {SET_PLAYER_ACTIVE, REMOVE_PLAYER_ACTIVE, SET_FREQUENCIES, QUESTION_RESET} from \"./action\"\n\nconst QuestionContext = createContext()\nconst {Provider} = QuestionContext\n\nconst initial = {\n    playerIsActive : false,\n    askTrueCount : 0,\n    askRunningCount : 0,\n    askDecksRemaining : 0,\n}\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case SET_PLAYER_ACTIVE:\n            return {...state, playerIsActive: true}\n            break\n        case REMOVE_PLAYER_ACTIVE:\n            return {...state, playerIsActive: false}\n            break\n        case SET_FREQUENCIES:\n            return {...state, ...action.frequencies}\n            break\n        case QUESTION_RESET:\n            return initial\n            break;\n    }\n}\n\nconst QuestionProvider = ({value = [], ...props}) => {\n    const [state, dispatch] = useReducer(reducer, initial)\n\n    return <Provider value = {[state, dispatch]} {...props}/>\n}\n\nconst useQuestionContext = () => {\n    return useContext(QuestionContext)\n}\n\nexport {useQuestionContext, QuestionProvider}","import bcrypt from \"bcryptjs\"\nimport Axios from \"axios\"\n\nconst UserAPI = {\n\n    checkCurrenUser() {\n        return Axios({\n            method: \"GET\",\n            url: \"/api/user/current\"\n        }).then(response => {\n            return response.data\n        })\n    }, \n\n    findUsername(username) {\n        return Axios({\n            method: \"POST\",\n            data: {username: username},\n            url: \"/api/user/getuser\"\n        }).then(response => {\n            return response.data\n        })\n    },\n\n    checkPassword(passwordEntry, encryptedPassword) {\n        return bcrypt.compareSync(passwordEntry, encryptedPassword)\n    },\n\n    checkPasswordFromDatabase(username, password) {\n        this.findUsername(username).then(dbUser => {\n            return bcrypt.compareSync(password, dbUser.password)\n        })\n    },\n\n    signup(username, password) {\n        password = bcrypt.hashSync(password, bcrypt.genSaltSync(10), null)\n        return Axios({\n            method: \"POST\",\n            data: {username: username, password: password},\n            url: \"/api/user/create\"\n        }).then(response => {\n            return response.data\n        })\n    },\n\n    loginUser(user) {\n        return Axios({\n            method: \"POST\",\n            url: \"/api/user/login\",\n            data: {username: user.username, password: \"unnecessary\"}\n        }).then(response => {\n            return response.data\n        })\n    }\n\n}\n\nexport default UserAPI","import React, { useState } from \"react\"\n\nimport { Segment, Input, Button, Divider, Header, Message} from \"semantic-ui-react\"\n\nexport default function Login({ username, setUsername, password, setPassword, attemptLogin, invalidPassword, invalidUsername, loadingCredentials, ...props }) {\n\n\n\n    return (\n\n        <Segment textAlign=\"center\" loading = {loadingCredentials}>\n            <Header as=\"h2\">Existing Users</Header>\n            <Input\n                onChange={event => setUsername(event.target.value)}\n                placeholder=\"Username\"\n                value={username}\n                icon=\"user\"\n                iconPosition=\"left\"\n            />\n            <Input\n                onChange={event => setPassword(event.target.value)}\n                placeholder=\"Password\"\n                value={password}\n                icon=\"lock\"\n                iconPosition=\"left\"\n                type = \"password\"\n\n            />\n            <Divider />\n\n\n            <Button\n\n                color=\"green\"\n                disabled={!username || !password}\n                onClick={attemptLogin}\n            >\n                Login\n                </Button>\n\n            {invalidUsername &&\n                <Message negative>\n                    No account exists with this username\n                                </Message>\n            }\n            {invalidPassword &&\n                <Message negative>\n                    Incorrect password for this username\n                                </Message>\n            }\n\n        </Segment>\n    )\n\n}","import React, { useState } from \"react\"\n\nimport { Segment, Header, Divider, Input, List, Button, Message } from \"semantic-ui-react\"\n\nimport {useUserContext} from \"../../../UserState\"\nimport {SET_USER, SIGNAL_NEW_USER} from \"../../../UserState/action\"\n\n\nimport UserAPI from \"../../../../utils/APIs/UserAPI\"\n\n\nexport default function Signup({ ...props }) {\n\n    const [userState, userDispatch] = useUserContext()\n\n    const [usernameTaken, setUsernameTaken] = useState(false)\n    const [passwordMismatch, setPasswordMismatch] = useState(false)\n    \n    const [loading, setLoading] = useState(false)\n\n    const [username, setUsername] = useState(\"\")\n    const [firstPassword, setFirstPassword] = useState(\"\")\n    const [secondPassword, setSecondPassword] = useState(\"\")\n\n\n    const hasCapitals = () => {\n        if (firstPassword.match(/[A-Z]/) === null) {\n            return false;\n        }\n        return true;\n    }\n\n    const hasLowerCase = () => {\n        if (firstPassword.match(/[a-z]/) === null) {\n            return false;\n        }\n        return true;\n    }\n\n    const hasNumber = () => {\n        if (firstPassword.match(/[0-9]/) === null) {\n            return false;\n        }\n        return true;\n    }\n\n    const isLongEnough = () => {\n        return firstPassword.length >= 6\n    }\n\n\n    const validPassword = () => {\n        return hasCapitals() && hasLowerCase() && hasNumber() && isLongEnough()\n    }\n\n    const attemptSignup = () => {\n        setLoading(true)\n        UserAPI.findUsername(username).then(dbUser => {\n            setLoading(false)\n            if (dbUser) {\n                alertTakenUsername()\n            } else if (firstPassword !== secondPassword) {\n                alertPasswordMismatch()\n            } else {\n                UserAPI.signup(username, firstPassword).then(dbUser => {\n                    UserAPI.loginUser(dbUser).then(loggedInUser => {\n                        userDispatch({type: SIGNAL_NEW_USER})\n                        userDispatch({type: SET_USER, user: loggedInUser})\n                        \n                    })\n                })\n            }\n        })\n    }\n\n    const alertTakenUsername = () => {\n        setUsernameTaken(true)\n\n        setUsername(\"\")\n        setFirstPassword(\"\")\n        setSecondPassword(\"\")\n\n        setTimeout(() => {\n            setUsernameTaken(false)\n        }, 2000)\n    }\n\n    const alertPasswordMismatch = () => {\n        setPasswordMismatch(true)\n\n        setFirstPassword(\"\")\n        setSecondPassword(\"\")\n\n        setTimeout(() => {\n            setPasswordMismatch(false)\n        }, 2000)\n\n    }\n\n    return (\n        <Segment textAlign=\"center\" loading = {loading}>\n            <Header as=\"h2\">Create Account</Header>\n            <Input\n                value={username}\n                onChange={event => setUsername(event.target.value)}\n                placeholder=\"Create username\"\n                icon=\"pencil alternate\"\n                iconPosition=\"left\"\n            />\n            <Segment basic className=\"no-top-margin no-bottom-margin\">\n                <Input\n                    value={firstPassword}\n                    type=\"password\"\n                    placeholder=\"Create password\"\n                    onChange={event => setFirstPassword(event.target.value)}\n                    icon=\"pencil alternate\"\n                    iconPosition=\"left\"\n\n                />\n                <List size=\"mini\">\n                    <List.Item>\n                        <List.Icon\n                            name={hasLowerCase() ? \"check\" : \"certificate\"}\n                            color={hasLowerCase() ? \"green\" : \"red\"}\n                        />\n                        <List.Content className=\"no-padding\">contain a lowercase letter</List.Content>\n                    </List.Item>\n                    <List.Item>\n                        <List.Icon\n                            name={hasCapitals() ? \"check\" : \"certificate\"}\n                            color={hasCapitals() ? \"green\" : \"red\"}\n                        />\n                        <List.Content className=\"no-padding\">contain an uppercase letter</List.Content>\n                    </List.Item>\n                    <List.Item>\n                        <List.Icon\n                            name={hasNumber() ? \"check\" : \"certificate\"}\n                            color={hasNumber() ? \"green\" : \"red\"}\n                        />\n                        <List.Content className=\"no-padding\">contain a number</List.Content>\n                    </List.Item>\n                    <List.Item>\n                        <List.Icon\n                            name={isLongEnough() ? \"check\" : \"certificate\"}\n                            color={isLongEnough() ? \"green\" : \"red\"}\n                        />\n                        <List.Content className=\"no-padding\">contain at least six characters</List.Content>\n                    </List.Item>\n                </List>\n                <Divider/>\n                <Input\n                    value={secondPassword}\n                    type=\"password\"\n                    placeholder=\"Verify password\"\n                    onChange={event => setSecondPassword(event.target.value)}\n                    iconPosition = \"left\"\n                    icon = \"pencil alternate\"\n\n                />\n            </Segment>\n            <Button \n                disabled = {validPassword() && secondPassword ? false : true}\n                color = \"green\"\n                onClick = {attemptSignup}\n            > \n            Signup\n            </Button>\n\n            {usernameTaken &&\n                <Message negative>\n                    An account with that username already exists.\n                </Message>\n            }\n\n            {passwordMismatch &&\n                <Message negative>\n                    Passwords must match.\n                </Message>\n            }\n\n        </Segment>\n    )\n\n}","import React, { useEffect, useState } from \"react\"\n\nimport { Divider, Grid, Header, Message } from \"semantic-ui-react\"\n\nimport UserAPI from \"../../utils/APIs/UserAPI\"\nimport { useUserContext } from \"../UserState\"\nimport { SET_USER } from \"../UserState/action\"\n\nimport Login from \"./Components/Login\"\nimport Signup from \"./Components/Signup\"\n\nimport \"./style.css\"\n\nexport default function LoginSignup({ ...props }) {\n\n    const [userState, userDispatch] = useUserContext()\n\n    const [user, setUser] = useState()\n\n    const [username, setUsername] = useState()\n    const [password, setPassword] = useState()\n\n    const [invalidUsername, setInvalidUsername] = useState(false)\n    const [invalidPassword, setInvalidPassword] = useState(false)\n    const [loadingCredentials, setLoadingCredentials] = useState(false)\n\n    useEffect(() => {\n        return () => {\n            setUser(null);\n            setUsername(null);\n            setPassword(null);\n            setInvalidUsername(false);\n            setInvalidPassword(false)\n            setLoadingCredentials(false);\n        }\n    }, [])\n\n    const alertInvalidUsername = () => {\n        setUsername(\"\")\n        setPassword(\"\")\n        setInvalidUsername(true)\n        setLoadingCredentials(false)\n        setTimeout(() => {\n            setInvalidUsername(false)\n        }, 1500)\n    }\n\n    const alertInvalidPassword = () => {\n        setPassword(\"\")\n        setInvalidPassword(true)\n        setLoadingCredentials(false)\n        setTimeout(() => {\n            setInvalidPassword(false)\n        }, 2000)\n    }\n\n    const checkUsername = () => {\n        return UserAPI.findUsername(username).then(dbUser => {\n        \n            if (!dbUser) {\n                alertInvalidUsername()\n                return false;\n            } else {\n                setUser(dbUser)\n                return dbUser;\n            }\n        })\n    }\n\n    const checkPassword = (user) => {\n        if (!user) {\n            setLoadingCredentials(false)\n            return;\n        } else if (UserAPI.checkPassword(password, user.password)) {\n            console.log(\"Password was correct\")\n            UserAPI.loginUser(user).then(dbUser => {\n                userDispatch({ type: SET_USER, user: dbUser })\n            })\n        } else {\n            console.log(\"password was incorrect\")\n            setLoadingCredentials(false)\n            alertInvalidPassword()\n        }\n    }\n\n    const attemptLogin = () => {\n        setLoadingCredentials(true)\n        checkUsername().then(validUser => {\n    \n            if (!validUser) {\n                setLoadingCredentials(false)\n                alertInvalidUsername()\n            } else {\n                checkPassword(validUser)\n            }\n        })\n    }\n\n    return (\n        <div className=\"login-background overflow\">\n            <Grid centered>\n                <Grid.Column computer={12} tablet={14} mobile={16} textAlign=\"center\">\n                    <Grid style={{ marginTop: \"20px\" }} centered >\n                        <Grid.Column computer={10} tablet={10} mobile={12} textAlign=\"center\">\n\n                            <Login username={username} setUsername={setUsername} password={password} setPassword={setPassword} attemptLogin={attemptLogin} invalidUsername={invalidUsername} invalidPassword={invalidPassword} loadingCredentials={loadingCredentials} />\n\n                        </Grid.Column>\n                        <Grid.Column computer={6} tablet={6} mobile={12} textAlign=\"center\">\n                            <Signup />\n                        </Grid.Column>\n\n                    </Grid>\n\n\n\n\n                </Grid.Column>\n            </Grid>\n        </div>\n    )\n}","import React, { useEffect, useState } from \"react\"\n\nimport { Link, useLocation } from \"react-router-dom\"\n\nimport { Segment, Menu, Dropdown } from \"semantic-ui-react\"\n\nexport default function Navigation({ ...props }) {\n\n    const [activePage, setActivePage] = useState()\n    \n    const loc = useLocation()\n    \n\n    useEffect(() => {\n        setActivePage(loc.pathname.slice(1))\n    }, [])\n\n\n    return (\n\n        <Menu secondary pointing attached=\"top\" >\n            <Menu.Item\n                as={Link}\n                to=\"/intro\"\n                active={activePage === \"intro\"}\n                name=\"About Card Counting\"\n                onClick={() => setActivePage(\"intro\")}\n            />\n            <Menu.Item\n                as={Link}\n                to=\"/guide\"\n                active={activePage === \"guide\"}\n                name=\"Training Guide\"\n                onClick={() => setActivePage(\"guide\")}\n            />\n            <Menu.Item\n                as={Link}\n                to=\"/stats\"\n                active={activePage === \"stats\"}\n                name=\"My Stats\"\n                onClick={() => setActivePage(\"stats\")}\n            />\n\n            <Menu.Item\n                className = \"menu-emphasis\"\n                as={Link}\n                to=\"/train\"\n                name=\"Start Practicing\"\n                onClick={() => setActivePage(\"train\")}\n            />\n\n\n\n        </Menu>\n\n    )\n}","import React, { useState } from \"react\"\n\nimport { Link } from \"react-router-dom\"\nimport { Button, Divider, Icon, Menu, Portal } from \"semantic-ui-react\"\n\nimport { useGameContext } from \"../../Game/GlobalStates/GameState\"\nimport { GAME_RESET, CLEAR_GAME } from \"../../Game/GlobalStates/GameState/action\"\n\n\nexport default function CollapsedMenu({ ...props }) {\n\n    const [gameState, gameDispatch] = useGameContext()\n\n    const [visible, setVisible] = useState(false)\n\n\n    const newGame = () => {\n        handleClose()\n        gameDispatch({ type: CLEAR_GAME })\n    }\n\n    const handleClose = () => {\n        setVisible(false)\n    }\n\n\n\n    return (\n        <Portal\n            openOnTriggerClick\n            onOpen={() => setVisible(true)}\n            onClose={() => setVisible(false)}\n            trigger={!visible ? <Button icon className=\"corner-menu\"><Icon name=\"bars\" /></Button> : null}\n            open={visible}\n        >\n            <Menu vertical className=\"corner-menu no-margin\">\n                <Menu.Item>\n                    <Menu.Menu>\n                        <Menu.Item\n                            as={Link}\n                            to=\"/intro\"\n                            name=\"Card Counting Guide\"\n                        />\n                        <Menu.Item\n                            as={Link}\n                            to=\"/guide\"\n                            name=\"Training Guide\"\n                        />\n                        <Menu.Item\n                            as={Link}\n                            to=\"/stats\"\n                            name=\"Stats\"\n                        />\n                    </Menu.Menu>\n                </Menu.Item>\n                {gameState.game &&\n                    <Menu.Item className=\"collapsed-menu-item\">\n                        <Menu.Header\n                            as={() => <Button fluid size=\"mini\" primary onClick={newGame}>New Game Settings</Button>}\n                        />\n                    </Menu.Item>\n                }\n\n\n            </Menu>\n        </Portal>\n\n\n    )\n}\n","import React, { useState } from \"react\"\n\nimport { Switch, Route} from \"react-router-dom\"\n\nimport TopMenu from \"./TopMenu\"\nimport CollapsedMenu from \"./CollapsedMenu\"\n\nimport \"./style.css\"\n\nexport default function Navigation({ ...props }) {\n\n    return (\n\n        <Switch>\n            <Route path = \"/train\">\n                <CollapsedMenu/>\n            </Route>\n            <Route>\n                <TopMenu/>\n            </Route>\n        </Switch>\n    )\n\n}","import React from 'react'\nimport {Image} from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\n\nexport default function Card({card, active, isFirst, isLast, ...props}) {\n\n    const getFilename = card => {\n        return \"/images/cards/\" + card.name + card.suit[0] + \".png\"\n    }\n\n    const getSRC = card => {\n        if (!card.isUp()) {\n            return \"/images/cards/back.png\"\n        }\n\n        return getFilename(card)\n    }\n\n    const getClass = () => {\n        var className = \"\"\n        if (active) {\n            className += \"active \"\n        }\n        if (isFirst) {\n            className += \"first-card \"\n        }\n        if (isLast) {\n            className += \"last-card \"\n        }\n        className += \"playing-card \"\n        className += props.className\n        return className\n    }\n\n    console.log(getClass())\n\n\n    return (\n        \n        <Image  src = {getSRC(card)} className = {getClass()}/>\n        \n    )\n\n}","import React from \"react\"\n\nimport { Segment, Image } from \"semantic-ui-react\"\n\nimport PlayingCard from \"../PlayingCard\"\n\nimport \"./style.css\"\n\nexport default function Hand({ hand, active, centered, ...props }) {\n    \n    return (\n        <Segment basic disabled = {hand.isDone() ? true : false} className = {active ? \"hand active\" : \"hand\"}  textAlign= {centered ? \"center\" : \"left\"}>\n            <Image.Group>\n                {hand.cards.map((card, index, allCards) => {\n                return (\n                    <PlayingCard isFirst = {index === 0} isLast = {index === allCards.length - 1} active={active} card={card} key={index} className={index === 0 ? \"\" : \"card-in-hand no-padding\"} />\n                )\n            })}\n            </Image.Group>\n        </Segment>\n    )\n\n}","import React, { useEffect, useState } from \"react\"\nimport { Container } from \"semantic-ui-react\"\n\nimport { useGameContext } from \"../../GlobalStates/GameState\"\nimport Hand from \"../Hand\"\n\nexport default function Dealer({ afterEvent, ...props }) {\n\n    const [gameState, _] = useGameContext()\n    const [hand, setHand] = useState()\n\n\n    useEffect(() => {\n\n\n        if (gameState.current_play.playerId === \"d\") {\n            setHand(gameState.current_play.dealerHand)\n            setTimeout(() => {\n                afterEvent()\n            }, gameState.difficulty.deal);\n        }\n\n    }, [gameState.current_play])\n\n    return (\n        <Container fluid className={props.className}>\n            {hand ?\n                <Hand hand={hand} /> :\n                null}\n\n        </Container>\n    )\n\n}","\nimport React, {useEffect, useState} from \"react\"\n\nimport {Segment, Button, Header} from \"semantic-ui-react\"\n\nimport {useQuestionContext} from \"../../../GlobalStates/QuestionState\"\nimport { useGameContext } from \"../../../GlobalStates/GameState\"\nimport {REMOVE_PLAYER_ACTIVE} from \"../../../GlobalStates/QuestionState/action\"\nimport {UPDATE_PLAYER_STATS} from \"../../../GlobalStates/GameState/action\"\n\nexport default function StrategyDecision({ checkDecision, afterEvent, updateHands, activeHand, ...props }) {\n\n\n    const [questionState, questionDispatch] = useQuestionContext()\n    const [gameState, gameDispatch] = useGameContext()\n\n    const [selected, setSelected] = useState()\n    const [decisions, setDecisions] = useState()\n\n    const permanentDecisions = {\n        \"hit\": \"Hit\",\n        \"stay\": \"Stay\",\n    }\n\n    const getDecisions = () => {\n        \n        var decisions = {...permanentDecisions}\n\n        if (gameState.current_play.action === \"blackjack-insurance\" || gameState.current_play.action === \"blackjack-no-insurance\") {\n            return {\"blackjack-insurance\": \"Insurance\", \"blackjack-no-insurance\": \"No Insurance\"}\n        }\n        if (activeHand.cardCount() === 1) {\n            return {\"hit\": \"Hit\"}\n        }\n        if (activeHand.cardCount() === 2) {\n            decisions[\"double\"] = \"Double Down\"\n        }\n        if (activeHand && activeHand.canBeSplit()) {\n            decisions[\"split\"] = \"Split\" \n        } \n        if (gameState.rules.canSurrender && activeHand.cardCount() === 2) {\n            decisions[\"surrender\"] = \"Surrender\"\n        }\n        if (gameState.current_play.dealerHand.getUpcard() === \"A\" && activeHand.cardCount() === 2) {\n            decisions[\"insurance\"] = \"Insurance\"\n        }\n        return decisions\n    }\n\n    const getRules = () => {\n        var rules = \"Remember: \"\n        if (gameState.rules.canDAS) {\n            rules += \"Players can double down after splitting. \"\n        } else {\n            rules += \"Players can double down after splitting. \"\n        }\n\n        if (gameState.rules.canSurrender) {\n            rules += \"Players are allowed to surrender.\"\n        } else {\n            rules += \"Players are not allower to surrender.\"\n        }\n\n        return rules;\n    }\n\n\n    const onClick = (index, decision) => {\n\n        if (!selected) {\n            const stat = {\n                type: \"playing\",\n                playerDecision: decision,\n                correctDecision: gameState.current_play.action,\n                trueCount: gameState.prev_play.trueCount,\n                dealerUpcard: gameState.current_play.dealerHand.upCard.name + gameState.current_play.dealerHand.upCard.suit[0],\n                playerCards : activeHand.cards.map(card => card.name + card.suit[0]).join(\",\")\n            }\n            gameDispatch({type: UPDATE_PLAYER_STATS, stat: stat})\n\n            if (checkDecision(decision)) {\n                setSelected(index)\n                updateHands()\n                setTimeout(() => {\n                    setSelected(null);\n                    afterEvent()\n                    questionDispatch({type: REMOVE_PLAYER_ACTIVE})\n                }, gameState.difficulty.player_action)\n            } else {\n                setSelected(index)\n                setTimeout(() => {\n                    setSelected(null)\n                }, 1000)\n            }\n        }\n    }\n\n    return (\n        <Segment basic className = \"no-padding\">\n            <Header as=\"h5\" className=\"white\">{getRules()}</Header>\n            {Object.entries(getDecisions()).map((decisionPair, index) => {\n                return (\n                    <Button\n                        key = {index}\n                        size = \"tiny\"\n                        positive={selected === index && checkDecision(decisionPair[0])}\n                        negative={selected === index && !checkDecision(decisionPair[0])}\n                        onClick={() => onClick(index, decisionPair[0])}\n                    >\n                        {decisionPair[1]}\n                    </Button>\n                )\n            })}\n            {gameState.game.consideringIndices() && gameState.showCount && \n                <Header as=\"h5\" className = \"white\">{\"(The current true count is \" + gameState.prev_play.trueCount + \")\"}</Header>\n            }\n        </Segment>\n    )\n}","import React, {useState} from \"react\"\n\nimport {Container, Button, Message, Header} from \"semantic-ui-react\"\n\nimport {useGameContext} from \"../../../GlobalStates/GameState\"\nimport {UPDATE_PLAYER_STATS} from \"../../../GlobalStates/GameState/action\"\n\nexport default function DecksRemaining({ numDecks, checkDecksRemaining, questionsToAsk, setQuestionsToAsk, ...props }) {\n\n    const [gameState, gameDispatch] = useGameContext()\n\n    const getPossibleValues = () => {\n        const values = []\n        for (var i = .5; i <= numDecks; i += .5) {\n            values.push(i)\n        }\n        return values;\n    }\n\n    const [selected, setSelected] = useState()\n\n    const onClick = (decksRemaining, index) => {\n\n        if (!selected) {\n            if (checkDecksRemaining(decksRemaining)) {\n                gameDispatch({ type: UPDATE_PLAYER_STATS, stat: { type: \"decksRemaining\", correct: true } })\n                setSelected([decksRemaining, index])\n                setTimeout(() => {\n                    setSelected(null);\n                    setQuestionsToAsk({ ...questionsToAsk, decksRemaining: false })\n                }, 1000)\n            } else {\n                gameDispatch({ type: UPDATE_PLAYER_STATS, stat: { type: \"decksRemaining\", correct: false } })\n                setSelected([decksRemaining, index])\n                setTimeout(() => {\n                    setSelected(null);\n                }, 1000)\n            }\n        }\n    }\n\n    return (\n        <Container fluid textAlign = \"center\">\n        <Header className = \"white\" as=\"h4\">Estimate the number of decks remaining in the shoe...</Header>\n        {getPossibleValues().map((value, index) => {\n            return (\n                <Button\n                    style = {{marginBottom: \"2px\"}}\n                    key = {index}\n                    positive={selected && selected[1] === index && checkDecksRemaining(value)}\n                    negative={selected && selected[1] === index && !checkDecksRemaining(value)}\n                    onClick={() => onClick(value, index)}\n                >\n                    {value}\n                </Button>\n            )\n        })}\n        {selected && checkDecksRemaining(selected[0]) && <Message positive>{`${selected[0]} is a good estimate for the number of decks remaining!`}</Message>}\n        {selected && !checkDecksRemaining(selected[0]) && <Message negative>{`${selected[0]} is not a great estimate for the number of decks remaining`}</Message>}\n\n    </Container>\n    )\n    \n\n}","import React, { useState, useEffect } from \"react\"\n\nimport { useGameContext } from \"../../GlobalStates/GameState\"\n\nimport { useQuestionContext } from \"../../GlobalStates/QuestionState\"\n\n\nimport RunningCount from \"./RunningCount\"\nimport TrueCount from \"./TrueCount\"\nimport StrategyDecision from \"./StrategyDecision\"\nimport DecksRemaining from \"./DecksRemaining\"\n\nexport default function PlayerQuestions({ afterEvent, updateHands, activeHand, ...props }) {\n\n    const [gameState, gameDispatch] = useGameContext()\n    const [questionState, questionDispatch] = useQuestionContext()\n\n    const [questionsToAsk, setQuestionsToAsk] = useState({})\n    const [ready, setReady] = useState(false)\n\n    const chooseQuestions = () => {\n        const questions = {}\n        if (Math.random() < questionState.askRunningCount) {\n            questions.runningCount = true;\n        }\n        if (Math.random() < questionState.askDecksRemaining) {\n            questions.decksRemaining = true\n        }\n        if (Math.random() < questionState.askTrueCount) {\n            questions.trueCount = true;\n        }\n        setQuestionsToAsk(questions)\n\n    }\n\n    const checkDecksRemaining = answer => {\n        var lowerBound = Math.max(gameState.current_play.decksRemaining - .5, .5)\n        var upperBound = Math.min(gameState.current_play.decksRemaining + .5, gameState.game.getTotalDecks())\n        if (lowerBound <= answer && answer <= upperBound) {\n            return true;\n        } else {\n            return false;\n        }\n\n    }\n\n    const checkDecision = answer => {\n        if (answer === gameState.current_play.action) {\n            return true\n        }\n        return false\n    }\n\n    useEffect(() => {\n\n        chooseQuestions()\n        setReady(true)\n        return (() => {\n            setQuestionsToAsk({})\n            setReady(false)\n        })\n\n    }, [])\n\n\n    if (!questionState.playerIsActive || !ready) {\n        return null\n    } else if (questionsToAsk.runningCount) {\n        return <RunningCount\n            runningCount={gameState.prev_play.runningCount}\n            questionsToAsk={questionsToAsk}\n            setQuestionsToAsk={setQuestionsToAsk}\n        />\n    } else if (questionsToAsk.decksRemaining) {\n        return <DecksRemaining\n            numDecks={gameState.game.getTotalDecks()}\n            checkDecksRemaining={checkDecksRemaining}\n            questionsToAsk={questionsToAsk}\n            setQuestionsToAsk={setQuestionsToAsk}\n        />\n    } else if (questionsToAsk.trueCount) {\n        return <TrueCount\n            trueCount={gameState.prev_play.trueCount}\n            questionsToAsk={questionsToAsk}\n            setQuestionsToAsk={setQuestionsToAsk}\n        />\n    }\n    else {\n        return <StrategyDecision checkDecision={checkDecision} afterEvent={afterEvent} updateHands={updateHands} activeHand={activeHand} />\n    }\n\n\n}\n\n\n\n","import React, { useState, useEffect } from \"react\"\n\nimport { Container, Segment } from \"semantic-ui-react\"\n\nimport { useGameContext } from \"../../../GlobalStates/GameState\"\nimport { useQuestionContext } from \"../../../GlobalStates/QuestionState\"\nimport { SET_PLAYER_ACTIVE } from \"../../../GlobalStates/QuestionState/action\"\n\nimport Hand from \"../../Hand\"\nimport PlayerQuestions from \"../../PlayerQuestions\"\n\nimport \"./style.css\"\n\nexport default function Player({ afterEvent, playerId, ...props }) {\n\n    const [gameState, _] = useGameContext()\n    const [hands, setHands] = useState([])\n    const [nextHands, setNextHands] = useState([])\n\n    const [questionState, questionDispatch] = useQuestionContext()\n\n    const [activeHand, setActiveHand] = useState()\n\n\n    const updateHands = () => {\n        setHands([...nextHands])\n        setNextHands([])\n        updateActiveHand()\n    }\n\n    const updateActiveHand = () => {\n        setActiveHand(null)\n\n        var action = gameState.current_play.action\n        if (hands.length > 0 && action) {\n            for (const hand of hands) {\n                if (!hand.isDone()) {\n                    setActiveHand(hand)\n                    return\n                }\n            }\n        }\n\n    }\n\n    useEffect(() => {\n\n        if (gameState.current_play.playerId === playerId) {\n\n            updateActiveHand()\n\n            var action = gameState.current_play.action;\n            var newHands = gameState.current_play[String(playerId)]\n            setNextHands(newHands)\n\n\n            if (action === \"blackjack\") {\n                setHands(newHands)\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n            } else if (action === \"insurance\") {\n                setHands(newHands)\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n            }\n            else if (action === \"deal\") {\n                setHands(newHands)\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.deal)\n            } else if (action === \"clear\") {\n                setHands(newHands)\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.clear)\n            } else if (action === \"bust\") {\n                setHands(newHands)\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.clear)\n            }\n            else {\n\n                questionDispatch({ type: SET_PLAYER_ACTIVE })\n            }\n        }\n    }, [gameState.current_play])\n\n    return (\n        <Container className={props.className + \" card-container\"}>\n            {questionState.playerIsActive &&\n                <Segment basic compact className=\"questions\" textAlign=\"center\">\n                    <PlayerQuestions afterEvent={afterEvent} updateHands={updateHands} activeHand={activeHand} />\n                </Segment>\n            }\n            {hands.map((hand, index) => {\n                return (\n                    <Hand hand={hand} key={index} active={hand === activeHand} />\n\n                )\n            })}\n        </Container>\n    )\n\n}","\nimport React, { useState, useEffect } from \"react\"\n\nimport { Container} from \"semantic-ui-react\"\n\nimport { useGameContext } from \"../../../GlobalStates/GameState\"\n\nimport Hand from \"../../Hand\"\n\nexport default function PassivePlayer({ afterEvent, playerId, ...props }) {\n\n    const [gameState, _] = useGameContext()\n    const [hands, setHands] = useState([])\n    const [actionMessage, setActionMessage] = useState(\"\")\n\n\n    useEffect(() => {\n\n        if (gameState.current_play.playerId === playerId) {\n            var action = gameState.current_play.action;\n            var newHands = gameState.current_play[String(playerId)]\n            setHands(newHands)\n\n            if (action === \"hit\") {\n                setActionMessage(\"Hit!\")\n                setTimeout(() => {\n                    setActionMessage(\"\")\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n\n            } else if (action === \"stay\") {\n                setActionMessage(\"Stay\")\n                setTimeout(() => {\n                    setActionMessage(\"\")\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n\n            } else if (action === \"double\") {\n                setActionMessage(\"Double down!\")\n                setTimeout(() => {\n                    setActionMessage(\"\")\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n\n            } else if (action === \"split\") {\n\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n\n            } else if (action === \"blackjack\") {\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n            } else if (action === \"deal\") {\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.deal)\n\n            } else if (action === \"surrender\") {\n                setActionMessage(\"Surrender!\")\n                setTimeout(() => {\n                    setActionMessage(\"\")\n                    afterEvent()\n                }, gameState.difficulty.player_action)\n\n            } else {\n                setTimeout(() => {\n                    afterEvent()\n                }, gameState.difficulty.clear)\n            }\n\n        }\n    }, [gameState.current_play])\n\n\n    return (\n        <Container className={props.className + \" card-container\"}>\n            \n                {hands.map((hand, index) => {\n                return (\n                    \n                        <Hand hand={hand} key={index} />\n                   \n                )\n            })}\n           </Container>\n\n    \n    )\n\n}","\nimport React from \"react\"\n\nimport ActivePlayer from \"./ActivePlayer\"\nimport PassivePlayer from \"./PassivePlayer\"\n\nexport default function Player({afterEvent, activePlayerId, playerId, ...props}) {\n\n    if (activePlayerId === playerId) {\n        return <ActivePlayer afterEvent = {afterEvent} playerId = {playerId} {...props} />\n    } else {\n        return <PassivePlayer afterEvent = {afterEvent}  playerId = {playerId} {...props} />\n    }\n\n}","import React from \"react\"\n\nimport { Container, Grid } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nimport Dealer from \"../../Components/Dealer\"\nimport Player from \"../../Components/Player\"\n\nimport PauseButton from \"../PauseButton\" \n\n\n\nexport default function Single({ game, afterEvent, ...props }) {\n    \n    const activePlayerId = game.getActivePlayerIndex()\n\n    return (\n        \n           <Container fluid className=\"full-size\">\n               \n               <Dealer afterEvent={afterEvent} className=\"dealer\"/>\n               <Player afterEvent={afterEvent} playerId={game.getPlayers()[0].id} className=\"player1single\" activePlayerId = {activePlayerId} />\n           </Container>\n                \n    )\n\n}","import React from \"react\"\n\nimport { Container, Grid } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nimport Dealer from \"../../Components/Dealer\"\nimport Player from \"../../Components/Player\"\n\nimport PauseButton from \"../PauseButton\" \n\nexport default function Double({ game, afterEvent, ...props }) {\n\n    const players = game.getPlayers()\n    const activePlayerId = game.getActivePlayerIndex()\n\n    return (\n\n        <Container fluid className=\"full-size\">\n           \n            <Dealer afterEvent={afterEvent} className=\"dealer\" />\n\n            {players.map(player => {\n                var id = player.id\n                var number = id + 1\n                return (\n                    <Player afterEvent={afterEvent} className={\"player\" + number + \"double\"} playerId = {id} activePlayerId = {activePlayerId}/>\n                )\n\n            })}\n        </Container>\n\n    )\n\n}","import React from \"react\"\n\nimport { Container, Grid } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nimport Dealer from \"../../Components/Dealer\"\nimport Player from \"../../Components/Player\"\n\nimport PauseButton from \"../PauseButton\" \n\nexport default function Triple({ game, afterEvent, ...props }) {\n\n    const players = game.getPlayers()\n    const activePlayerId = game.getActivePlayerIndex()\n\n    return (\n\n        <Container fluid className=\"full-size\">\n            \n            <Dealer afterEvent={afterEvent} className=\"dealer\" />\n\n            {players.map(player => {\n                var id = player.id\n                var number = id + 1\n                return (\n                    <Player afterEvent={afterEvent} className={\"player\" + number + \"triple\"} playerId = {id} activePlayerId = {activePlayerId}/>\n                )\n\n            })}\n        </Container>\n\n    )\n\n}","import React from \"react\"\n\nimport { Container, Grid } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nimport Dealer from \"../../Components/Dealer\"\nimport Player from \"../../Components/Player\"\n\n\nexport default function Quartet({ game, afterEvent, ...props }) {\n\n    const players = game.getPlayers()\n    const activePlayerId = game.getActivePlayerIndex()\n\n    return (\n\n        <Container fluid className=\"full-size\">\n           \n            <Dealer afterEvent={afterEvent} className=\"dealer\" />\n\n            {players.map(player => {\n                var id = player.id\n                var number = id + 1\n                return (\n                    <Player afterEvent={afterEvent} className={\"player\" + number + \"quartet\"} playerId = {id} activePlayerId = {activePlayerId}/>\n                )\n\n            })}\n        </Container>\n\n    )\n\n}","import React from \"react\"\n\nimport Single from \"./Single\"\nimport Double from \"./Double\"\nimport Triple from \"./Triple\"\nimport Quartet from \"./Quartet\"\n\nimport {useGameContext} from \"../GlobalStates/GameState\"\n\n\nexport default function TableArrangement({afterEvent, ...props}) {\n\n    const [gameState, _] = useGameContext()\n\n    const players = gameState.game.getPlayers()\n\n\n    if (players.length === 1) {\n        return <Single afterEvent = {afterEvent} game = {gameState.game}/>\n    } else if (players.length === 2) {\n        return <Double afterEvent = {afterEvent}  game = {gameState.game}/>\n    } else if (players.length === 3) {\n        return <Triple afterEvent = {afterEvent}  game = {gameState.game}/>\n    } else if (players.length === 4) {\n        return <Quartet afterEvent = {afterEvent} game = {gameState.game} />\n    }\n    \n\n}","import React from \"react\"\n\nimport {Button} from \"semantic-ui-react\"\n\nexport default function PlayerCount({numPlayers, setNumPlayers, ...props}) {\n\n    const handleIncrease = () => {\n        if (numPlayers < 4) {\n            setNumPlayers(numPlayers + 1)\n        }\n    }\n    \n    const handleDecrease = () => {\n        if (numPlayers > 1) {\n            setNumPlayers(numPlayers - 1)\n        }\n    }\n\n    const pluralize = () => {\n        return numPlayers > 1 ? \"players\" : \"player\"\n    }\n\n    return (\n        <Button.Group>\n            <Button icon = \"minus\" color = \"red\" onClick = {handleDecrease}/>\n            <Button>{numPlayers  + \" \" + pluralize()}</Button>\n            <Button icon = \"plus\" color = \"green\" onClick = {handleIncrease}/>\n        </Button.Group>\n\n    )\n\n}\n\n\n","import React from \"react\"\n\nimport {Button} from \"semantic-ui-react\"\n\nexport default function PlayerCount({numDecks, setNumDecks, ...props}) {\n\n    const handleIncrease = () => {\n        if (numDecks < 12) {\n            setNumDecks(numDecks + 1)\n        }\n    }\n    \n    const handleDecrease = () => {\n        if (numDecks > 1) {\n            setNumDecks(numDecks - 1)\n        }\n    }\n\n    const pluralize = () => {\n        if (numDecks > 1) {\n            return \"decks\"\n        }\n        return \"deck\"\n    }\n\n    return (\n        <Button.Group>\n            <Button icon = \"minus\" color = \"red\" onClick = {handleDecrease}/>\n            <Button>{numDecks + \" \" + pluralize()}</Button>\n            <Button icon = \"plus\" color = \"green\" onClick = {handleIncrease}/>\n        </Button.Group>\n\n    )\n\n}","import React from \"react\"\n\nimport { Checkbox, Divider, Segment } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nexport default function Rules({ rules, setRules, ...props }) {\n\n    const canDAS = rules.canDAS;\n    const canSurrender = rules.canSurrender\n    const h17 = rules.h17\n\n\n    return (\n\n        <Segment>\n            <Checkbox\n                slider\n                checked={canDAS}\n                onChange={() => setRules({ ...rules, canDAS: !canDAS })}\n                label={canDAS ? \"Players can double down after splitting a hand\" : \"Players cannot double down after splitting a hand\"}\n            />\n            <Divider hidden />\n            <Checkbox\n                slider\n                checked={canSurrender}\n                onChange={() => setRules({ ...rules, canSurrender: !canSurrender })}\n                label={canSurrender ? \"Players are allowed to surrender\" : \"Players are not allowed to surrender\"}\n            />\n            <Divider hidden />\n            <Checkbox\n                slider\n                checked={h17}\n                onChange={() => setRules({ ...rules, h17: !h17 })}\n                label={h17 ? \"Dealer must hit on soft 17\" : \"Dealer must stay on soft 17\"}\n            />\n        </Segment>\n\n    )\n\n}","import React from \"react\"\n\nimport { Form, Radio, Segment } from \"semantic-ui-react\"\n\nexport default function StrategyConsiderations({ countingCards, setCountingCards, ...props }) {\n\n\n    return (\n        <Segment textAlign = \"center\">\n            <Form>\n            <Form.Field>\n                <Radio\n                    label='Basic Strategy'\n                    checked={!countingCards}\n                    onChange = {() => setCountingCards(false)}\n                />\n            </Form.Field>\n            <Form.Field>\n                <Radio\n                    label='Basic Strategy and Card Counting'\n                    checked={countingCards}\n                    onChange={() => setCountingCards(true)}\n                />\n            </Form.Field>\n        </Form>\n        \n        </Segment>\n        \n\n    )\n}","import React from \"react\"\n\nimport { Checkbox, Divider, Form, Popup, Radio, Segment } from \"semantic-ui-react\"\n\nimport { Link } from \"react-router-dom\"\n\nexport default function StrategyConsiderations({ useIndeces, setIndeces, countWithIndeces, setCountWithIndeces, ...props }) {\n\n\n    return (\n        <Segment textAlign=\"center\">\n            <Form>\n                <Form.Field>\n                    <Radio\n                        label='Basic Strategy Only'\n                        checked={!useIndeces}\n                        onChange={() => setIndeces(false)}\n                    />\n                </Form.Field>\n                <Form.Field>\n                    <Radio\n                        label='Basic Strategy and Playing Deviations'\n                        checked={useIndeces}\n                        onChange={() => setIndeces(true)}\n                    />\n                </Form.Field>\n            </Form>\n            <Link to=\"/test\">Learn more about playing deviations and index values</Link>\n            <Divider />\n            {useIndeces &&\n                <Checkbox\n                    slider\n                    checked={countWithIndeces}\n                    onClick={() => setCountWithIndeces(!countWithIndeces)}\n                    label={countWithIndeces ? \"Give me the true count when asking me for hand decisions\" : \"Don't give me the true count when asking me for hand decisions\"}\n                />\n            }\n            {useIndeces &&\n                <Popup\n                    position=\"top center\"\n                    trigger={countWithIndeces ? <b>Recommended <Link>(Why?)</Link></b> : <b>Very challenging <Link>(Why?)</Link></b>}\n                >\n                    <Popup.Content>\n                        The underlying simulation makes decisions on hands based on calculating the true count exactly, and rounding to the nearest integer.\n                        When you are prompted for the true count in game, there is leniency in evaluating your answer. (e.g. If the true count is 4, 3 and 5 will\n                        also be considered reasonably good). However, when incorporating index values into your strategy, the \"correct\" move will be based on the simulation-calculated\n                        true count. Thus, for the purpose of really locking down index-incorporated strategy, it will be helpful to know the simulation's calculated true count when making this decision.\n                        (The idea is that if you know the index value strategy forward and back, even a rough estimate of the true count at a real table will pay dividends).\n            </Popup.Content>\n\n                </Popup>\n            }\n\n\n\n\n\n        </Segment>\n\n\n    )\n}","import React from \"react\"\n\nimport { Header, Button, Grid } from \"semantic-ui-react\"\n\nexport default function Difficulty({ difficulty, setDifficulty, ...props }) {\n\n\n    const setPlayerAction = time => {\n        setDifficulty({ ...difficulty, player_action: time })\n    }\n\n    const setDeal = time => {\n        setDifficulty({ ...difficulty, deal: time })\n    }\n\n    const setClear = time => {\n        setDifficulty({ ...difficulty, clear: time })\n    }\n\n    return (\n        <Grid>\n            <SpeedChanger time={difficulty.player_action} setTime={setPlayerAction} header = {\"each CPU's decisions?\"}/>\n            <SpeedChanger time={difficulty.deal} setTime={setDeal} header = {\"each card is dealt?\"}/>\n            <SpeedChanger time={difficulty.clear} setTime={setClear} header = {\"each player's hand is cleared?\"} />\n\n        </Grid>\n    )\n\n\n}\n\nfunction SpeedChanger({ time, setTime, header, ...props }) {\n\n    const handleDecrease = () => {\n        if (time > 250) {\n            setTime(time - 250)\n        }\n    }\n    const handleIncrease = () => {\n        setTime(time + 250)\n    }\n\n    const pluralize = () => {\n\n        if (time / 1000 === 1) {\n            return \"\"\n        }\n        return \"s\"\n    }\n\n    return (\n        <Grid.Column width={16} textAlign=\"center\">\n            <Header as=\"h5\" className = \"white button-header\">{header} </Header>\n            <Button.Group>\n                <Button icon=\"minus\" color=\"red\" onClick={handleDecrease} />\n                <Button>{time / 1000 + \" second\" + pluralize()}</Button>\n                <Button icon=\"plus\" color=\"green\" onClick={handleIncrease} />\n            </Button.Group>\n        </Grid.Column>\n\n    )\n\n}","import React from \"react\"\n\nimport {Container, Divider} from \"semantic-ui-react\"\n\nexport default function SectionDivider({separations, ...props}) {\n    \n    const placeholder = () => {\n        const arr = []\n        for (var i = 0; i < separations; i++) {\n            arr.push(i)\n        }\n        return arr\n    }\n\n    return (\n        <Container fluid>\n            {placeholder().map(index => {\n                \n                return  (\n                  <Divider hidden key = {index}/>  \n                )\n                \n            })}\n        </Container>\n    )\n\n}","import PlayerHand from \"../PlayerHand\"\n\nclass Player {\n\n    constructor(DecisionMaker) {\n        this.DecisionMaker = DecisionMaker\n        this.hands = [];\n    }\n\n    isDone() {\n        for (const hand of this.hands) {\n            if (!hand.isDone()) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    getHands() {\n        return this.hands\n    }\n\n    hitHand(hand, card) {\n        hand.addCard(card)\n    }\n\n    dealCard(card) {\n        if (!this.hands[0]) {\n            this.hands.push(new PlayerHand(card))\n        } else {\n            this.hands[0].addCard(card)\n        } \n    }\n\n    splitHand(hand) {\n        const [card1, card2] = hand.cards\n        var index = this.hands.indexOf(hand)\n        var newHand1 = new PlayerHand(card1)\n        newHand1.setSplit()\n        var newHand2 = new PlayerHand(card2)\n        newHand1.setSplit()\n        this.hands.splice(index, 1, newHand1, newHand2)\n    }\n\n    makeProperDecision(hand, dealerHand, trueCount) {\n        // console.log(dealerHand)\n        return this.DecisionMaker.properMove(hand, this.hands.length, dealerHand, trueCount)\n    }\n\n    clearHand() {\n        this.hands = []\n    }\n\n}\n\nexport default Player\n","const hardTotals = require(\"../strategyJSON/hardTotals.json\")\nconst softTotals = require(\"../strategyJSON/softTotals.json\")\nconst splits = require(\"../strategyJSON/splits.json\")\nconst surrenders = require(\"../strategyJSON/surrender.json\")\nconst strategyDeviations = require(\"../strategyJSON/strategyDeviations.json\")\nconst surrenderDeviations = require(\"../strategyJSON/surrenderDeviations.json\")\nconst key = require(\"../strategyJSON/key.json\")\n\nconst Card = require(\"../Card\")\nconst PlayerHand = require(\"../PlayerHand\")\nconst DealerHand = require(\"../DealerHand\")\nconst Shoe = require(\"../Shoe\")\n\nclass DecisionMaker {\n\n    constructor(canSurrender, canDAS, h17, considerIndices) {\n\n        this.canSurrender = canSurrender;\n        this.canDAS = canDAS;\n        this.h17 = h17;\n        this.considerIndices = considerIndices;\n\n    }\n\n    properMove(playerHand, playerHandCount, dealerHand, trueCount) {\n        if (this.canSurrender) {\n            return this.evaluateSurrender(playerHand, playerHandCount, dealerHand, trueCount)\n        } else if (this.considerIndices) {\n            return this.evaluateIndices(playerHand, playerHandCount, dealerHand, trueCount)\n        }\n        return this.evaluateBasicStrategy(playerHand, playerHandCount, dealerHand)\n    }\n\n    evaluateBasicStrategy(playerHand, playerHandCount, dealerHand) {\n\n        var playerRepresentation = playerHand.handRepresentation()\n        var dealerUpcard = dealerHand.getUpcard()\n\n        if (playerHand.cards.length === 1) {\n            return \"H\"\n        }\n        if (playerRepresentation === \"bust\") {\n            return \"bust\"\n        }\n        if (playerRepresentation in hardTotals) {\n            var decision = hardTotals[playerRepresentation][dealerUpcard]\n            if (decision === \"D\") {\n                if (playerHand.cardCount() === 2) {\n                    return \"D\"\n                }\n                return \"H\"\n            }\n            return decision\n        } else if (playerRepresentation in softTotals) {\n            var decision = softTotals[playerRepresentation][dealerUpcard]\n            if (decision === \"D\") {\n                if (playerHand.cardCount() === 2) {\n                    return \"D\"\n                }\n                return \"H\"\n            } else if (decision === \"DS\") {\n                if (playerHand.cardCount() === 2) {\n                    return \"D\"\n                }\n                return \"S\"\n            }\n            return decision\n        } else if (playerHand.canBeSplit()) {\n            var decision = splits[playerRepresentation][dealerUpcard]\n            if (decision === \"DSP\" || (decision === \"DAS\" && !this.canDAS)) {\n                var adjustedRepresntation = playerHand.adjustRepresentationForDAS()\n                return hardTotals[adjustedRepresntation][dealerUpcard]\n            } else if (decision === \"DAS\") {\n                return \"D\"\n            } else if (decision === \"SP\" && playerHandCount === 3) {\n                var adjustedRepresntation = playerHand.adjustRepresentationForDAS()\n                if (adjustedRepresntation in hardTotals) {\n                    return hardTotals[adjustedRepresntation][dealerUpcard]\n                } else if (adjustedRepresntation in softTotals) {\n                    return softTotals[adjustedRepresntation][dealerUpcard]\n                }\n\n            } else {\n                return decision\n            }\n        } else {\n            throw new Error(`There is no basic strategy associated with the representation ${this.playerRepresentation}`)\n        }\n    }\n\n    evaluateSurrender(playerHand, playerHandCount, dealerHand, trueCount) {\n\n\n        var playerRepresentation = playerHand.handRepresentation()\n        var dealerUpcard = dealerHand.getUpcard()\n\n        if (playerHand.cardCount() === 2) {\n            if (playerRepresentation in surrenders) {\n                if (surrenders[playerRepresentation].includes(dealerUpcard)) {\n                    return \"SURR\"\n                }\n            }\n        }\n\n        if (this.considerIndices) {\n            return this.evaluateIndices(playerHand, playerHandCount, dealerHand, trueCount)\n        }\n        return this.evaluateBasicStrategy(playerHand, playerHandCount, dealerHand)\n    }\n\n    evaluateIndices(playerHand, playerHandCount, dealerHand, trueCount) {\n\n        var playerRepresentation = playerHand.handRepresentation()\n        var dealerUpcard = dealerHand.getUpcard()\n        var key = playerRepresentation + \",\" + dealerUpcard\n\n        if (dealerUpcard === \"A\" && trueCount >= 3 && !playerHand.hasEvaluatedInsurance()) {\n            return \"INS\"\n        }\n\n        if (this.canSurrender) {\n\n            var surrenders;\n\n            if (this.h17) {\n                surrenders = surrenderDeviations[\"h17\"]\n            } else {\n                surrenders = surrenderDeviations[\"s17\"]\n            }\n\n            if (key in surrenders) {\n                var index = surrenders[key][\"index\"]\n                var higher = surrenders[key][\"higher\"]\n\n                if (trueCount >= index) {\n                    return higher;\n                }\n            }\n        }\n\n        var deviations;\n\n        if (this.h17) {\n            deviations = strategyDeviations[\"h17\"]\n        } else {\n            deviations = strategyDeviations[\"s17\"]\n        }\n\n        if (playerHand.canBeSplit()) {\n            if ((!this.canDAS && playerHandCount > 1) || (playerHandCount === 3)) {\n                playerRepresentation = playerHand.adjustRepresentationForDAS()\n            }\n        }\n\n        if (key in deviations) {\n            var index = deviations[key][\"index\"]\n            var higher = deviations[key][\"higher\"]\n            var lower = deviations[key][\"lower\"]\n\n            if (trueCount >= index) {\n                return higher;\n            } else {\n                return lower;\n            }\n        }\n\n\n        return this.evaluateBasicStrategy(playerHand, playerHandCount, dealerHand)\n    }\n}\n\n\nexport default DecisionMaker\n\n\n","import Shoe from \"../Shoe\"\nimport DealerHand from \"../DealerHand\"\nimport PlayerHand from \"../PlayerHand\"\nimport Player from \"../Player\"\nimport Dealer from \"../Dealer\"\nimport DecisionMaker from \"../DecisionMaker\"\n\nconst _ = require(\"lodash\")\n\n\nconst defaultRules = {\n    canSurrender: false,\n    canDAS: true\n}\n\nclass TrainingGame {\n\n    // The activePlayerTrigger function takes in two arguments \n\n    constructor(numPlayers, numDecks, ruleOptions = defaultRules, considerIndices = false) {\n        this.numPlayers = numPlayers;\n        this.numDecks = numDecks\n        this.canSurrender = ruleOptions.canSurrender;\n        this.canDAS = ruleOptions.canDAS;\n        this.h17 = ruleOptions.h17;\n        this.considerIndices = considerIndices\n\n        this.shoe = new Shoe(this.numDecks)\n        this.playerDecisionMaker = new DecisionMaker(this.canSurrender, this.canDAS, this.h17, this.considerIndices)\n\n        this.activePlayerIndex = this.randomActiveIndex()\n        // this.activePlayerIndex = 5 // Can comment out for testing\n\n        this.gameHistory = []\n\n        this.players = this.createPlayerOrder()\n        this.dealer = new Dealer(this.h17)\n\n        this.playGame()\n\n\n    }\n\n    // Returns general information about the game\n\n    createNewGame() {\n        return new TrainingGame(this.numPlayers, this.numDecks, { canSurrender: this.canSurrender, canDAS: this.canDAS }, this.considerIndices)\n    }\n\n    seePlayerHands() {\n        console.log(\"Player Hands:\")\n        console.log(this.players.map(playerObj => playerObj.player.getHands().map(hand => hand.cards)))\n    }\n\n    seeDealerHand() {\n        console.log(\"Dealer Hand:\")\n        console.log(this.dealer.hand.cards)\n    }\n\n    getActivePlayerIndex() {\n        return this.activePlayerIndex\n    }\n\n    getPlayers() {\n        return this.players\n    }\n\n    getDealer() {\n        return this.dealer;\n    }\n\n    // Functions which give information on the shoe\n    getTrueCount() {\n        return this.shoe.getTrueCount()\n    }\n\n    getRunningCount() {\n        return this.shoe.getRunningCount()\n    }\n\n    getDecksRemainings() {\n        return this.shoe.estimateRemainingDecks()\n    }\n\n    getTotalDecks() {\n        return this.numDecks\n    }\n\n    nextCard(isUpcard) {\n\n        const card = this.shoe.dealCard(isUpcard)\n        return card\n    }\n\n    getCardsRemining() {\n        return this.shoe.numCardsRemaining()\n    }\n\n    consideringIndices() {\n        return this.considerIndices\n    }\n\n    // Creates a random order of players to deal to\n\n    randomActiveIndex() {\n        return Math.floor(Math.random() * this.numPlayers)\n    }\n\n\n    createPlayerOrder() {\n        const players = []\n\n        for (var i = 0; i < this.numPlayers; i++) {\n            players.push({ id: i, player: new Player(this.playerDecisionMaker) })\n        }\n        return players\n    }\n\n    // Functions which handle the dealing of cards at the beginning of each round\n\n    playGame() {\n        while (this.getCardsRemining() > (this.numPlayers + 1) * 5) {\n            this.playRound()\n        }\n    }\n\n    playRound() {\n        this.dealStartingCards()\n        for (const { player, id } of this.players) {\n            this.attendToPlayer(player, id)\n        }\n        this.attendToDealer()\n        this.clearAllHands()\n    }\n\n    updateHistory(action, playerId) {\n        const history = { action: action, playerId: playerId }\n        history[\"dealerHand\"] = _.cloneDeep(this.dealer.getHand())\n        history[\"trueCount\"] = this.getTrueCount()\n        history[\"decksRemaining\"] = this.getDecksRemainings()\n        history[\"runningCount\"] = this.getRunningCount()\n\n        for (const { player, id } of this.players) {\n            history[id] = _.cloneDeep(player.getHands());\n        }\n        this.gameHistory.push(history)\n    }\n\n    getHistory() {\n        return this.gameHistory\n    }\n\n    printHistory() {\n        this.gameHistory.map(event => {\n            console.log(event)\n            event[\"0\"].map(hand => console.log(hand.cards))\n            event[\"1\"].map(hand => console.log(hand.cards))\n            event[\"2\"].map(hand => console.log(hand.cards))\n            console.log(\"------------------------------------------\")\n        })\n    }\n\n    dealStartingCards() {\n        for (const { player, id } of this.players) {\n            this.dealToPlayer(player, id)\n        }\n        this.dealToDealer(false)\n        for (const { player, id } of this.players) {\n            this.dealToPlayer(player, id)\n        }\n        this.dealToDealer()\n    }\n\n    dealToPlayer(player, id) {\n        player.dealCard(this.nextCard())\n        this.updateHistory(\"deal\", id)\n    }\n\n    hitPlayer(player, hand, id) {\n        player.hitHand(hand, this.nextCard())\n        this.updateHistory(\"hit\", id)\n    }\n\n    playerBust(hand, id) {\n        hand.setBust()\n        hand.setDone()\n        this.updateHistory(\"bust\", id)\n    }\n    playerStay(hand, id) {\n        hand.setDone()\n        this.updateHistory(\"stay\", id)\n    }\n\n    doubleDownPlayer(player, hand, id) {\n        player.hitHand(hand, this.nextCard())\n        hand.setDone()\n        this.updateHistory(\"double\", id)\n    }\n\n    surrenderPlayer(hand, id) {\n        hand.setDone()\n        this.updateHistory(\"surrender\", id)\n\n    }\n\n    handlePlayerBlackjack(hand, id) {\n        hand.setDone()\n        this.updateHistory(\"blackjack\", id)\n    }\n\n    handlePlayerInsurance(hand, id) {\n        hand.setDone()\n        hand.evaluateInsurance()\n        this.updateHistory(\"insurance\", id)\n    }\n\n    handlePlayerBlackjackInsurance(takingInsurance, hand, id) {\n        hand.setDone()\n        hand.evaluateInsurance()\n        if (takingInsurance) {\n          this.updateHistory(\"blackjack-insurance\", id)  \n        } else {\n            this.updateHistory(\"blackjack-no-insurance\", id)  \n        }\n        \n    }\n\n    hitDealer() {\n        this.dealer.hit(this.nextCard())\n        this.updateHistory(\"hit\", \"d\")\n    }\n\n    stayDealer() {\n        this.dealer.stay()\n        this.updateHistory(\"stay\", \"d\")\n    }\n\n    dealToDealer(isUpcard = true) {\n        this.dealer.dealCard(this.nextCard(isUpcard))\n        this.updateHistory(\"deal\", \"d\")\n    }\n\n    allPlayersBust() {\n        this.dealer.setDone()\n        this.updateHistory(\"stay\", \"d\")\n    }\n\n    flipDealerCards() {\n        this.dealer.flipCards()\n        this.shoe.updateFlippedCard(this.dealer.hand.getDowncard())\n        this.updateHistory(\"flip\", \"d\")\n    }\n\n    splitPlayerHand(player, hand, id) {\n        player.splitHand(hand)\n        this.updateHistory(\"split\", id)\n        this.attendToPlayer(player, id)\n    }\n\n    clearHand(player, id) {\n        player.clearHand()\n        this.updateHistory(\"clear\", id)\n    }\n\n    clearDealerHand() {\n        this.dealer.clearHand()\n        this.updateHistory(\"clear\", \"d\")\n    }\n\n    clearAllHands() {\n\n        this.clearDealerHand()\n        for (const { player, id } of this.players) {\n            this.clearHand(player, id)\n        }\n\n    }\n\n\n    // Functions which handle with playing rounds\n    attendToPlayer(player, id) {\n\n        var playerAndHandToSplit = null\n\n        for (const hand of player.getHands()) {\n\n            if (hand.isDone()) {\n                continue;\n            }\n            var finished = false\n\n            while (!finished) {\n\n                const decision = player.makeProperDecision(hand, this.dealer.getHand(), this.getTrueCount())\n                \n                if (hand.isBlackjack()) {\n                    if (decision === \"INS\") {\n                        this.handlePlayerBlackjackInsurance(true, hand, id)\n                    } else if (this.dealer.getHand().getUpcard() === \"A\") {\n                        this.handlePlayerBlackjackInsurance(false, hand, id)\n                    }\n                    else {\n                        this.handlePlayerBlackjack(hand, id)\n                    }\n                    finished = true\n                } else if (decision === \"INS\") {\n                    this.handlePlayerInsurance(hand, id)\n                } else if (decision === \"SURR\") {\n                    this.surrenderPlayer(hand, id);\n                    finished = true;\n                } else if (decision === \"S\") {\n                    this.playerStay(hand, id)\n                    finished = true;\n                } else if (decision === \"bust\") {\n                    this.playerBust(hand, id)\n                    finished = true;\n                } else if (decision === \"H\") {\n                    this.hitPlayer(player, hand, id)\n                } else if (decision === \"D\") {\n                    this.doubleDownPlayer(player, hand, id)\n                    finished = true;\n                } else if (decision === \"SP\") {\n                    playerAndHandToSplit = [player, hand, id]\n                    finished = true;\n                }\n            }\n        }\n        if (playerAndHandToSplit) {\n            this.splitPlayerHand(...playerAndHandToSplit)\n        }\n    }\n\n\n    attendToDealer() {\n        this.flipDealerCards()\n\n        var dealerMustPlay = false\n\n        for (const hand of this.getAllPlayerHands()) {\n            if (!(hand.isBust() || hand.isBlackjack())) {\n                dealerMustPlay = true;\n            }\n        }\n\n        if (!dealerMustPlay) {\n            this.allPlayersBust()\n            return\n        }\n\n        var finished = false;\n        while (!finished) {\n            var nextAction = this.dealer.nextAction()\n            if (nextAction === \"H\") {\n                this.hitDealer()\n            } else if (nextAction === \"S\") {\n                finished = true;\n            } else {\n                throw new Error(\"The dealer action was something other than H or S\")\n            }\n        }\n    }\n\n    getAllPlayerHands() {\n        const allHands = []\n        for (const { player } of this.players) {\n            for (const hand of player.getHands()) {\n                allHands.push(hand)\n            }\n        }\n        return allHands\n    }\n\n\n\n}\n\nexport default TrainingGame\n","import React, { useState } from 'react'\n\nimport { useGameContext} from \"../GlobalStates/GameState\"\nimport { CLEAR_GAME, SET_DIFFICULTY, SET_GAME, SET_RULES, SHOW_COUNT  } from \"../GlobalStates/GameState/action\"\n\nimport { useQuestionContext } from \"../GlobalStates/QuestionState\"\nimport {  QUESTION_RESET, SET_FREQUENCIES} from \"../GlobalStates/QuestionState/action\"\n\nimport PlayerCount from \"./PlayerCount\"\nimport DeckCount from \"./DeckCount\"\nimport Rules from \"./Rules\"\nimport Goal from \"./Goal\"\nimport StrategyConsiderations from \"./StrategyConsiderations\"\nimport Difficulty from \"./Difficulty\"\nimport Frequency from \"./Frequency\"\n\n\nimport InfoPopup from \"../Components/InfoPopup\"\nimport SectionDivider from \"../Components/SectionDivider\"\n\nimport Game from \"../../utils/GameUtils/Game\"\n\nimport { Grid, Segment, Header, Image, Divider, Button } from 'semantic-ui-react'\n\nimport \"./style.css\"\n\n\nexport default function GameSetup({ ...props }) {\n\n    const [questionState, questionDispatch] = useQuestionContext()\n    const [gameState, gameDispatch] = useGameContext()\n\n    const [numPlayers, setNumPlayers] = useState(1)\n    const [numDecks, setNumDecks] = useState(6)\n    const [rules, setRules] = useState({ canDAS: true, canSurrender: false, h17: true })\n    const [useIndices, setIndices] = useState(false)\n    const [countWithIndeces, setCountWithIndeces] = useState(true)\n    const [countingCards, setCountingCards] = useState(false)\n\n    const [difficulty, setDifficulty] = useState(gameState.difficulty)\n\n    const [frequency, setFrequency] = useState({\n        askTrueCount: .3,\n        askRunningCount: .3,\n        askDecksRemaining: .3\n    })\n\n    \n\n    const startGame = () => {\n\n        questionDispatch({type: QUESTION_RESET})\n        gameDispatch({type: CLEAR_GAME})\n\n        var considerIndices;\n\n        if (countingCards) {\n\n           questionDispatch({type: SET_FREQUENCIES, frequencies: frequency}) \n           gameDispatch({type: SET_DIFFICULTY, difficulty: difficulty})\n           gameDispatch({type: SHOW_COUNT, countWithIndeces: countWithIndeces})\n           \n           considerIndices = useIndices\n        } else {\n            considerIndices = false\n        }\n\n        gameDispatch({type: SET_RULES, rules: rules})\n\n\n        var game = new Game(numPlayers, numDecks, rules, considerIndices)\n        \n        while (!game.getHistory().map(item => item.action).includes(\"split\")) {\n            game = new Game(numPlayers, numDecks, rules, considerIndices)\n        }\n        \n        gameDispatch({type: SET_GAME, game: game})\n\n        \n    \n    }\n\n    return (\n        <Grid centered className=\"overflow\">\n\n\n            <Grid.Column width={16} textAlign = \"center\">\n                <Segment basic >\n                    <Header size=\"huge\" className=\"sunrise white\" >\n                        <Image size=\"large\" src=\"/images/logo.png\" /> Game Settings <Image size=\"large\" src=\"/images/logo.png\" />\n                    </Header>\n                </Segment>\n            </Grid.Column>\n\n\n\n\n            <Grid.Column computer = {5} tablet = {5} mobile = {16} className=\"overflow\">\n                <Divider horizontal className=\"white\">Players and Decks</Divider>\n                <Grid centered>\n                    <Grid.Column computer = {16} tablet = {16} mobile = {8} textAlign=\"center\">\n                        <Header as=\"h3\" className=\"sunrise white\">\n                            Choose the number of players at the table\n                            </Header>\n                        <PlayerCount numPlayers={numPlayers} setNumPlayers={setNumPlayers} />\n                    </Grid.Column>\n                    <Grid.Column computer = {16} tablet = {16} mobile = {8}  textAlign=\"center\">\n                        <Header as=\"h3\" className=\"sunrise white\">\n                            Choose number of decks in the shoe\n                            </Header>\n                        <DeckCount numDecks={numDecks} setNumDecks={setNumDecks} />\n                    </Grid.Column>\n                </Grid>\n\n                <SectionDivider separations={2} />\n\n                <Divider horizontal className=\"white\"> Game Rules</Divider>\n                <Grid centered >\n                    <Grid.Column mobile = {10} tablet = {16} textAlign=\"center\">\n                        <Header as=\"h3\" className=\"sunrise white\">\n                            Choose the game rules <InfoPopup content={\"Different blackjack tables have different rules. The rules of the game will affect your best move during the game.\"} />\n                        </Header>\n                        <Rules rules={rules} setRules={setRules} />\n                    </Grid.Column>\n\n                </Grid>\n\n\n\n            </Grid.Column>\n            <Grid.Column computer = {5} tablet = {5} mobile = {16} className=\"overflow\" textAlign=\"center\">\n                <Divider horizontal className=\"white\">Goal</Divider>\n                <Grid centered>\n                    <Grid.Column width={16} textAlign=\"center\" >\n                        <Header as=\"h3\" className=\"sunrise white\">\n                            What's your goal?\n                            </Header>\n                        <Goal countingCards={countingCards} setCountingCards={setCountingCards} />\n                    </Grid.Column>\n                </Grid>\n                {countingCards && <SectionDivider separations={1} />}\n                {countingCards &&\n                    <Divider horizontal className=\"white\">Strategy</Divider>}\n                {countingCards &&\n                    <Grid centered>\n                        <Grid.Column width={16} textAlign=\"center\" >\n                            <Header as=\"h3\" className=\"sunrise white\">\n                                Choose your strategy considerations <InfoPopup content={\"Index values provide a guideline for deviating from basic strategy based on the true count. You can choose to play your game based solely on basic strategy, or also with consideration to index values.\"} />\n                            </Header>\n                            <StrategyConsiderations useIndeces={useIndices} setIndeces={setIndices} countWithIndeces = {countWithIndeces} setCountWithIndeces = {setCountWithIndeces}/>\n                        </Grid.Column>\n                    </Grid>\n                }\n\n                <SectionDivider separations = {1}/>\n                <Button size = \"massive\" inverted className = \"white\" onClick={startGame}>Play Game</Button>\n\n            </Grid.Column>\n            {countingCards ?\n                <Grid.Column computer = {5} tablet = {5} mobile = {16}  textAlign=\"center\" className=\"overflow\">\n\n                    <Divider horizontal className=\"white\">Card Counting Parameters</Divider>\n\n                    <Grid className = \"overflow right-column\">\n                        <Grid.Column width={16}>\n\n\n                            <Header as=\"h3\" className=\"sunrise white\">\n                                <InfoPopup content={\"The quicker you can update the count when you are counting cards, the better. Here, you can set control the speed of the game by setting the amount of time between different actions in the game. As you improve your game, you can decrease these times and practice counting faster!\"} />\n                        How much time between...\n                            </Header>\n                            <Difficulty difficulty={difficulty} setDifficulty={setDifficulty} />\n                       \n\n                        \n                            <Header as=\"h3\" className=\"sunrise white\">\n                                <InfoPopup content={\"Throughout the game, you will be prompted for quantities related to card counting (i.e. the running count, an estimate for the number of decks remaining, and the true count). These prompts will help you track the count, and the more often they are asked, the easier the game is. The lower the numbers below are, the more of a challenge the game will be.\"} />\n                        On what percent of hands should you be prompted for...\n                            </Header>\n                            <Frequency frequencies={frequency} setFrequency={setFrequency} />\n                        </Grid.Column>\n                    </Grid>\n\n\n\n\n                </Grid.Column> :\n                <Grid.Column computer = {5} tablet = {5} mobile = {16} >\n\n                </Grid.Column>\n            }\n\n\n\n\n\n\n        </Grid>\n\n\n\n        // \n        // <Frequency frequencies={frequency} setFrequency={setFrequency} />\n\n\n    )\n\n\n}","import Axios from \"axios\"\n\nconst GameAPI = {\n\n    saveGame(numDecks, numPlayers, stats, rules, playingDeviations) {\n        return Axios({\n            method: \"POST\",\n            url: \"/api/game/save\",\n            data: { numDecks: numDecks, numPlayers: numPlayers, rules: rules, stats: stats, playingDeviations: playingDeviations }\n        }).then(response => {\n            return response.data\n        })\n    },\n\n    getAllGameStats() {\n        return Axios({\n            method: \"GET\",\n            url: \"/api/game/stats\"\n        }).then(response => {\n            return response.data\n        })\n    }\n\n}\n\nexport default GameAPI\n\n\n","import React from \"react\"\n\nimport ReactLoading from \"react-loading\"\n\nimport \"./style.css\"\n\nexport default function Loader({color, type, width, height, ...props}) {\n\n    \n\n    var color = color || \"#0E6EB8\"\n    var type = type || \"bubbles\"\n    var width = width || 64\n    var height = height || 64\n    \n    console.log(color)\n\n    return (\n        <div>\n        <ReactLoading color = {color} type ={type} className = {\"center \" + props.className} {...props} width = {width} height = {height}/>\n        </div>\n    )\n}","import React from \"react\"\n\nimport Hand from \"../../../Game/Components/Hand\"\n\nimport { Grid, Button, Header, Segment, Divider } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nexport default function HandDisplay({ playerHand, dealerHand, getNextPlay, getPrevPlay, trueCount, correctDecision, playerDecision, ...props }) {\n\n    return (\n        <Grid centered verticalAlign=\"middle\">\n\n            <DecisionAttribute header=\"True Count\" value={trueCount} />\n            <DecisionAttribute header=\"Correct Decision\" value={correctDecision} />\n            <DecisionAttribute header=\"Player's Decision\" value={playerDecision} incorrect={playerDecision !== correctDecision} />\n\n            <Grid.Column width = {2}>\n                <Button icon=\"angle double left\" floated=\"right\" onClick={getPrevPlay} />\n            </Grid.Column>\n\n            <Grid.Column computer={6} tablet={6} mobile={6} textAlign=\"center\">\n\n                <Hand active={false} hand={dealerHand} centered={true} />\n            </Grid.Column>\n\n            <Grid.Column computer={6} tablet={6} mobile={6} textAlign=\"center\">\n                <Hand active={false} hand={playerHand} centered={true} />\n            </Grid.Column>\n\n            <Grid.Column width={2}>\n                \n                <Button icon=\"angle double right\" floated=\"left\" onClick={getNextPlay} />\n            </Grid.Column>\n        </Grid>\n    )\n\n}\n\nfunction DecisionAttribute({ header, value, incorrect, ...props }) {\n    return (\n        <Grid.Column textAlign=\"center\" width={5}>\n\n            <Header as=\"h3\" className=\"white sunrise decision-header\">{header}</Header>\n            <Button size=\"mini\" color={incorrect ? \"red\" : \"green\"}>{value}</Button>\n\n\n        </Grid.Column>\n    )\n\n\n}","import React from \"react\"\n\nimport {Header, Segment, Grid, Divider} from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nexport default function RuleDisplay({canDAS, canSurrender, h17, playingDeviations, ...props}) {\n\n    return (\n        <Grid centered>\n            <Grid.Column width = {16} textAlign=\"center\" verticalAlign=\"middle\">\n                <Header className=\"sunrise white\" as = \"h1\">Reminder of game rules...</Header>\n\n                <Header className=\"white rule\" as = \"h5\">\n                    {canDAS ? \n                        \"Doubling down after splitting was allowed.\" :\n                        \"Doubling down after splitting is not allowed.\"\n                    }\n                </Header>\n                <Header className=\"white rule\" as = \"h5\">\n                    {canSurrender ? \n                        \"Surrendering was allowed.\" :\n                        \"Surrendering was not allowed.\"\n                    }\n                </Header>\n                <Header className=\"white rule\" as = \"h5\">\n                    {h17 ? \n                        \"The dealer had to hit on soft 17.\" :\n                        \"The dealer had to stay on soft 17.\"\n                    }\n                </Header>\n                <Divider horizontal className=\"white\"/>\n                <Header className=\"white rule\" as = \"h5\">\n                    {playingDeviations ? \n                        \"This game incorporated basic strategy and playing deviations.\" :\n                        \"This game incorporated only basic strategy without playing deviations.\"\n                    }\n                </Header>\n            </Grid.Column>\n        </Grid>\n    )\n\n}","import Card from \"../../utils/GameUtils/Card\"\nimport PlayerHand from \"../../utils/GameUtils/PlayerHand\"\n\nconst Helper = {\n\n    assemblePlays(playingStats) {\n        console.log(playingStats)\n        const assembledPlays = [];\n        for (const stat of playingStats) {\n            var playerCards = stat.playerCards.split(\",\").map(cardRep => this.cardFromRep(cardRep))\n            var playerHand = new PlayerHand(...playerCards)\n            var dealerUpcard = this.cardFromRep(stat.dealerUpcard)\n            var dealerDowncard = new Card(\"9\", \"9\", \"H\")\n            dealerDowncard.flipDown()\n            var dealerHand = new PlayerHand(dealerDowncard, dealerUpcard)\n            var correctDecision= this.formatDecision(stat.correctDecision);\n            var playerDecision = this.formatDecision(stat.playerDecision)\n            assembledPlays.push({playerHand: playerHand, dealerHand: dealerHand, trueCount: stat.trueCount, correctDecision: correctDecision, playerDecision: playerDecision})\n        }\n\n        return assembledPlays\n    },\n\n    cardFromRep(cardRep) {\n        if (cardRep.length === 2) {\n            return new Card(cardRep[0], \"\", cardRep[1])\n        } else if (cardRep.length === 3) {\n            return new Card(cardRep[0] + cardRep[1], \"\", cardRep[2])\n        } else {\n            throw new Error(\"Cannot handle card representation: \" + cardRep)\n        }\n    },\n\n    formatDecision(decision) {\n        switch (decision) {\n            case \"hit\":\n                return \"Hit\";\n            case \"stay\":\n                return \"Stay\";\n            case \"blackjack-insurance\":\n                return \"Insurance\";\n            case \"blackjack-no-insurance\":\n                return \"No Insurance\";\n            case \"insurance\":\n                return \"Insurance\"\n            case \"double\":\n                return \"Double Down\";\n            case \"surrender\":\n                return \"Surrender\"\n            default:\n                throw new Error(\"Cannot handle following action: \" + decision)\n        }\n    }\n\n}\n\nexport default Helper","import React, { useEffect, useState } from \"react\"\n\nimport { Container, Grid, Button, Image, Header, Divider, Icon } from \"semantic-ui-react\"\n\nimport HandDisplay from \"./HandDisplay\"\nimport RuleDisplay from \"./RuleDisplay\"\nimport StatDisplay from \"./StatDisplay\"\n\nimport Helper from \"./helper\"\n\nexport default function PlayingStats({ gameInfo, restartGame, newGame, ...props }) {\n\n    const [plays, setPlays] = useState()\n    const [activePlayIndex, setActivePlayIndex] = useState()\n\n    useEffect(() => {\n        if (gameInfo.playingStats.length > 0) {\n            const assembledPlays = Helper.assemblePlays(gameInfo.playingStats)\n            console.log(assembledPlays)\n            setPlays(assembledPlays)\n            if (assembledPlays.length > 0) {\n                setActivePlayIndex(0)\n            }\n        }\n\n    }, [])\n\n    const getNextPlay = () => {\n        var nextIndex = activePlayIndex + 1;\n        if (nextIndex === plays.length) {\n            nextIndex = 0\n        }\n        setActivePlayIndex(nextIndex)\n    }\n\n    const getPrevPlay = () => {\n        var nextIndex = activePlayIndex - 1;\n        if (nextIndex < 0) {\n            nextIndex = plays.length - 1\n        }\n        setActivePlayIndex(nextIndex)\n    }\n\n    return (\n        <Grid centered className=\"overflow\" verticalAlign=\"middle\">\n\n\n            {plays ?\n                <Grid.Column computer={10} tablet={10} mobile={16}>\n                    <HandDisplay\n                        dealerHand={plays[activePlayIndex].dealerHand}\n                        playerHand={plays[activePlayIndex].playerHand}\n                        trueCount={plays[activePlayIndex].trueCount}\n                        correctDecision={plays[activePlayIndex].correctDecision}\n                        playerDecision={plays[activePlayIndex].playerDecision}\n                        getNextPlay={getNextPlay}\n                        getPrevPlay={getPrevPlay}\n                    />\n                </Grid.Column>\n                :\n                <Grid.Column computer={10} tablet={10} mobile={16} textAlign=\"center\">\n                    <Image size=\"small\" src=\"/images/logo.png\" centered />\n                    <Header as=\"h3\" className=\"white\">No faulty decisions to display!</Header>\n                </Grid.Column>\n\n            }\n\n            {plays ?\n                <Grid.Column computer={6} tablet={6} mobile={16}>\n                    <RuleDisplay canDAS={gameInfo.canDAS} canSurrender={gameInfo.canSurrender} h17={gameInfo.h17} playingDeviations={gameInfo.playingDeviations} />\n                </Grid.Column>\n                :\n                null\n            }\n\n\n            <Grid.Column computer={10} tablet={10} mobile={16} textAlign=\"center\">\n                <StatDisplay\n                    runningCountAccuracy={gameInfo.game.runningCountAccuracy}\n                    averageAbsoluteCountError={gameInfo.game.averageAbsoluteCountError}\n                    averageCountError={gameInfo.game.averageCountError}\n                    decisionAccuracy={gameInfo.game.decisionAccuracy}\n                />\n            </Grid.Column>\n\n\n            <Grid.Column computer={6} tablet={6} mobile={16} textAlign=\"center\">\n\n                <Header className=\"sunrise white\" as=\"h1\">Play Again</Header>\n\n                <Button animated=\"vertical\" onClick={restartGame} inverted color=\"black\">\n                    <Button.Content visible>\n                        Same Game Settings\n                    </Button.Content>\n                    <Button.Content hidden>\n                        <Icon name=\"history\" />\n                    </Button.Content>\n                </Button>\n\n                <Divider />\n                <Button animated=\"vertical\" onClick = {newGame} inverted color=\"black\">\n                    <Button.Content visible>New Game Settings</Button.Content>\n                    <Button.Content hidden><Icon name = \"random\" /></Button.Content>\n                </Button>\n                \n            </Grid.Column>\n\n\n\n\n\n        </Grid>\n    )\n}\n","import React, { useEffect, useState } from \"react\"\n\nimport { useGameContext } from \"../GlobalStates/GameState\"\nimport { CLEAR_GAME, GAME_RESET } from \"../GlobalStates/GameState/action\"\n\nimport GameAPI from \"../../utils/APIs/GameAPI\"\n\nimport { Button, Grid, Header, Segment, Container, Icon, Divider} from \"semantic-ui-react\"\nimport Loader from \"../../Components/Loader\"\nimport PlayingStats from \"../../StatDisplays/SingleGame\"\n\nimport \"./style.css\"\n\nexport default function GameFinished({ tempStats, ...props }) {\n\n    const [gameState, gameDispatch] = useGameContext()\n    const [gameInfo, setGameInfo] = useState()\n\n    useEffect(() => {\n        GameAPI.saveGame(gameState.game.numDecks, gameState.game.numPlayers, gameState.player_stats, gameState.rules, gameState.game.considerIndices).then(dbInfo => {\n            setGameInfo(dbInfo)\n        })\n        // setGameInfo(tempStats)\n    }, [])\n\n    const restartGame = () => {\n\n        const newGame = gameState.game.createNewGame()\n        gameDispatch({ type: GAME_RESET, game: newGame })\n    }\n\n    const newGame = () => {\n        gameDispatch({ type: CLEAR_GAME })\n    }\n\n    const seeStats = () => {\n        gameDispatch({ type: CLEAR_GAME })\n    }\n\n    if (!gameInfo) {\n\n        return (\n            <Container className=\"display\">\n                <Grid centered>\n\n\n                    <Grid.Column computer={16} tablet={16} mobile={16} textAlign=\"center\" verticalAlign=\"middle\">\n                        <Segment textAlign=\"center\" compact basic>\n                            <Loader color=\"white\" type=\"bars\" />\n                            <Header as=\"h3\" color=\"white\">Loading game stats...</Header>\n\n                        </Segment>\n                    </Grid.Column>\n                    <Divider hidden/>\n\n                    <Grid.Column computer={8} tablet={8} mobile={16} textAlign=\"center\">\n\n                        <Button animated=\"vertical\" onClick={restartGame} inverted color=\"black\" floated=\"left\">\n                            <Button.Content visible>\n                                Same Game Settings\n                    </Button.Content>\n                            <Button.Content hidden>\n                                <Icon name=\"history\" />\n                            </Button.Content>\n                        </Button>\n\n                        <Button animated=\"vertical\" onClick={newGame} inverted color=\"black\" floated=\"right\">\n                            <Button.Content visible>New Game Settings</Button.Content>\n                            <Button.Content hidden><Icon name=\"random\" /></Button.Content>\n                        </Button>\n\n\n                    </Grid.Column>\n\n                </Grid>\n            </Container>\n\n        )\n    } else {\n        return (\n            <Container className=\"display\">\n                <Grid verticalAlign=\"middle\" centered>\n\n\n                    <PlayingStats gameInfo={gameInfo}\n                        restartGame={restartGame}\n                        newGame={newGame}\n                    />\n\n                </Grid>\n            </Container>\n\n        )\n    }\n}","import React, { useState, useEffect } from \"react\"\n\n\nimport TableArrangement from \"./TableArrangment\"\n\nimport {useGameContext} from \"./GlobalStates/GameState\"\nimport { EVOLVE_HISTORY, FINISH_GAME, CLEAR_GAME, SET_GAME} from \"./GlobalStates/GameState/action\"\n\nimport GameSetup from \"./GameSetup\"\nimport GameFinished from \"./GameFinished\"\n\nimport GameAPI from \"../utils/APIs/GameAPI\"\n\nexport default function Game({ numPlayers, numDecks,  ...props }) {\n\n    const [gameState, gameDispatch] = useGameContext()\n    const [tempStats, setTempStats] = useState()\n\n    useEffect(() => {\n\n        // Temporary for stat page development\n        // GameAPI.getAllGameStats().then(stats => {\n        //     console.log(stats)\n        //     gameDispatch({type: SET_GAME, game: stats[23].game})\n        //     setTempStats(stats[23])\n        //     gameDispatch({type: FINISH_GAME})\n        // })\n\n        return () => {\n            gameDispatch({type: CLEAR_GAME})\n        }\n    }, [])\n\n\n    const nextMove = () => {\n\n        if (gameState.remaining_history.length === 0) {\n            gameDispatch({type: FINISH_GAME})\n        } else {\n           gameDispatch({type: EVOLVE_HISTORY}) \n        }\n        \n    }\n\n    if (gameState.finished) {\n\n        return (\n            <GameFinished tempStats = {tempStats}/>\n        )\n    }\n\n     else if (gameState.game) {\n        return (\n            // <div></div>\n            <TableArrangement afterEvent = {nextMove}/>    \n        )\n    }\n    else {\n        // return <div></div>\n        return <GameSetup/>\n    }\n}","import React from \"react\"\nimport { Link } from \"react-router-dom\"\n\nimport { Grid, Segment, Header } from \"semantic-ui-react\"\n\nexport default function Forward({ getUrl, ...props }) {\n\n\n    return (\n        <Segment attached=\"bottom\">\n            <Grid centered className=\" overflow\">\n                <Grid.Column computer={16} tablet={16} mobile={16}>\n                    <Segment basic>\n                        Though most players treat it as a game of gambler's change, Blackjack is one of the very few casino games in which\n                        players can give themselves a statistical edge over the house which is significant enough to yield impressive rewards\n                        over time. Counting is portrayed in movies as being the stuff of MIT math geniuses, but it is actually a skill\n                        which anyone can aquire given a half-decent brain and <b>lots</b> of practice.\n                    </Segment>\n                    \n\n                </Grid.Column>\n\n            </Grid>\n\n        </Segment>\n\n\n\n\n    )\n\n}","import React from \"react\"\n\nimport {Image, Segment, Grid, Header, Divider} from \"semantic-ui-react\"\n\nexport default function BasicStrategy({getUrl, ...props}) {\n\n    return (\n        <Segment attached = \"bottom\">\n            <Grid className = \"overflow\">\n                <Grid.Column computer = {10} tablet = {9} mobile = {16} className = \"page-fit overflow\">\n\n                    <Segment basic>\n                        The first step in developing your blackjack gameplay is learning basic strategy. The attached chart shows\n                        the statistically advantageous move for every combination of player and dealer hands for different rule-sets.\n                        Some of these decisions may seem more obvious than others, but each is derived from a statistical analysis of the game.\n                    </Segment>\n                    <Divider/>\n                    <Header as = \"h2\" className = \"sunrise\">Can I just use basic strategy without counting cards?</Header>\n                    <Segment basic>\n                        You're certainly welcome to, but in the long run you won't make any money. A player who never wavers from perfect blackjack player\n                        has at best a -0.5% disadvantage against the dealer. Alone, it won't give a player the certainty of success that card counting can.\n                        However, successful card counting's foundation is a strict knowledge and adherence to this strategy, and so it must be learned.\n                    </Segment>\n                    <Divider />\n                    <Header as = \"h2\" className = \"sunrise\">Do I need to know the entirety of the charts?</Header>\n                    <Segment basic>\n                        Yes. Strategic blackjack is a game of half percents, fractional odds. Basic strategy is only the first part of the game you are trying \n                        to develop. Adding card counting on top will cause more harm than good if you don't have an rock-solid knowledge of the fundamentals.\n                        To be clear, cccasional mistakes are not the end of the world. But, without a doubt, a systemic lack of information on basic strategy will\n                        create holes in your game which are sure to inhibit success.\n                    </Segment>\n\n\n                </Grid.Column>\n                <Grid.Column computer = {6} tablet = {7} mobile = {16} className = \"page-fit overflow\">\n                    <Image src = \"/images/introduction/strategy.png\" fluid/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n\n}","import React from \"react\"\n\nimport {Link} from \"react-router-dom\"\n\nimport { Segment, Grid, Image, Header, Divider } from \"semantic-ui-react\"\n\nexport default function HiLoCounting({ getUrl, ...props }) {\n\n    return (\n        <Segment attached=\"bottom\" textAlign=\"center\">\n            <Grid className=\"overflow page-fit\" centered>\n                <Grid.Column width={16} >\n                    <Grid verticalAlign=\"middle\" reversed=\"computer\" textAlign=\"center\">\n                        <Grid.Column computer = {8} tablet = {10}>\n                            <Image fluid src=\"/images/introduction/hilo.jpeg\" />\n                        </Grid.Column>\n                        <Grid.Column computer={8} tablet = {16} textAlign=\"center\">\n                            <Header as=\"h1\" className=\"sunrise section-header\"> The Hi-Lo Method</Header>\n                            <Segment basic className=\"section-body\">\n                                The Hi-Lo method is one of (if not the) most common method for counting cards.\n                                It keeps things simple while being very effective when executed properly. It works as follows:\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                    <Divider />\n                    <Grid.Column width={16}>\n                        <Segment basic textAlign=\"center\">\n                            <b>1.</b> &nbsp; Before any cards have been dealt, set the <b>running count</b> to zero. <br />\n                            <b>2.</b> &nbsp; As the game is played, adjust the running count with the appearance of each new card:\n\n                    </Segment>\n                    </Grid.Column>\n                    <Grid centered columns={3} verticalAlign=\"middle\">\n                        <Grid.Column textAlign=\"center\">\n                            <Segment color = \"green\" inverted>\n                                <Header as=\"h2\" className=\"sunrise\"><b>2 - 6</b></Header>\n                            +1 to the running count\n                        </Segment>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Segment color=\"grey\" inverted>\n                                <Header as=\"h2\" className=\"sunrise\"><b>7 - 9</b></Header>\n                            No change\n                        </Segment>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"center\">\n                            <Segment color = \"red\" inverted>\n                                <Header as=\"h2\" className=\"sunrise\"><b>10 - A</b></Header>\n                            -1 from the running count\n                        </Segment>\n                        </Grid.Column>\n                        <Grid.Column width={16} style={{paddingTop: \"0\"}}>\n                            <Segment basic textAlign = \"center\">\n                                The idea here is that the more high cards (10 - A) in the shoe,\n                                the more favorable the game is for the player. A very positive running count indicates\n                                that there are more high cards than low cards in the deck, and the next hand favors the players.\n                                A very negative running count indicates the opposite. This allows players to <Link to={getUrl(\"/betting\")}> vary their bets</Link> from hand\n                                to hand.\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n                    <Divider/>\n                    <Grid>\n                        <Grid.Column width = {16} textAlign=\"center\">\n                            <Header as = \"h2\" className = \"sunrise section-header\">The True Count</Header>\n                            <Segment basic style={{ marginTop: \"0px\" }}>\n                                A running count of +6 when there are 6 decks left in the shoe means something different from when there\n                                are only 3 decks remaining. A player is twice as likely to get a high card in the latter scenario. This is why\n                                players keep track of the <b>true count</b> -- estimate by dividing the running count by the number of decks remaining\n                                in the shoe. This value can be estimated (is difficult to know the exact number of decks remaining), but having a reasonable\n                                estimate of the true count is vital for <Link to={getUrl(\"/betting\")}>bet variation</Link> and the use of <Link to={getUrl(\"/index\")}>index values</Link>.\n                            </Segment>\n                        </Grid.Column>\n                    </Grid>\n\n                </Grid.Column>\n\n\n\n            </Grid>\n        </Segment>\n    )\n\n}","import React from \"react\"\n\nimport {Table} from \"semantic-ui-react\"\n\nexport default function BetChart({...props}) {\n\n    return (\n        <Table celled>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell>True Count</Table.HeaderCell>\n                    <Table.HeaderCell>Bet</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n            <Table.Row>\n                <Table.Cell>{\"1 or less\"}</Table.Cell>\n                <Table.Cell>{\"1 unit\"}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n                <Table.Cell>{\"2-10\"}</Table.Cell>\n                <Table.Cell>{\"Bet the same number of units as the true count\"}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n                <Table.Cell>{\"10+\"}</Table.Cell>\n                <Table.Cell>{\"10 units\"}</Table.Cell>\n            </Table.Row>\n            \n        </Table>\n    )\n}","import React from \"react\"\n\nimport { Link } from \"react-router-dom\"\n\nimport { Segment, Grid, Header, Table } from \"semantic-ui-react\"\n\nimport BetChart from \"./BetChart\"\n\nexport default function BettingDeviations({ getUrl, ...props }) {\n\n    return (\n        <Segment attached=\"bottom\">\n            <Grid verticalAlign=\"middle\" className=\"overflow page-fit\">\n                <Grid.Column width={16} textAlign=\"center\">\n                    <Header as=\"h2\" className=\"sunrise section-header\">\n                        Betting Deviations: Gaining an Edge\n                    </Header>\n                    <Segment basic className=\"section-body\">\n                        Once you have the hang of maintaing the count, the first utilization is what is called <b>betting deviations</b>. <Link to={getUrl(\"/hilo\")}>As mentioned</Link>, a\n                        higher true count indicates that the cards to come will favor the player. Thus, when the true count starts to rise, so do your bets. This starts by specifying\n                        your <b>betting unit</b> -- ideally, this amount is 1/1000 of your total bankroll, but it may also be the minimum table bet.\n                        <br /><br />\n                        There are many approaches to varying your bets. The one displayed is simple yet effective, though there are more complicated and profitable ones which are suggested for experienced card-counters. A player employing perfect basic strategy is at a -0.5% disadvantage against the house.\n                        <b>With proper card counting, those odds turn positive toward the player!</b> Betting variation accounts for approximately 60-90% of the profits that a card counter expects.\n                        It is vital to beating the casino at blackjack.\n                    </Segment>\n                </Grid.Column>\n\n                <Grid reversed=\"computer\">\n                    <Grid.Column computer={6} tablet={6} mobile={16} textAlign=\"center\">\n                        <Header as=\"h2\" className=\"sunrise\">\n                            Basic Bet Spread\n                        </Header>\n                        <BetChart />\n\n\n                    </Grid.Column>\n                    <Grid.Column computer={10} tablet={10} mobile={16} verticalAlign=\"middle\" textAlign=\"center\">\n                        <Header as=\"h2\" className=\"sunrise\">\n                            Why are the bets limited?\n                        </Header>\n                        <Grid>\n                            <Grid.Column computer={8} tablet={8} mobile={8}>\n                                <Segment textAlign=\"center\" inverted>\n                                    <Header as=\"h3\" className=\"sunrise\">1. Statistics</Header>\n                                A high true count does not guarantee that the player will win the next hand. The edge of the player over the house with\n                                bet variation is a statistical inevitability over many many hands. If enough blackjack is played, it is also a statistical inevitability\n                                that players will have runs where many consecutive hands are lost when the true count is high. Betting too large can lead to crippling losses.\n                            </Segment>\n                            </Grid.Column>\n                            <Grid.Column computer={8} tablet={8} mobile={8}>\n                                <Segment textAlign=\"center\" inverted>\n                                    <Header as=\"h3\" className=\"sunrise\">2. Unwanted Attention</Header>\n                                    Card counters bet differently than normal players. Standard blackjack players tend to bet bigger after wins and smaller after losses.\n                                    Card counting does not follow this pattern, and casinos know this. Though card counting is not illegal, casinos can ban suspected card counters.\n                                    The bigger your bets, the more attention you draw and the sooner you are likely to be thrown out.\n                                </Segment>\n                            </Grid.Column>\n                        </Grid>\n\n                    </Grid.Column>\n\n                    <Grid.Column width={16} textAlign=\"center\">\n                        <Header as=\"h2\" className=\"sunrise\">\n                            What comes next?\n                        </Header>\n                        <Segment basic>\n                            The next layer to beating blackjack contains what are called <Link to = \"/playing\">playing deviations</Link>. After you have mastered betting variation,\n                            these will elevate your game even further.\n                        </Segment>\n                    </Grid.Column>\n\n\n                </Grid>\n\n\n\n            </Grid>\n\n        </Segment>\n    )\n}","import React from \"react\"\n\nimport { Segment, Grid, Header, Image, Divider} from \"semantic-ui-react\"\n\nexport default function PlayingDeviations({ getUrl, ...props }) {\n\n    return (\n        <Segment attached=\"bottom\">\n            <Grid centered className=\"page-fit overflow\">\n                <Grid.Column width={16} textAlign=\"center\">\n                    <Header as=\"h2\" className=\"sunrise section-header\">Playing Deviations</Header>\n                    <Segment basic className=\"section-body\">\n\n                        Blackjack basic strategy was developed by documenting which decision in each dealer-player head-to-head is statistically favorable over millions of simulated hands.\n                        These simulations were run with no regard to the true count. When these simulations are run and the true count is considered, there are addendums to basic strategy, called <b>playing deviations</b>.\n                        There are true count thresholds above and below which it is favorable to make different strategy decisions. For instance, basic strategy says to never take insurance, but it turns out that taking insurance\n                        is a favorable move if the true count is three or higher. Playing deviations contribute <b>10-40%</b> of the edge that a card counter expects. Though not as much as betting deviations, this is still significant\n                        if you want to really take the house's money.\n                        <br /><br />\n                        There are many many strategy deviations, the better. The training games here do not include them all -- that would be too much to process for early card counters. Instead, below are 22 of the\n                        most \"useful\" deviations (i.e. those of whose awareness will give you the biggest advantage over basic strategy).\n                        <br /><br />\n                        It is <b>highly recommended</b> that you not try to tackle playing deviations before mastering basic strategy. It will be counterproductive to memorize deviations from a strategic foundation that is not\n                        rock solid.\n\n                </Segment>\n                </Grid.Column>\n                \n                <Grid.Column computer={6} tablet={6} mobile={16} textAlign=\"center\" verticalAlign=\"middle\">\n                    \n                    <Segment inverted className=\"section-body\" textAlign=\"center\">\n                    <Header as=\"h2\" className=\"sunrise section-header\">Illustrious 18</Header>\n                        The 18 most valuable deviations are dubbed the \"illustrious 18\".\n                        <br/>\n                        <b>Note: </b> \"h17\" at the bottom of the chart refers to the variation of blackjack where the dealer must hit on a soft 17.\n                        This is in contrast to \"s17\", where the dealer stands on all 17s.\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column computer = {10} tablet = {10} mobile = {16} verticalAlign=\"middle\">\n                    <Image src = \"/images/introduction/illustrious18.png\" fluid/>\n                </Grid.Column>\n                <Grid.Column computer={6} tablet={6} mobile={16} textAlign=\"center\" verticalAlign=\"middle\">\n                    \n                    <Segment inverted className=\"section-body\" textAlign=\"center\">\n                    <Header as=\"h2\" className=\"sunrise section-header\">Fab 4</Header>\n                        The 4 most valuable deviations when regarding surrenders (when they are allowed).\n                        <br/>\n                        <b>Note: </b> \"h17\" at the bottom of the chart refers to the variation of blackjack where the dealer must hit on a soft 17.\n                        This is in contrast to \"s17\", where the dealer stands on all 17s.\n                    </Segment>\n                </Grid.Column>\n                <Grid.Column computer = {10} tablet = {10} mobile = {16} verticalAlign=\"middle\">\n                    <Image src = \"/images/introduction/fab4.png\" fluid/>\n                </Grid.Column>\n                \n\n\n\n            </Grid>\n        </Segment>\n    )\n}","import React, { useEffect, useState } from \"react\"\n\nimport { Route, Switch, Link, useRouteMatch, useLocation, Redirect } from \"react-router-dom\"\n\nimport { Button, Container, Grid, Menu, Segment } from \"semantic-ui-react\"\n\nimport Forward from \"./Forward\"\nimport BasicStrategy from \"./BasicStrategy\"\nimport HiLoCounting from \"./HiLoCounting\"\nimport BettingDeviations from \"./BettingDeviations\"\nimport PlayingDeviations from \"./PlayingDeviations\"\n\n\nimport \"./style.css\"\n\nexport default function Introduction({ ...props }) {\n\n    const [activePage, setActivePage] = useState(\"\")\n\n    let match = useRouteMatch()\n    let loc = useLocation()\n\n    const pagePaths = [\"/forward\", \"/strategy\", \"/hilo\", \"/betting\", \"/playing\"]\n    const pageNames = [\"Forward\", \"Basic Strategy\", \"Hi-Lo Card Counting\", \"Betting Deviations\", \"Playing Deviations\"]\n    const PageComponents = [Forward, BasicStrategy, HiLoCounting, BettingDeviations, PlayingDeviations]\n\n    const getUrl = path => {\n        return match.url + path\n    }\n\n\n\n    useEffect(() => {\n\n        var foundPage = false\n        for (const path of pagePaths) {\n            if (loc.pathname.includes(path)) {\n                foundPage = true;\n                setActivePage(path)\n            }\n        }\n        if (!foundPage) {\n            setActivePage(pagePaths[0])\n        }\n\n    }, [loc])\n\n    return (\n\n        <Container style={{ marginTop: \"5px\", paddingTop: \"5px\" }}>\n            <Menu tabular attached=\"top\" className=\"menu-overflow\">\n                {pagePaths.map((path, index) => {\n                    return (\n                        <Menu.Item \n                            as = {Link}\n                            to = {getUrl(path)}\n                            name = {pageNames[index]}\n                            active = {activePage === path}\n                            onClick = {() => setActivePage(path)}\n                            className = {activePage === path ? \"\" : \"white\"}\n                            key = {index}\n                        />\n                    )\n                })}\n\n            </Menu>\n\n            <Switch>\n\n                {pagePaths.map((path, index) => {\n                    const PageComponent = PageComponents[index]\n                    return (\n                        <Route path = {getUrl(path)} key = {index}>\n                            <PageComponent getUrl = {getUrl} />\n                        </Route>\n                    )\n                })}\n\n                <Route>\n                    <Redirect to = {getUrl(\"/forward\")} />\n                </Route>\n\n            </Switch>\n        </Container>\n    )\n\n}\n","import React from \"react\"\n\nimport { Link } from \"react-router-dom\"\nimport { Grid, Segment, Image, Divider } from \"semantic-ui-react\"\n\n\nexport default function GameParameters({ ...props }) {\n    return (\n        <Grid centered className = \"page-fit overflow\">\n            <Grid.Column width={16}>\n                <Segment basic textAlign=\"center\">\n                    Casinos have different rules regarding blackjack games. Basic strategy varies based on these rules, and you will often want to reference <Link to=\"/intro/strategy\"> the chart which details this variation</Link>. Ideally,\n                    you will come to master basic strategy and playing deviations\n                    for any combination of game rules. However, when you're first learning it may be advantageous to lay the foundation of basic strategy by practicing with a single,\n                    fixed set of rules before adding complexity.\n                </Segment>\n\n            </Grid.Column>\n            <Grid.Column computer={10} tablet={10} mobile={16} textAlign=\"center\" className=\"no-padding\">\n                <Divider/>\n                <Segment basic textAlign=\"center\" className=\"no-top-padding\">\n                    The setup allows to for customization of the game parameters. The number of decks in the game can range anywhere from 1 to 6, and the number of players in the game\n                    can range from 1 (just you) to 4 (you and 3 CPU's). All of the CPU's are programmed to play perfectly strategic under the conditions of each game. Additionally, the rules\n                    can be specified regarding surrendering, doubling down after splitting, and whether or not the dealer must hit on a soft 17.\n                </Segment>\n            </Grid.Column>\n            <Grid.Column computer={6} tablet={6} mobile={10}>\n                <Image src = \"/images/guide/rules.png\" fluid/>\n            </Grid.Column>\n        </Grid>\n    )\n}","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Grid, Segment, Image, Divider } from \"semantic-ui-react\"\n\n\nexport default function StrategyConsiderations({ ...props }) {\n    return (\n        <Grid centered className=\"page-fit overflow\">\n            <Grid.Column width={16}>\n                <Segment textAlign=\"center\" basic>\n                    Because there is a lot of strategy to learn, the simulated games allow you to choose which part(s) of card-counting\n                    you would like to practice. In each case, the \"correct\" decision dictated by the simulation will be based on the mode that you choose.\n                    For example, <Link to=\"/intro/strategy\">basic strategy</Link> dictates that it is never favorable to buy insurance against a dealer ace,\n                    but the first listed <Link to=\"/intro/playing\">playing deviation</Link> indicates that there are true counts for which insurance is an\n                    advantageous side bet.\n                    <Divider hidden />\n                    <b>NOTE: </b> As mentioned in the description of playing deviations, this program only considers 22 of the most important playing deviations -- the so-called\n                    <Link to=\"/intro/playing\">\"Illustrious 18\"</Link> and <Link to=\"/intro/playing\">\"Fab 4\"</Link>. Once you have mastered the simulations offered here,\n                    adding other playing deviations to your arsenal will be easy.\n                    <Divider hidden />\n                    The scaffolded levels of strategy are as follows:\n\n                </Segment>\n            </Grid.Column>\n            <Grid centered className=\"overflow\">\n\n                <Grid.Column computer={5} tablet={16} mobile={16} textAlign=\"center\">\n                    <Grid className=\"no-padding\" verticalAlign=\"middle\">\n                        <Grid.Column computer={16} tablet={8} mobile={8} textAlign=\"center\" verticalAlign=\"middle\">\n                            <Segment inverted>\n                                <b>1. Basic Strategy Only</b>\n                                <br /><br />\n                        For mastering basic strategy before moving on to card-counting. Player's only concern is to learn basic blackjack strategy.\n                    </Segment>\n                        </Grid.Column>\n                        <Grid.Column computer={16} tablet={8} mobile={8}>\n                            <Image fluid src=\"/images/guide/goal1.png\" />\n                        </Grid.Column>\n                    </Grid>\n                </Grid.Column>\n\n                <Grid.Column computer={5} tablet={16} mobile={16} textAlign=\"center\">\n                    <Grid className=\"no-padding\" verticalAlign=\"middle\">\n                        <Grid.Column computer={16} tablet={8} mobile={8} textAlign=\"center\" verticalAlign=\"middle\">\n                            <Segment inverted>\n                                <b>2. Basic Strategy and Card Counting</b>\n                                <br /><br />\n                        Decisions are still only made based on basic strategy, but player is prompted with questions related to the count to practice\n                        as a layer on top of basic strategy.\n                    </Segment>\n                        </Grid.Column>\n                        <Grid.Column computer={16} tablet={8} mobile={8}>\n                            <Image fluid src=\"/images/guide/goal2.png\" />\n                        </Grid.Column>\n                    </Grid>\n                </Grid.Column>\n\n                <Grid.Column computer={5} tablet={16} mobile={16} textAlign=\"center\">\n                    <Grid className=\"no-padding\" verticalAlign=\"middle\">\n                        <Grid.Column computer={16} tablet={8} mobile={8} textAlign=\"center\" verticalAlign=\"middle\">\n                            <Segment inverted>\n                                <b>3. Card Counting and Playing Deviations</b>\n                                <br /><br />\n                        Decisions are still only made based on basic strategy, but player is prompted with questions related to the count to practice\n                        as a layer on top of basic strategy.\n                    </Segment>\n                        </Grid.Column>\n                        <Grid.Column computer={16} tablet={8} mobile={8}>\n                            <Image fluid src=\"/images/guide/goal3.png\" />\n                        </Grid.Column>\n                    </Grid>\n                </Grid.Column>\n\n            </Grid>\n\n\n\n        </Grid>\n    )\n}","import React from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Grid, Segment, Image, Divider } from \"semantic-ui-react\"\n\n\nexport default function CardCountingParameters({ getUrl, ...props }) {\n    return (\n        <Grid centered className=\"page-fit overflow\" verticalAlign='middle'>\n\n            <Grid.Column computer={11} tablet={9} mobile={16} textAlign=\"center\">\n                <Grid>\n                    <Grid.Column width={16}>\n                        <Segment basic textAlign=\"center\" style={{ marginBottom: \"0px\" }}>\n                            When you do start practing card-counting, the count-related parameters of the game can be adjusted as follow:\n                </Segment>\n                        <Segment inverted textAlign=\"center\">\n                            <b>Speed Settings</b>\n                            <br /><br/>\n                                    A faster game makes counting cards more difficult. You can calibrate the game speed settings\n                                    based on your comfort level, and increase the difficulty as you improve. The three adjustable times are:\n                                    <br /><br />\n                            <li>\n                                The pause between each CPU's play.\n                                    </li>\n                            <li>\n                                How quickly the cards are dealt.\n                                    </li>\n                            <li>\n                                How quickly hands are cleared at the end of each round.\n                                    </li>\n                        </Segment>\n                    </Grid.Column>\n\n                    <Grid.Column width={16} >\n                        <Segment inverted>\n                            <b>Question Frequency</b>\n                            <br /><br/>\n                                    After each of your plays in game, there is an opportunity for prompts to appear testing\n                                    your track of the count. (See <Link to={getUrl(\"/counting\")}>the next page </Link> for more details). There are three kinds of prompts,\n                                    and you can control the frequency at which each kind of prompt appears. \n\n                                </Segment>\n                    </Grid.Column>\n                </Grid>\n\n            </Grid.Column>\n            <Grid.Column computer={5} tablet={7} mobile={16} textAlign=\"center\">\n                <Image fluid src=\"/images/guide/countingParams.png\" />\n            </Grid.Column>\n\n\n        </Grid>\n    )\n}","import React, { useState } from \"react\"\nimport { Link } from \"react-router-dom\"\nimport { Grid, Segment, Image, Button, List, Divider } from \"semantic-ui-react\"\n\n\nexport default function MasteringCardCounting({ getUrl, ...props }) {\n\n    const [activeImageIndex, setActiveIndex] = useState(0)\n    const images = [\"decision.png\", \"runningCount.png\", \"trueCount.png\", \"numDecks.png\"]\n\n    const nextImage = () => {\n        var nextIndex = activeImageIndex + 1\n        if (nextIndex === images.length) {\n            nextIndex = 0;\n        }\n        setActiveIndex(nextIndex)\n    }\n\n    const prevImage = () => {\n        var nextIndex = activeImageIndex - 1\n        if (nextIndex < 0) {\n            nextIndex = images.length - 1\n        }\n        setActiveIndex(nextIndex)\n    }\n\n    const imagePath = () => {\n        return \"/images/guide/\" + images[activeImageIndex]\n    }\n\n    return (\n        <Grid className=\"page-fit overflow\" centered verticalAlign=\"middle\">\n            <Grid.Column width={16}>\n                <Segment basic textAlign=\"center\" style={{ margin: \"0\", paddingBottom: \"0\" }}>\n                    Based on the <Link to={getUrl(\"/strategy\")}>strategy considerations</Link> of your game, there are many different promps that you may receive on each turn. These include\n                    asking for the running count, true count, and an estimate for the number of decks remaining in the shoe, as well as the obligatory decision to hit, stay, etc... These prompts\n                    capture the metrics that you need to constantly track through a real game, and your accuracy is a direct reflection of your progress. Some notes on each kind of prompt are listed below.\n                    After you've read through this short training guide, you should be ready to <Link to = \"/train\">start practicing!</Link>\n                </Segment>\n            </Grid.Column>\n            <Grid centered reversed=\"computer\" verticalAlign=\"middle\">\n                <Grid.Column computer={7} tablet={12} mobile={16} textAlign=\"center\">\n                    <Grid centered verticalAlign=\"middle\">\n                        <Grid.Column width={2} textAlign=\"center\">\n                            <Button className=\"toggle-button\" icon=\"angle left\" onClick={prevImage} />\n                        </Grid.Column>\n                        <Grid.Column width={12} textAlign=\"center\" style={{ paddingLeft: \"0\", paddingRight: \"0\" }}>\n                            <Image centered fluid src={imagePath()} />\n                        </Grid.Column>\n                        <Grid.Column width={2} textAlign=\"center\">\n                            <Button className=\"toggle-button\" icon=\"angle right\" onClick={nextImage} />\n                        </Grid.Column>\n                    </Grid>\n                </Grid.Column>\n                <Grid.Column computer={9} tablet={16} mobile={16} textAlign=\"center\">\n\n                    <Segment basic style={{ margin: \"0\" }}>\n                        <List as=\"ul\">\n                            <List.Item as=\"li\">\n                                <b>Decision: </b>\n                            On each turn, you'll be asked to hit, stat, double down, etc... Selecting the strategically correct \n                            play will progress the game forward -- choosing incorrect plays will keep the prompt on screen and the game stopped.\n                        </List.Item>\n                            <Divider />\n                            <List.Item as=\"li\">\n                                <b>Running Count: </b>\n                            When you're asked for the running count, input your current track of the count. Regardless of if you arre correct or not,\n                            the prompt will give you the actual running count after you first entry, which can reorient you if you are off.\n                        </List.Item>\n                            <Divider />\n                            <List.Item as=\"li\">\n                                <b>Decks Remaining: </b>\n                            You also may be asked to estimate the number of decks remaining. Here, there will be options up to the number of decks in the initial shoe,\n                            in increments of .5.\n                        </List.Item>\n                            <Divider />\n                            <List.Item as=\"li\">\n                                <b>True Count: </b>\n                            Because the dividing the running count by the number of decks is not an exact science, there is some leeway when entering the true count.\n                            For instance, if the running count is 5 and the number of decks remaining is around 4 - 4.5, a true count estimate of 0 or 1 will be evaluated as\n                            \"correct\". Like the running count, the game will proceed after your first entry, regardless of correctness.\n                        </List.Item>\n\n\n                        </List>\n                    </Segment>\n                </Grid.Column>\n\n\n            </Grid>\n\n        </Grid>\n    )\n}","import React, { useState, useEffect } from \"react\"\nimport { Route, Switch, Link, useRouteMatch, useLocation, Redirect } from \"react-router-dom\"\n\nimport { Menu, Container, Button, Segment } from \"semantic-ui-react\"\n\nimport GameParameters from \"./GameParameters\"\nimport StrategyConsiderations from \"./StrategyConsiderations\"\nimport CardCountingParameters from \"./CardCountingParameters\"\nimport MasteringCardCounting from \"./MasteringCardCounting\"\n\nimport \"./style.css\"\n\nexport default function TrainingGuide({ ...props }) {\n\n    const [activePage, setActivePage] = useState(\"\")\n    const pagePaths = [\"/parameters\", \"/strategy\", \"/countparameters\", \"/counting\"]\n    const pageNames = [\"Game Parameters\", \"Strategy Considerations\", \"Card Counting Parameters\", \"Mastering Card Counting\"]\n    const PageComponents = [GameParameters, StrategyConsiderations, CardCountingParameters, MasteringCardCounting]\n\n    let match = useRouteMatch()\n    let loc = useLocation()\n\n    const getUrl = path => {\n        return match.url + path\n    }\n\n    const getNextPage = () => {\n        var currentPageIndex = pagePaths.indexOf(activePage);\n        currentPageIndex += 1;\n        if (currentPageIndex >= pagePaths.length) {\n            currentPageIndex = 0\n        }\n        setActivePage(pagePaths[currentPageIndex])\n    }\n\n    const getPrevPage = () => {\n        var currentPageIndex = pagePaths.indexOf(activePage);\n        currentPageIndex -= 1;\n        if (currentPageIndex < 0) {\n            currentPageIndex = pagePaths.length - 1\n        }\n        setActivePage(pagePaths[currentPageIndex])\n    }\n\n\n    useEffect(() => {\n\n        var foundPage = false\n        for (const path of pagePaths) {\n            if (loc.pathname.includes(path)) {\n                setActivePage(path)\n                foundPage = true;\n            }\n        }\n        if (!foundPage) {\n            setActivePage(pagePaths[0])\n        }\n\n    }, [loc])\n\n    return (\n        <Container style={{ marginTop: \"5px\", paddingTop: \"5px\" }}>\n            <Menu tabular attached=\"top\" className=\"menu-overflow\">\n                {pagePaths.map((path, index) => {\n                    return (\n                        <Menu.Item\n                            as={Link}\n                            to={getUrl(path)}\n                            name={pageNames[index]}\n                            active={activePage === path}\n                            onClick={() => setActivePage(path)}\n                            className={activePage === path ? \"\" : \"white\"}\n                            key={index}\n                        />\n                    )\n                })}\n\n            </Menu>\n\n            <Segment attached=\"bottom\">\n                <Switch>\n\n                    {pagePaths.map((path, index) => {\n                        const PageComponent = PageComponents[index]\n                        return (\n                            <Route path={getUrl(path)} key={index}>\n                                <PageComponent getUrl = {getUrl}/>\n                            </Route>\n                        )\n\n                    })}\n\n                    <Route>\n                        <Redirect to={getUrl(pagePaths[0])} />\n                    </Route>\n\n                </Switch>\n            </Segment>\n\n\n\n        </Container>\n    )\n}","import React from \"react\"\n\nimport { Grid, Header } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nexport default function OverallStats({...props}) {\n\n    return (\n        <Grid centered>\n            <Grid.Column width = {16} textAlign = \"center\" style = {{paddingTop: \"30vh\"}}>\n                <Header className = \"white sunrise\" size=\"huge\">Coming soon...</Header>\n                <Header size=\"medium\" className=\"white sunrise\">The capability to see stats compiled over many of your training games is currently in development</Header>\n            </Grid.Column>\n        </Grid>\n    )\n}","import React, { useEffect, useState } from \"react\"\nimport { Switch, Route, Redirect } from \"react-router-dom\"\n\nimport { GameProvider } from \"../Game/GlobalStates/GameState\"\nimport { QuestionProvider } from \"../Game/GlobalStates/QuestionState\"\n\nimport { useUserContext } from \"./UserState\"\nimport { SET_USER } from \"./UserState/action\"\n\nimport { Grid, Image } from \"semantic-ui-react\"\n\nimport UserAPI from \"../utils/APIs/UserAPI\"\n\nimport LoginSignup from \"./LoginSignup\"\n\nimport Navigation from \"../Navigation\"\nimport Game from \"../Game\"\nimport Introduction from \"../Introduction\"\nimport TrainingGuide from \"../TrainingGuide\"\nimport OverallStats from \"../StatDisplays/Overall\"\n\nimport Loader from \"../Components/Loader\"\n\nimport \"./style.css\"\n\nexport default function AuthenticateUser() {\n\n    const [userState, userDispatch] = useUserContext()\n    const [loading, setLoading] = useState(false)\n\n    // useEffect(() => {\n    //     UserAPI.findUsername(\"testuser\").then(dbUser => {\n            \n    //         if (dbUser) {\n    //             UserAPI.loginUser(\"testuser\").then(dbUser => {\n    //                 userDispatch({ type: SET_USER, user: dbUser })\n    //             })\n    //         } else {\n    //             UserAPI.signup(\"testuser\", \"testuser\").then(_ => {\n    //                 UserAPI.loginUser(\"testuser\").then(dbUser => {\n    //                     userDispatch({ type: SET_USER, user: dbUser })\n    //                 })\n    //             })\n    //         }\n    //     })\n    // }, [])\n\n    useEffect(() => {\n        setLoading(true)\n        UserAPI.checkCurrenUser().then(currentUser => {\n            if (currentUser) {\n               userDispatch({type: SET_USER, user: currentUser}) \n            }\n            setLoading(false)\n        })\n\n    }, [])\n\n    if (loading) {\n        return (\n            <div className = \"background\">\n                <Grid centered>\n                    <Grid.Column width= {16} textAlign = \"center\" style = {{paddingTop: \"25vh\"}}>\n                        <Image centered src = \"/images/logo.png\" size = \"small\" className = \"no-bottom-margin\"/>\n                        <Loader color = \"white\" width = {128} height = {64}/> \n                    </Grid.Column>\n\n                </Grid>\n               \n            </div>\n            \n        )\n    }\n\n    if (userState.user) {\n        return (\n\n            <QuestionProvider>\n                <Navigation />\n                <div className=\"background overflow\">\n                    <Switch>\n                        <Route path=\"/train\">\n                            <Game numDecks={4} numPlayers={2} />\n                        </Route>\n                        <Route path=\"/intro\">\n                            <Introduction />\n                        </Route>\n                        <Route path=\"/guide\">\n                            <TrainingGuide />\n                        </Route>\n                        <Route path=\"/stats\">\n                            <OverallStats />\n                        </Route>\n                        <Route>\n                            <Redirect to={userState.isNew ? \"/intro\" : \"/train\"} />\n                        </Route>\n                    </Switch>\n\n                </div>\n            </QuestionProvider>\n\n        )\n    } else {\n        return (\n            <Switch>\n                <Route path = \"/login\">\n                     <LoginSignup/>\n                </Route>\n                <Route>\n                    <Redirect to = \"/login\"/>\n                </Route>\n               \n            </Switch>\n            \n        )\n    }\n\n}","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\"\n\nimport 'semantic-ui-css/semantic.min.css'\n\nimport \"./ApplicationStyle.css\"\n\nimport { UserProvider } from \"./AuthenticateUser/UserState\"\nimport { GameProvider } from \"./Game/GlobalStates/GameState\"\n\nimport AuthenticateUser from \"./AuthenticateUser\"\n\n\n\nfunction App() {\n\n\n  return (\n    <Router>\n      <UserProvider>\n        <GameProvider>\n          <AuthenticateUser/>\n        </GameProvider>\n      </UserProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  \n  <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n","import React from \"react\"\n\nimport { Popup, Icon } from \"semantic-ui-react\"\n\nimport \"./style.css\"\n\nexport default function InfoPopup({ content, ...props }) {\n    return (\n        <Popup\n            trigger={<Icon size = \"tiny\" name = \"info circle\"/>}\n            className = {props.className}\n        >\n            <Popup.Content>\n                {content}\n            </Popup.Content>\n        </Popup>\n\n    )\n}","class Card {\n\n    constructor(name, value, suit) {\n        this.name = name;\n        this.value = value;\n        this.suit = suit;\n        this.up = true;\n    }\n\n    isAce() {\n        return this.name === \"A\"\n    }\n\n    isUp() {\n        return this.up\n    }\n\n    flipDown() {\n        this.up = false;\n    }\n\n    flipUp() {\n        this.up = true;\n    }\n\n}\n\nexport default Card","import Card from \"../Card\"\nimport Hand from \"../Hand\"\n\nclass PlayerHand extends Hand {\n\n    constructor(...cards) {\n        super()\n        this.aceInHand = false;\n        this.cards = [...cards]\n        this.handleAces()\n        this.done = false;\n        this.split = false;\n        this.evaluatedInsurance = false;\n    }\n\n    isDone() {\n        return this.done;\n    }\n\n    setDone() {\n        this.done = true;\n    }\n\n    isSplit() {\n        return this.split\n    }\n\n    setSplit() {\n        this.split = true\n    }\n\n    evaluateInsurance() {\n        this.evaluatedInsurance = true\n    }\n\n    hasEvaluatedInsurance() {\n        return this.evaluatedInsurance\n    }\n\n    seeHand() {\n        return this.cards.map(card => card.name + card.suit)\n    }\n\n    isBlackjack() {\n        return this.cards.length === 2 && this.handRepresentation() === \"A10\"\n    }\n\n    canDoubleDown() {\n        return this.cards.length === 2;\n    }\n\n    canBeSplit() {\n        return this.cards.length === 2 && this.cards[0].name === this.cards[1].name\n    }\n\n    hasHighAce() {\n\n        for (const card of this.cards) {\n            if (card.value == \"11\") {\n                return true;\n            }\n        }\n        return false\n    }\n\n\n    handRepresentation() {\n\n        var handTotal = this.getHandValue();\n\n        if (eval(handTotal) > 21) {\n            return \"bust\"\n        }\n\n        if (this.cards.length === 1) {\n            return this.cards[0].value\n        }\n\n        if (this.canBeSplit()) {\n            if (this.cards[0].isAce()) {\n                return \"AA\"\n            } else {\n                return this.cards[0].value + this.cards[1].value\n            }\n\n        } else if (this.hasHighAce()) {\n            var total = 0\n            for (const card of this.cards) {\n                if (card.value !== \"11\") {\n                    total += eval(card.value)\n                }\n            }\n            return \"A\" + String(total)\n        } else {\n            return this.getHandValue()\n        }\n    }\n\n    adjustRepresentationForDAS() {\n        if (!this.canBeSplit()) {\n            throw new Error(\"Trying to adjust for DAS when hand is not splittable\")\n        } else {\n            var currentRepresentation = this.handRepresentation();\n            if (currentRepresentation === \"AA\") {\n                return \"12\"\n            }\n            else {\n                return this.getHandValue()\n            }\n        }\n    }\n\n}\n\nexport default PlayerHand\n\n\n\n"],"sourceRoot":""}